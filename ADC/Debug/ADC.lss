
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002960  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00002960  000029f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  0080006c  0080006c  00002a00  2**0
                  ALLOC
  3 .stab         0000216c  00000000  00000000  00002a00  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010b4  00000000  00000000  00004b6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005c20  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005d60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007b19  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008a04  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  000097b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009914  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009ba1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a36f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e6       	ldi	r30, 0x60	; 96
      68:	f9 e2       	ldi	r31, 0x29	; 41
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 36       	cpi	r26, 0x6C	; 108
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac e6       	ldi	r26, 0x6C	; 108
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 36       	cpi	r26, 0x6D	; 109
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a4 11 	call	0x2348	; 0x2348 <main>
      8a:	0c 94 ae 14 	jmp	0x295c	; 0x295c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d6 11 	jmp	0x23ac	; 0x23ac <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 e6       	ldi	r26, 0x63	; 99
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 f2 11 	jmp	0x23e4	; 0x23e4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 e2 11 	jmp	0x23c4	; 0x23c4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 fe 11 	jmp	0x23fc	; 0x23fc <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 e2 11 	jmp	0x23c4	; 0x23c4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 fe 11 	jmp	0x23fc	; 0x23fc <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d6 11 	jmp	0x23ac	; 0x23ac <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	83 e6       	ldi	r24, 0x63	; 99
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 f2 11 	jmp	0x23e4	; 0x23e4 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 e2 11 	jmp	0x23c4	; 0x23c4 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 fe 11 	jmp	0x23fc	; 0x23fc <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 e2 11 	jmp	0x23c4	; 0x23c4 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 fe 11 	jmp	0x23fc	; 0x23fc <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 e2 11 	jmp	0x23c4	; 0x23c4 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 fe 11 	jmp	0x23fc	; 0x23fc <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 e6 11 	jmp	0x23cc	; 0x23cc <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 02 12 	jmp	0x2404	; 0x2404 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_enuInit>:
#include  "STD_TYPES.h"
#include  "errorState.h"
#include  "DIO_config.h"
#include  "DIO_priv.h"

ES_t DIO_enuInit(void) {
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	0f 92       	push	r0
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOTOK;
     b50:	19 82       	std	Y+1, r1	; 0x01
	DDRA = CONC(PA_PIN0_DIR, PA_PIN1_DIR, PA_PIN2_DIR, PA_PIN3_DIR, PA_PIN4_DIR,
     b52:	ea e3       	ldi	r30, 0x3A	; 58
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	8f e3       	ldi	r24, 0x3F	; 63
     b58:	80 83       	st	Z, r24
	PA_PIN5_DIR, PA_PIN6_DIR, PA_PIN7_DIR);
	DDRB = CONC(PB_PIN0_DIR, PB_PIN1_DIR, PB_PIN2_DIR, PB_PIN3_DIR, PB_PIN4_DIR,
     b5a:	e7 e3       	ldi	r30, 0x37	; 55
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	83 e5       	ldi	r24, 0x53	; 83
     b60:	80 83       	st	Z, r24
	PB_PIN5_DIR, PB_PIN6_DIR, PB_PIN7_DIR);
	DDRC = CONC(PC_PIN0_DIR, PC_PIN1_DIR, PC_PIN2_DIR, PC_PIN3_DIR, PC_PIN4_DIR,
     b62:	e4 e3       	ldi	r30, 0x34	; 52
     b64:	f0 e0       	ldi	r31, 0x00	; 0
     b66:	8f ef       	ldi	r24, 0xFF	; 255
     b68:	80 83       	st	Z, r24
	PC_PIN5_DIR, PC_PIN6_DIR, PC_PIN7_DIR);
	DDRD = CONC(PD_PIN0_DIR, PD_PIN1_DIR, PD_PIN2_DIR, PD_PIN3_DIR, PD_PIN4_DIR,
     b6a:	e1 e3       	ldi	r30, 0x31	; 49
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	83 e5       	ldi	r24, 0x53	; 83
     b70:	80 83       	st	Z, r24
	PD_PIN5_DIR, PD_PIN6_DIR, PD_PIN7_DIR);
	PORTA = CONC(PA_PIN0_VAL, PA_PIN1_VAL, PA_PIN2_VAL, PA_PIN3_VAL,
     b72:	eb e3       	ldi	r30, 0x3B	; 59
     b74:	f0 e0       	ldi	r31, 0x00	; 0
     b76:	85 e2       	ldi	r24, 0x25	; 37
     b78:	80 83       	st	Z, r24
	PA_PIN4_VAL, PA_PIN5_VAL, PA_PIN6_VAL, PA_PIN7_VAL);
	PORTB = CONC(PB_PIN0_VAL, PB_PIN1_VAL, PB_PIN2_VAL, PB_PIN3_VAL,
     b7a:	e8 e3       	ldi	r30, 0x38	; 56
     b7c:	f0 e0       	ldi	r31, 0x00	; 0
     b7e:	85 e6       	ldi	r24, 0x65	; 101
     b80:	80 83       	st	Z, r24
	PB_PIN4_VAL, PB_PIN5_VAL, PB_PIN6_VAL, PB_PIN7_VAL);
	PORTC = CONC(PC_PIN0_VAL, PC_PIN1_VAL, PC_PIN2_VAL, PC_PIN3_VAL,
     b82:	e5 e3       	ldi	r30, 0x35	; 53
     b84:	f0 e0       	ldi	r31, 0x00	; 0
     b86:	10 82       	st	Z, r1
	PC_PIN4_VAL, PC_PIN5_VAL, PC_PIN6_VAL, PC_PIN7_VAL);
	PORTD = CONC(PD_PIN0_VAL, PD_PIN1_VAL, PD_PIN2_VAL, PD_PIN3_VAL,
     b88:	e2 e3       	ldi	r30, 0x32	; 50
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	85 e6       	ldi	r24, 0x65	; 101
     b8e:	80 83       	st	Z, r24
	PD_PIN4_VAL, PD_PIN5_VAL, PD_PIN6_VAL, PD_PIN7_VAL);
	 Local_enuErrorState = ES_OK;
     b90:	81 e0       	ldi	r24, 0x01	; 1
     b92:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
     b94:	89 81       	ldd	r24, Y+1	; 0x01
}
     b96:	0f 90       	pop	r0
     b98:	cf 91       	pop	r28
     b9a:	df 91       	pop	r29
     b9c:	08 95       	ret

00000b9e <DIO_enuSetPortDirection>:

ES_t DIO_enuSetPortDirection(u8 Copy_u8PortID, u8 Copy_u8Value) {
     b9e:	df 93       	push	r29
     ba0:	cf 93       	push	r28
     ba2:	00 d0       	rcall	.+0      	; 0xba4 <DIO_enuSetPortDirection+0x6>
     ba4:	00 d0       	rcall	.+0      	; 0xba6 <DIO_enuSetPortDirection+0x8>
     ba6:	0f 92       	push	r0
     ba8:	cd b7       	in	r28, 0x3d	; 61
     baa:	de b7       	in	r29, 0x3e	; 62
     bac:	8a 83       	std	Y+2, r24	; 0x02
     bae:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOTOK;
     bb0:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8PortID <= DIO_PORTD) {
     bb2:	8a 81       	ldd	r24, Y+2	; 0x02
     bb4:	84 30       	cpi	r24, 0x04	; 4
     bb6:	a8 f5       	brcc	.+106    	; 0xc22 <DIO_enuSetPortDirection+0x84>
		switch (Copy_u8PortID) {
     bb8:	8a 81       	ldd	r24, Y+2	; 0x02
     bba:	28 2f       	mov	r18, r24
     bbc:	30 e0       	ldi	r19, 0x00	; 0
     bbe:	3d 83       	std	Y+5, r19	; 0x05
     bc0:	2c 83       	std	Y+4, r18	; 0x04
     bc2:	8c 81       	ldd	r24, Y+4	; 0x04
     bc4:	9d 81       	ldd	r25, Y+5	; 0x05
     bc6:	81 30       	cpi	r24, 0x01	; 1
     bc8:	91 05       	cpc	r25, r1
     bca:	d1 f0       	breq	.+52     	; 0xc00 <DIO_enuSetPortDirection+0x62>
     bcc:	2c 81       	ldd	r18, Y+4	; 0x04
     bce:	3d 81       	ldd	r19, Y+5	; 0x05
     bd0:	22 30       	cpi	r18, 0x02	; 2
     bd2:	31 05       	cpc	r19, r1
     bd4:	2c f4       	brge	.+10     	; 0xbe0 <DIO_enuSetPortDirection+0x42>
     bd6:	8c 81       	ldd	r24, Y+4	; 0x04
     bd8:	9d 81       	ldd	r25, Y+5	; 0x05
     bda:	00 97       	sbiw	r24, 0x00	; 0
     bdc:	61 f0       	breq	.+24     	; 0xbf6 <DIO_enuSetPortDirection+0x58>
     bde:	1e c0       	rjmp	.+60     	; 0xc1c <DIO_enuSetPortDirection+0x7e>
     be0:	2c 81       	ldd	r18, Y+4	; 0x04
     be2:	3d 81       	ldd	r19, Y+5	; 0x05
     be4:	22 30       	cpi	r18, 0x02	; 2
     be6:	31 05       	cpc	r19, r1
     be8:	81 f0       	breq	.+32     	; 0xc0a <DIO_enuSetPortDirection+0x6c>
     bea:	8c 81       	ldd	r24, Y+4	; 0x04
     bec:	9d 81       	ldd	r25, Y+5	; 0x05
     bee:	83 30       	cpi	r24, 0x03	; 3
     bf0:	91 05       	cpc	r25, r1
     bf2:	81 f0       	breq	.+32     	; 0xc14 <DIO_enuSetPortDirection+0x76>
     bf4:	13 c0       	rjmp	.+38     	; 0xc1c <DIO_enuSetPortDirection+0x7e>
			case DIO_PORTA:
			DDRA = Copy_u8Value;
     bf6:	ea e3       	ldi	r30, 0x3A	; 58
     bf8:	f0 e0       	ldi	r31, 0x00	; 0
     bfa:	8b 81       	ldd	r24, Y+3	; 0x03
     bfc:	80 83       	st	Z, r24
     bfe:	0e c0       	rjmp	.+28     	; 0xc1c <DIO_enuSetPortDirection+0x7e>
			break;
			case DIO_PORTB:
			DDRB = Copy_u8Value;
     c00:	e7 e3       	ldi	r30, 0x37	; 55
     c02:	f0 e0       	ldi	r31, 0x00	; 0
     c04:	8b 81       	ldd	r24, Y+3	; 0x03
     c06:	80 83       	st	Z, r24
     c08:	09 c0       	rjmp	.+18     	; 0xc1c <DIO_enuSetPortDirection+0x7e>
			break;
			case DIO_PORTC:
			DDRC = Copy_u8Value;
     c0a:	e4 e3       	ldi	r30, 0x34	; 52
     c0c:	f0 e0       	ldi	r31, 0x00	; 0
     c0e:	8b 81       	ldd	r24, Y+3	; 0x03
     c10:	80 83       	st	Z, r24
     c12:	04 c0       	rjmp	.+8      	; 0xc1c <DIO_enuSetPortDirection+0x7e>
			break;
			case DIO_PORTD:
			DDRD = Copy_u8Value;
     c14:	e1 e3       	ldi	r30, 0x31	; 49
     c16:	f0 e0       	ldi	r31, 0x00	; 0
     c18:	8b 81       	ldd	r24, Y+3	; 0x03
     c1a:	80 83       	st	Z, r24
			break;
		}
		Local_enuErrorState = ES_OK;
     c1c:	81 e0       	ldi	r24, 0x01	; 1
     c1e:	89 83       	std	Y+1, r24	; 0x01
     c20:	02 c0       	rjmp	.+4      	; 0xc26 <DIO_enuSetPortDirection+0x88>
		} else {
		Local_enuErrorState = ES_OUT_OF_RANGE;
     c22:	82 e0       	ldi	r24, 0x02	; 2
     c24:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
     c26:	89 81       	ldd	r24, Y+1	; 0x01
}
     c28:	0f 90       	pop	r0
     c2a:	0f 90       	pop	r0
     c2c:	0f 90       	pop	r0
     c2e:	0f 90       	pop	r0
     c30:	0f 90       	pop	r0
     c32:	cf 91       	pop	r28
     c34:	df 91       	pop	r29
     c36:	08 95       	ret

00000c38 <DIO_enuSetPortValue>:

ES_t DIO_enuSetPortValue(u8 Copy_u8PortID, u8 Copy_u8Value) {
     c38:	df 93       	push	r29
     c3a:	cf 93       	push	r28
     c3c:	00 d0       	rcall	.+0      	; 0xc3e <DIO_enuSetPortValue+0x6>
     c3e:	00 d0       	rcall	.+0      	; 0xc40 <DIO_enuSetPortValue+0x8>
     c40:	0f 92       	push	r0
     c42:	cd b7       	in	r28, 0x3d	; 61
     c44:	de b7       	in	r29, 0x3e	; 62
     c46:	8a 83       	std	Y+2, r24	; 0x02
     c48:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOTOK;
     c4a:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8PortID <= DIO_PORTD) {
     c4c:	8a 81       	ldd	r24, Y+2	; 0x02
     c4e:	84 30       	cpi	r24, 0x04	; 4
     c50:	a8 f5       	brcc	.+106    	; 0xcbc <DIO_enuSetPortValue+0x84>
		switch (Copy_u8PortID) {
     c52:	8a 81       	ldd	r24, Y+2	; 0x02
     c54:	28 2f       	mov	r18, r24
     c56:	30 e0       	ldi	r19, 0x00	; 0
     c58:	3d 83       	std	Y+5, r19	; 0x05
     c5a:	2c 83       	std	Y+4, r18	; 0x04
     c5c:	8c 81       	ldd	r24, Y+4	; 0x04
     c5e:	9d 81       	ldd	r25, Y+5	; 0x05
     c60:	81 30       	cpi	r24, 0x01	; 1
     c62:	91 05       	cpc	r25, r1
     c64:	d1 f0       	breq	.+52     	; 0xc9a <DIO_enuSetPortValue+0x62>
     c66:	2c 81       	ldd	r18, Y+4	; 0x04
     c68:	3d 81       	ldd	r19, Y+5	; 0x05
     c6a:	22 30       	cpi	r18, 0x02	; 2
     c6c:	31 05       	cpc	r19, r1
     c6e:	2c f4       	brge	.+10     	; 0xc7a <DIO_enuSetPortValue+0x42>
     c70:	8c 81       	ldd	r24, Y+4	; 0x04
     c72:	9d 81       	ldd	r25, Y+5	; 0x05
     c74:	00 97       	sbiw	r24, 0x00	; 0
     c76:	61 f0       	breq	.+24     	; 0xc90 <DIO_enuSetPortValue+0x58>
     c78:	1e c0       	rjmp	.+60     	; 0xcb6 <DIO_enuSetPortValue+0x7e>
     c7a:	2c 81       	ldd	r18, Y+4	; 0x04
     c7c:	3d 81       	ldd	r19, Y+5	; 0x05
     c7e:	22 30       	cpi	r18, 0x02	; 2
     c80:	31 05       	cpc	r19, r1
     c82:	81 f0       	breq	.+32     	; 0xca4 <DIO_enuSetPortValue+0x6c>
     c84:	8c 81       	ldd	r24, Y+4	; 0x04
     c86:	9d 81       	ldd	r25, Y+5	; 0x05
     c88:	83 30       	cpi	r24, 0x03	; 3
     c8a:	91 05       	cpc	r25, r1
     c8c:	81 f0       	breq	.+32     	; 0xcae <DIO_enuSetPortValue+0x76>
     c8e:	13 c0       	rjmp	.+38     	; 0xcb6 <DIO_enuSetPortValue+0x7e>
			case DIO_PORTA:
			PORTA = Copy_u8Value;
     c90:	eb e3       	ldi	r30, 0x3B	; 59
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	8b 81       	ldd	r24, Y+3	; 0x03
     c96:	80 83       	st	Z, r24
     c98:	0e c0       	rjmp	.+28     	; 0xcb6 <DIO_enuSetPortValue+0x7e>
			break;
			case DIO_PORTB:
			PORTB = Copy_u8Value;
     c9a:	e8 e3       	ldi	r30, 0x38	; 56
     c9c:	f0 e0       	ldi	r31, 0x00	; 0
     c9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ca0:	80 83       	st	Z, r24
     ca2:	09 c0       	rjmp	.+18     	; 0xcb6 <DIO_enuSetPortValue+0x7e>
			break;
			case DIO_PORTC:
			PORTC = Copy_u8Value;
     ca4:	e5 e3       	ldi	r30, 0x35	; 53
     ca6:	f0 e0       	ldi	r31, 0x00	; 0
     ca8:	8b 81       	ldd	r24, Y+3	; 0x03
     caa:	80 83       	st	Z, r24
     cac:	04 c0       	rjmp	.+8      	; 0xcb6 <DIO_enuSetPortValue+0x7e>
			break;
			case DIO_PORTD:
			PORTD = Copy_u8Value;
     cae:	e2 e3       	ldi	r30, 0x32	; 50
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	8b 81       	ldd	r24, Y+3	; 0x03
     cb4:	80 83       	st	Z, r24
			break;
		}
		Local_enuErrorState = ES_OK;
     cb6:	81 e0       	ldi	r24, 0x01	; 1
     cb8:	89 83       	std	Y+1, r24	; 0x01
     cba:	02 c0       	rjmp	.+4      	; 0xcc0 <DIO_enuSetPortValue+0x88>
		} else {
		Local_enuErrorState = ES_OUT_OF_RANGE;
     cbc:	82 e0       	ldi	r24, 0x02	; 2
     cbe:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
     cc0:	89 81       	ldd	r24, Y+1	; 0x01
}
     cc2:	0f 90       	pop	r0
     cc4:	0f 90       	pop	r0
     cc6:	0f 90       	pop	r0
     cc8:	0f 90       	pop	r0
     cca:	0f 90       	pop	r0
     ccc:	cf 91       	pop	r28
     cce:	df 91       	pop	r29
     cd0:	08 95       	ret

00000cd2 <DIO_enuTogPort>:

ES_t DIO_enuTogPort(u8 Copy_u8PortID) {
     cd2:	df 93       	push	r29
     cd4:	cf 93       	push	r28
     cd6:	00 d0       	rcall	.+0      	; 0xcd8 <DIO_enuTogPort+0x6>
     cd8:	00 d0       	rcall	.+0      	; 0xcda <DIO_enuTogPort+0x8>
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
     cde:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOTOK;
     ce0:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8PortID <= DIO_PORTD) {
     ce2:	8a 81       	ldd	r24, Y+2	; 0x02
     ce4:	84 30       	cpi	r24, 0x04	; 4
     ce6:	08 f0       	brcs	.+2      	; 0xcea <DIO_enuTogPort+0x18>
     ce8:	41 c0       	rjmp	.+130    	; 0xd6c <DIO_enuTogPort+0x9a>
		switch (Copy_u8PortID) {
     cea:	8a 81       	ldd	r24, Y+2	; 0x02
     cec:	28 2f       	mov	r18, r24
     cee:	30 e0       	ldi	r19, 0x00	; 0
     cf0:	3c 83       	std	Y+4, r19	; 0x04
     cf2:	2b 83       	std	Y+3, r18	; 0x03
     cf4:	8b 81       	ldd	r24, Y+3	; 0x03
     cf6:	9c 81       	ldd	r25, Y+4	; 0x04
     cf8:	81 30       	cpi	r24, 0x01	; 1
     cfa:	91 05       	cpc	r25, r1
     cfc:	e9 f0       	breq	.+58     	; 0xd38 <DIO_enuTogPort+0x66>
     cfe:	2b 81       	ldd	r18, Y+3	; 0x03
     d00:	3c 81       	ldd	r19, Y+4	; 0x04
     d02:	22 30       	cpi	r18, 0x02	; 2
     d04:	31 05       	cpc	r19, r1
     d06:	2c f4       	brge	.+10     	; 0xd12 <DIO_enuTogPort+0x40>
     d08:	8b 81       	ldd	r24, Y+3	; 0x03
     d0a:	9c 81       	ldd	r25, Y+4	; 0x04
     d0c:	00 97       	sbiw	r24, 0x00	; 0
     d0e:	61 f0       	breq	.+24     	; 0xd28 <DIO_enuTogPort+0x56>
     d10:	2a c0       	rjmp	.+84     	; 0xd66 <DIO_enuTogPort+0x94>
     d12:	2b 81       	ldd	r18, Y+3	; 0x03
     d14:	3c 81       	ldd	r19, Y+4	; 0x04
     d16:	22 30       	cpi	r18, 0x02	; 2
     d18:	31 05       	cpc	r19, r1
     d1a:	b1 f0       	breq	.+44     	; 0xd48 <DIO_enuTogPort+0x76>
     d1c:	8b 81       	ldd	r24, Y+3	; 0x03
     d1e:	9c 81       	ldd	r25, Y+4	; 0x04
     d20:	83 30       	cpi	r24, 0x03	; 3
     d22:	91 05       	cpc	r25, r1
     d24:	c9 f0       	breq	.+50     	; 0xd58 <DIO_enuTogPort+0x86>
     d26:	1f c0       	rjmp	.+62     	; 0xd66 <DIO_enuTogPort+0x94>
			case DIO_PORTA:
			PORTA = ~PORTA;
     d28:	ab e3       	ldi	r26, 0x3B	; 59
     d2a:	b0 e0       	ldi	r27, 0x00	; 0
     d2c:	eb e3       	ldi	r30, 0x3B	; 59
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	80 81       	ld	r24, Z
     d32:	80 95       	com	r24
     d34:	8c 93       	st	X, r24
     d36:	17 c0       	rjmp	.+46     	; 0xd66 <DIO_enuTogPort+0x94>
			break;
			case DIO_PORTB:
			PORTB = ~PORTB;
     d38:	a8 e3       	ldi	r26, 0x38	; 56
     d3a:	b0 e0       	ldi	r27, 0x00	; 0
     d3c:	e8 e3       	ldi	r30, 0x38	; 56
     d3e:	f0 e0       	ldi	r31, 0x00	; 0
     d40:	80 81       	ld	r24, Z
     d42:	80 95       	com	r24
     d44:	8c 93       	st	X, r24
     d46:	0f c0       	rjmp	.+30     	; 0xd66 <DIO_enuTogPort+0x94>
			break;
			case DIO_PORTC:
			PORTC = ~PORTC;
     d48:	a5 e3       	ldi	r26, 0x35	; 53
     d4a:	b0 e0       	ldi	r27, 0x00	; 0
     d4c:	e5 e3       	ldi	r30, 0x35	; 53
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
     d50:	80 81       	ld	r24, Z
     d52:	80 95       	com	r24
     d54:	8c 93       	st	X, r24
     d56:	07 c0       	rjmp	.+14     	; 0xd66 <DIO_enuTogPort+0x94>
			break;
			case DIO_PORTD:
			PORTD = ~PORTD;
     d58:	a2 e3       	ldi	r26, 0x32	; 50
     d5a:	b0 e0       	ldi	r27, 0x00	; 0
     d5c:	e2 e3       	ldi	r30, 0x32	; 50
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	80 81       	ld	r24, Z
     d62:	80 95       	com	r24
     d64:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
     d66:	81 e0       	ldi	r24, 0x01	; 1
     d68:	89 83       	std	Y+1, r24	; 0x01
     d6a:	02 c0       	rjmp	.+4      	; 0xd70 <DIO_enuTogPort+0x9e>
		} else {
		Local_enuErrorState = ES_OUT_OF_RANGE;
     d6c:	82 e0       	ldi	r24, 0x02	; 2
     d6e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
     d70:	89 81       	ldd	r24, Y+1	; 0x01
}
     d72:	0f 90       	pop	r0
     d74:	0f 90       	pop	r0
     d76:	0f 90       	pop	r0
     d78:	0f 90       	pop	r0
     d7a:	cf 91       	pop	r28
     d7c:	df 91       	pop	r29
     d7e:	08 95       	ret

00000d80 <DIO_enuGetPortValue>:

ES_t DIO_enuGetPortValue(u8 Copy_u8PortID, u8* Copy_pu8Value) {
     d80:	df 93       	push	r29
     d82:	cf 93       	push	r28
     d84:	00 d0       	rcall	.+0      	; 0xd86 <DIO_enuGetPortValue+0x6>
     d86:	00 d0       	rcall	.+0      	; 0xd88 <DIO_enuGetPortValue+0x8>
     d88:	00 d0       	rcall	.+0      	; 0xd8a <DIO_enuGetPortValue+0xa>
     d8a:	cd b7       	in	r28, 0x3d	; 61
     d8c:	de b7       	in	r29, 0x3e	; 62
     d8e:	8a 83       	std	Y+2, r24	; 0x02
     d90:	7c 83       	std	Y+4, r23	; 0x04
     d92:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOTOK;
     d94:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_pu8Value != NULL) {
     d96:	8b 81       	ldd	r24, Y+3	; 0x03
     d98:	9c 81       	ldd	r25, Y+4	; 0x04
     d9a:	00 97       	sbiw	r24, 0x00	; 0
     d9c:	09 f4       	brne	.+2      	; 0xda0 <DIO_enuGetPortValue+0x20>
     d9e:	43 c0       	rjmp	.+134    	; 0xe26 <DIO_enuGetPortValue+0xa6>
		if (Copy_u8PortID <= DIO_PORTD) {
     da0:	8a 81       	ldd	r24, Y+2	; 0x02
     da2:	84 30       	cpi	r24, 0x04	; 4
     da4:	e8 f5       	brcc	.+122    	; 0xe20 <DIO_enuGetPortValue+0xa0>
			switch (Copy_u8PortID) {
     da6:	8a 81       	ldd	r24, Y+2	; 0x02
     da8:	28 2f       	mov	r18, r24
     daa:	30 e0       	ldi	r19, 0x00	; 0
     dac:	3e 83       	std	Y+6, r19	; 0x06
     dae:	2d 83       	std	Y+5, r18	; 0x05
     db0:	8d 81       	ldd	r24, Y+5	; 0x05
     db2:	9e 81       	ldd	r25, Y+6	; 0x06
     db4:	81 30       	cpi	r24, 0x01	; 1
     db6:	91 05       	cpc	r25, r1
     db8:	e1 f0       	breq	.+56     	; 0xdf2 <DIO_enuGetPortValue+0x72>
     dba:	2d 81       	ldd	r18, Y+5	; 0x05
     dbc:	3e 81       	ldd	r19, Y+6	; 0x06
     dbe:	22 30       	cpi	r18, 0x02	; 2
     dc0:	31 05       	cpc	r19, r1
     dc2:	2c f4       	brge	.+10     	; 0xdce <DIO_enuGetPortValue+0x4e>
     dc4:	8d 81       	ldd	r24, Y+5	; 0x05
     dc6:	9e 81       	ldd	r25, Y+6	; 0x06
     dc8:	00 97       	sbiw	r24, 0x00	; 0
     dca:	61 f0       	breq	.+24     	; 0xde4 <DIO_enuGetPortValue+0x64>
     dcc:	26 c0       	rjmp	.+76     	; 0xe1a <DIO_enuGetPortValue+0x9a>
     dce:	2d 81       	ldd	r18, Y+5	; 0x05
     dd0:	3e 81       	ldd	r19, Y+6	; 0x06
     dd2:	22 30       	cpi	r18, 0x02	; 2
     dd4:	31 05       	cpc	r19, r1
     dd6:	a1 f0       	breq	.+40     	; 0xe00 <DIO_enuGetPortValue+0x80>
     dd8:	8d 81       	ldd	r24, Y+5	; 0x05
     dda:	9e 81       	ldd	r25, Y+6	; 0x06
     ddc:	83 30       	cpi	r24, 0x03	; 3
     dde:	91 05       	cpc	r25, r1
     de0:	b1 f0       	breq	.+44     	; 0xe0e <DIO_enuGetPortValue+0x8e>
     de2:	1b c0       	rjmp	.+54     	; 0xe1a <DIO_enuGetPortValue+0x9a>
				case DIO_PORTA:
				*Copy_pu8Value = PINA;
     de4:	e9 e3       	ldi	r30, 0x39	; 57
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	80 81       	ld	r24, Z
     dea:	eb 81       	ldd	r30, Y+3	; 0x03
     dec:	fc 81       	ldd	r31, Y+4	; 0x04
     dee:	80 83       	st	Z, r24
     df0:	14 c0       	rjmp	.+40     	; 0xe1a <DIO_enuGetPortValue+0x9a>
				break;
				case DIO_PORTB:
				*Copy_pu8Value = PINB;
     df2:	e6 e3       	ldi	r30, 0x36	; 54
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	80 81       	ld	r24, Z
     df8:	eb 81       	ldd	r30, Y+3	; 0x03
     dfa:	fc 81       	ldd	r31, Y+4	; 0x04
     dfc:	80 83       	st	Z, r24
     dfe:	0d c0       	rjmp	.+26     	; 0xe1a <DIO_enuGetPortValue+0x9a>
				break;
				case DIO_PORTC:
				*Copy_pu8Value = PINC;
     e00:	e3 e3       	ldi	r30, 0x33	; 51
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	80 81       	ld	r24, Z
     e06:	eb 81       	ldd	r30, Y+3	; 0x03
     e08:	fc 81       	ldd	r31, Y+4	; 0x04
     e0a:	80 83       	st	Z, r24
     e0c:	06 c0       	rjmp	.+12     	; 0xe1a <DIO_enuGetPortValue+0x9a>
				break;
				case DIO_PORTD:
				*Copy_pu8Value = PIND;
     e0e:	e0 e3       	ldi	r30, 0x30	; 48
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	eb 81       	ldd	r30, Y+3	; 0x03
     e16:	fc 81       	ldd	r31, Y+4	; 0x04
     e18:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorState = ES_OK;
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	89 83       	std	Y+1, r24	; 0x01
     e1e:	05 c0       	rjmp	.+10     	; 0xe2a <DIO_enuGetPortValue+0xaa>

			} else {
			Local_enuErrorState = ES_OUT_OF_RANGE;
     e20:	82 e0       	ldi	r24, 0x02	; 2
     e22:	89 83       	std	Y+1, r24	; 0x01
     e24:	02 c0       	rjmp	.+4      	; 0xe2a <DIO_enuGetPortValue+0xaa>
		}
		} else {
		Local_enuErrorState = ES_NULL_POINTER;
     e26:	83 e0       	ldi	r24, 0x03	; 3
     e28:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
     e2a:	89 81       	ldd	r24, Y+1	; 0x01
}
     e2c:	26 96       	adiw	r28, 0x06	; 6
     e2e:	0f b6       	in	r0, 0x3f	; 63
     e30:	f8 94       	cli
     e32:	de bf       	out	0x3e, r29	; 62
     e34:	0f be       	out	0x3f, r0	; 63
     e36:	cd bf       	out	0x3d, r28	; 61
     e38:	cf 91       	pop	r28
     e3a:	df 91       	pop	r29
     e3c:	08 95       	ret

00000e3e <DIO_enuGetPinValue>:

ES_t DIO_enuGetPinValue(u8 Copy_u8PortID, u8 Copy_u8PinID, u8* Copy_pu8Value) {
     e3e:	df 93       	push	r29
     e40:	cf 93       	push	r28
     e42:	cd b7       	in	r28, 0x3d	; 61
     e44:	de b7       	in	r29, 0x3e	; 62
     e46:	27 97       	sbiw	r28, 0x07	; 7
     e48:	0f b6       	in	r0, 0x3f	; 63
     e4a:	f8 94       	cli
     e4c:	de bf       	out	0x3e, r29	; 62
     e4e:	0f be       	out	0x3f, r0	; 63
     e50:	cd bf       	out	0x3d, r28	; 61
     e52:	8a 83       	std	Y+2, r24	; 0x02
     e54:	6b 83       	std	Y+3, r22	; 0x03
     e56:	5d 83       	std	Y+5, r21	; 0x05
     e58:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOTOK;
     e5a:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_pu8Value != NULL) {
     e5c:	8c 81       	ldd	r24, Y+4	; 0x04
     e5e:	9d 81       	ldd	r25, Y+5	; 0x05
     e60:	00 97       	sbiw	r24, 0x00	; 0
     e62:	09 f4       	brne	.+2      	; 0xe66 <DIO_enuGetPinValue+0x28>
     e64:	7e c0       	rjmp	.+252    	; 0xf62 <DIO_enuGetPinValue+0x124>
		if (Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7) {
     e66:	8a 81       	ldd	r24, Y+2	; 0x02
     e68:	84 30       	cpi	r24, 0x04	; 4
     e6a:	08 f0       	brcs	.+2      	; 0xe6e <DIO_enuGetPinValue+0x30>
     e6c:	77 c0       	rjmp	.+238    	; 0xf5c <DIO_enuGetPinValue+0x11e>
     e6e:	8b 81       	ldd	r24, Y+3	; 0x03
     e70:	88 30       	cpi	r24, 0x08	; 8
     e72:	08 f0       	brcs	.+2      	; 0xe76 <DIO_enuGetPinValue+0x38>
     e74:	73 c0       	rjmp	.+230    	; 0xf5c <DIO_enuGetPinValue+0x11e>
			switch (Copy_u8PortID) {
     e76:	8a 81       	ldd	r24, Y+2	; 0x02
     e78:	28 2f       	mov	r18, r24
     e7a:	30 e0       	ldi	r19, 0x00	; 0
     e7c:	3f 83       	std	Y+7, r19	; 0x07
     e7e:	2e 83       	std	Y+6, r18	; 0x06
     e80:	4e 81       	ldd	r20, Y+6	; 0x06
     e82:	5f 81       	ldd	r21, Y+7	; 0x07
     e84:	41 30       	cpi	r20, 0x01	; 1
     e86:	51 05       	cpc	r21, r1
     e88:	59 f1       	breq	.+86     	; 0xee0 <DIO_enuGetPinValue+0xa2>
     e8a:	8e 81       	ldd	r24, Y+6	; 0x06
     e8c:	9f 81       	ldd	r25, Y+7	; 0x07
     e8e:	82 30       	cpi	r24, 0x02	; 2
     e90:	91 05       	cpc	r25, r1
     e92:	34 f4       	brge	.+12     	; 0xea0 <DIO_enuGetPinValue+0x62>
     e94:	2e 81       	ldd	r18, Y+6	; 0x06
     e96:	3f 81       	ldd	r19, Y+7	; 0x07
     e98:	21 15       	cp	r18, r1
     e9a:	31 05       	cpc	r19, r1
     e9c:	69 f0       	breq	.+26     	; 0xeb8 <DIO_enuGetPinValue+0x7a>
     e9e:	5b c0       	rjmp	.+182    	; 0xf56 <DIO_enuGetPinValue+0x118>
     ea0:	4e 81       	ldd	r20, Y+6	; 0x06
     ea2:	5f 81       	ldd	r21, Y+7	; 0x07
     ea4:	42 30       	cpi	r20, 0x02	; 2
     ea6:	51 05       	cpc	r21, r1
     ea8:	79 f1       	breq	.+94     	; 0xf08 <DIO_enuGetPinValue+0xca>
     eaa:	8e 81       	ldd	r24, Y+6	; 0x06
     eac:	9f 81       	ldd	r25, Y+7	; 0x07
     eae:	83 30       	cpi	r24, 0x03	; 3
     eb0:	91 05       	cpc	r25, r1
     eb2:	09 f4       	brne	.+2      	; 0xeb6 <DIO_enuGetPinValue+0x78>
     eb4:	3d c0       	rjmp	.+122    	; 0xf30 <DIO_enuGetPinValue+0xf2>
     eb6:	4f c0       	rjmp	.+158    	; 0xf56 <DIO_enuGetPinValue+0x118>
				case DIO_PORTA:
				*Copy_pu8Value = ((PINA >> Copy_u8PinID) & DIO_MASK_BIT);
     eb8:	e9 e3       	ldi	r30, 0x39	; 57
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	80 81       	ld	r24, Z
     ebe:	28 2f       	mov	r18, r24
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	8b 81       	ldd	r24, Y+3	; 0x03
     ec4:	88 2f       	mov	r24, r24
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	a9 01       	movw	r20, r18
     eca:	02 c0       	rjmp	.+4      	; 0xed0 <DIO_enuGetPinValue+0x92>
     ecc:	55 95       	asr	r21
     ece:	47 95       	ror	r20
     ed0:	8a 95       	dec	r24
     ed2:	e2 f7       	brpl	.-8      	; 0xecc <DIO_enuGetPinValue+0x8e>
     ed4:	ca 01       	movw	r24, r20
     ed6:	81 70       	andi	r24, 0x01	; 1
     ed8:	ec 81       	ldd	r30, Y+4	; 0x04
     eda:	fd 81       	ldd	r31, Y+5	; 0x05
     edc:	80 83       	st	Z, r24
     ede:	3b c0       	rjmp	.+118    	; 0xf56 <DIO_enuGetPinValue+0x118>
				break;
				case DIO_PORTB:
				*Copy_pu8Value = ((PINB >> Copy_u8PinID) & DIO_MASK_BIT);
     ee0:	e6 e3       	ldi	r30, 0x36	; 54
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 81       	ld	r24, Z
     ee6:	28 2f       	mov	r18, r24
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	8b 81       	ldd	r24, Y+3	; 0x03
     eec:	88 2f       	mov	r24, r24
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	a9 01       	movw	r20, r18
     ef2:	02 c0       	rjmp	.+4      	; 0xef8 <DIO_enuGetPinValue+0xba>
     ef4:	55 95       	asr	r21
     ef6:	47 95       	ror	r20
     ef8:	8a 95       	dec	r24
     efa:	e2 f7       	brpl	.-8      	; 0xef4 <DIO_enuGetPinValue+0xb6>
     efc:	ca 01       	movw	r24, r20
     efe:	81 70       	andi	r24, 0x01	; 1
     f00:	ec 81       	ldd	r30, Y+4	; 0x04
     f02:	fd 81       	ldd	r31, Y+5	; 0x05
     f04:	80 83       	st	Z, r24
     f06:	27 c0       	rjmp	.+78     	; 0xf56 <DIO_enuGetPinValue+0x118>
				break;
				case DIO_PORTC:
				*Copy_pu8Value = ((PINC >> Copy_u8PinID) & DIO_MASK_BIT);
     f08:	e3 e3       	ldi	r30, 0x33	; 51
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	80 81       	ld	r24, Z
     f0e:	28 2f       	mov	r18, r24
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	8b 81       	ldd	r24, Y+3	; 0x03
     f14:	88 2f       	mov	r24, r24
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	a9 01       	movw	r20, r18
     f1a:	02 c0       	rjmp	.+4      	; 0xf20 <DIO_enuGetPinValue+0xe2>
     f1c:	55 95       	asr	r21
     f1e:	47 95       	ror	r20
     f20:	8a 95       	dec	r24
     f22:	e2 f7       	brpl	.-8      	; 0xf1c <DIO_enuGetPinValue+0xde>
     f24:	ca 01       	movw	r24, r20
     f26:	81 70       	andi	r24, 0x01	; 1
     f28:	ec 81       	ldd	r30, Y+4	; 0x04
     f2a:	fd 81       	ldd	r31, Y+5	; 0x05
     f2c:	80 83       	st	Z, r24
     f2e:	13 c0       	rjmp	.+38     	; 0xf56 <DIO_enuGetPinValue+0x118>
				break;
				case DIO_PORTD:
				*Copy_pu8Value = ((PIND >> Copy_u8PinID) & DIO_MASK_BIT);
     f30:	e0 e3       	ldi	r30, 0x30	; 48
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	80 81       	ld	r24, Z
     f36:	28 2f       	mov	r18, r24
     f38:	30 e0       	ldi	r19, 0x00	; 0
     f3a:	8b 81       	ldd	r24, Y+3	; 0x03
     f3c:	88 2f       	mov	r24, r24
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	a9 01       	movw	r20, r18
     f42:	02 c0       	rjmp	.+4      	; 0xf48 <DIO_enuGetPinValue+0x10a>
     f44:	55 95       	asr	r21
     f46:	47 95       	ror	r20
     f48:	8a 95       	dec	r24
     f4a:	e2 f7       	brpl	.-8      	; 0xf44 <DIO_enuGetPinValue+0x106>
     f4c:	ca 01       	movw	r24, r20
     f4e:	81 70       	andi	r24, 0x01	; 1
     f50:	ec 81       	ldd	r30, Y+4	; 0x04
     f52:	fd 81       	ldd	r31, Y+5	; 0x05
     f54:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorState = ES_OK;
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	89 83       	std	Y+1, r24	; 0x01
     f5a:	05 c0       	rjmp	.+10     	; 0xf66 <DIO_enuGetPinValue+0x128>
			} else {
			Local_enuErrorState = ES_OUT_OF_RANGE;
     f5c:	82 e0       	ldi	r24, 0x02	; 2
     f5e:	89 83       	std	Y+1, r24	; 0x01
     f60:	02 c0       	rjmp	.+4      	; 0xf66 <DIO_enuGetPinValue+0x128>
		}
		} else {
		Local_enuErrorState = ES_NULL_POINTER;
     f62:	83 e0       	ldi	r24, 0x03	; 3
     f64:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
     f66:	89 81       	ldd	r24, Y+1	; 0x01
}
     f68:	27 96       	adiw	r28, 0x07	; 7
     f6a:	0f b6       	in	r0, 0x3f	; 63
     f6c:	f8 94       	cli
     f6e:	de bf       	out	0x3e, r29	; 62
     f70:	0f be       	out	0x3f, r0	; 63
     f72:	cd bf       	out	0x3d, r28	; 61
     f74:	cf 91       	pop	r28
     f76:	df 91       	pop	r29
     f78:	08 95       	ret

00000f7a <DIO_enuTogPit>:

ES_t DIO_enuTogPit(u8 Copy_u8PortID, u8 Copy_u8PinID) {
     f7a:	df 93       	push	r29
     f7c:	cf 93       	push	r28
     f7e:	00 d0       	rcall	.+0      	; 0xf80 <DIO_enuTogPit+0x6>
     f80:	00 d0       	rcall	.+0      	; 0xf82 <DIO_enuTogPit+0x8>
     f82:	0f 92       	push	r0
     f84:	cd b7       	in	r28, 0x3d	; 61
     f86:	de b7       	in	r29, 0x3e	; 62
     f88:	8a 83       	std	Y+2, r24	; 0x02
     f8a:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOTOK;
     f8c:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7) {
     f8e:	8a 81       	ldd	r24, Y+2	; 0x02
     f90:	84 30       	cpi	r24, 0x04	; 4
     f92:	08 f0       	brcs	.+2      	; 0xf96 <DIO_enuTogPit+0x1c>
     f94:	77 c0       	rjmp	.+238    	; 0x1084 <DIO_enuTogPit+0x10a>
     f96:	8b 81       	ldd	r24, Y+3	; 0x03
     f98:	88 30       	cpi	r24, 0x08	; 8
     f9a:	08 f0       	brcs	.+2      	; 0xf9e <DIO_enuTogPit+0x24>
     f9c:	73 c0       	rjmp	.+230    	; 0x1084 <DIO_enuTogPit+0x10a>
		Local_enuErrorState = ES_OK;
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	89 83       	std	Y+1, r24	; 0x01

		Local_enuErrorState = ES_OK;
     fa2:	81 e0       	ldi	r24, 0x01	; 1
     fa4:	89 83       	std	Y+1, r24	; 0x01
		switch (Copy_u8PortID) {
     fa6:	8a 81       	ldd	r24, Y+2	; 0x02
     fa8:	28 2f       	mov	r18, r24
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	3d 83       	std	Y+5, r19	; 0x05
     fae:	2c 83       	std	Y+4, r18	; 0x04
     fb0:	8c 81       	ldd	r24, Y+4	; 0x04
     fb2:	9d 81       	ldd	r25, Y+5	; 0x05
     fb4:	81 30       	cpi	r24, 0x01	; 1
     fb6:	91 05       	cpc	r25, r1
     fb8:	49 f1       	breq	.+82     	; 0x100c <DIO_enuTogPit+0x92>
     fba:	2c 81       	ldd	r18, Y+4	; 0x04
     fbc:	3d 81       	ldd	r19, Y+5	; 0x05
     fbe:	22 30       	cpi	r18, 0x02	; 2
     fc0:	31 05       	cpc	r19, r1
     fc2:	2c f4       	brge	.+10     	; 0xfce <DIO_enuTogPit+0x54>
     fc4:	8c 81       	ldd	r24, Y+4	; 0x04
     fc6:	9d 81       	ldd	r25, Y+5	; 0x05
     fc8:	00 97       	sbiw	r24, 0x00	; 0
     fca:	61 f0       	breq	.+24     	; 0xfe4 <DIO_enuTogPit+0x6a>
     fcc:	5d c0       	rjmp	.+186    	; 0x1088 <DIO_enuTogPit+0x10e>
     fce:	2c 81       	ldd	r18, Y+4	; 0x04
     fd0:	3d 81       	ldd	r19, Y+5	; 0x05
     fd2:	22 30       	cpi	r18, 0x02	; 2
     fd4:	31 05       	cpc	r19, r1
     fd6:	71 f1       	breq	.+92     	; 0x1034 <DIO_enuTogPit+0xba>
     fd8:	8c 81       	ldd	r24, Y+4	; 0x04
     fda:	9d 81       	ldd	r25, Y+5	; 0x05
     fdc:	83 30       	cpi	r24, 0x03	; 3
     fde:	91 05       	cpc	r25, r1
     fe0:	e9 f1       	breq	.+122    	; 0x105c <DIO_enuTogPit+0xe2>
     fe2:	52 c0       	rjmp	.+164    	; 0x1088 <DIO_enuTogPit+0x10e>
			case DIO_PORTA:
			PORTA ^= (DIO_MASK_BIT << Copy_u8PinID);
     fe4:	ab e3       	ldi	r26, 0x3B	; 59
     fe6:	b0 e0       	ldi	r27, 0x00	; 0
     fe8:	eb e3       	ldi	r30, 0x3B	; 59
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	48 2f       	mov	r20, r24
     ff0:	8b 81       	ldd	r24, Y+3	; 0x03
     ff2:	28 2f       	mov	r18, r24
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	81 e0       	ldi	r24, 0x01	; 1
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	02 2e       	mov	r0, r18
     ffc:	02 c0       	rjmp	.+4      	; 0x1002 <DIO_enuTogPit+0x88>
     ffe:	88 0f       	add	r24, r24
    1000:	99 1f       	adc	r25, r25
    1002:	0a 94       	dec	r0
    1004:	e2 f7       	brpl	.-8      	; 0xffe <DIO_enuTogPit+0x84>
    1006:	84 27       	eor	r24, r20
    1008:	8c 93       	st	X, r24
    100a:	3e c0       	rjmp	.+124    	; 0x1088 <DIO_enuTogPit+0x10e>
			break;
			case DIO_PORTB:
			PORTB ^= (DIO_MASK_BIT << Copy_u8PinID);
    100c:	a8 e3       	ldi	r26, 0x38	; 56
    100e:	b0 e0       	ldi	r27, 0x00	; 0
    1010:	e8 e3       	ldi	r30, 0x38	; 56
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	80 81       	ld	r24, Z
    1016:	48 2f       	mov	r20, r24
    1018:	8b 81       	ldd	r24, Y+3	; 0x03
    101a:	28 2f       	mov	r18, r24
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	81 e0       	ldi	r24, 0x01	; 1
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	02 2e       	mov	r0, r18
    1024:	02 c0       	rjmp	.+4      	; 0x102a <DIO_enuTogPit+0xb0>
    1026:	88 0f       	add	r24, r24
    1028:	99 1f       	adc	r25, r25
    102a:	0a 94       	dec	r0
    102c:	e2 f7       	brpl	.-8      	; 0x1026 <DIO_enuTogPit+0xac>
    102e:	84 27       	eor	r24, r20
    1030:	8c 93       	st	X, r24
    1032:	2a c0       	rjmp	.+84     	; 0x1088 <DIO_enuTogPit+0x10e>
			break;
			case DIO_PORTC:
			PORTC ^= (DIO_MASK_BIT << Copy_u8PinID);
    1034:	a5 e3       	ldi	r26, 0x35	; 53
    1036:	b0 e0       	ldi	r27, 0x00	; 0
    1038:	e5 e3       	ldi	r30, 0x35	; 53
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	80 81       	ld	r24, Z
    103e:	48 2f       	mov	r20, r24
    1040:	8b 81       	ldd	r24, Y+3	; 0x03
    1042:	28 2f       	mov	r18, r24
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	81 e0       	ldi	r24, 0x01	; 1
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	02 2e       	mov	r0, r18
    104c:	02 c0       	rjmp	.+4      	; 0x1052 <DIO_enuTogPit+0xd8>
    104e:	88 0f       	add	r24, r24
    1050:	99 1f       	adc	r25, r25
    1052:	0a 94       	dec	r0
    1054:	e2 f7       	brpl	.-8      	; 0x104e <DIO_enuTogPit+0xd4>
    1056:	84 27       	eor	r24, r20
    1058:	8c 93       	st	X, r24
    105a:	16 c0       	rjmp	.+44     	; 0x1088 <DIO_enuTogPit+0x10e>
			break;
			case DIO_PORTD:
			PORTD ^= (DIO_MASK_BIT << Copy_u8PinID);
    105c:	a2 e3       	ldi	r26, 0x32	; 50
    105e:	b0 e0       	ldi	r27, 0x00	; 0
    1060:	e2 e3       	ldi	r30, 0x32	; 50
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	80 81       	ld	r24, Z
    1066:	48 2f       	mov	r20, r24
    1068:	8b 81       	ldd	r24, Y+3	; 0x03
    106a:	28 2f       	mov	r18, r24
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	81 e0       	ldi	r24, 0x01	; 1
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	02 2e       	mov	r0, r18
    1074:	02 c0       	rjmp	.+4      	; 0x107a <DIO_enuTogPit+0x100>
    1076:	88 0f       	add	r24, r24
    1078:	99 1f       	adc	r25, r25
    107a:	0a 94       	dec	r0
    107c:	e2 f7       	brpl	.-8      	; 0x1076 <DIO_enuTogPit+0xfc>
    107e:	84 27       	eor	r24, r20
    1080:	8c 93       	st	X, r24
    1082:	02 c0       	rjmp	.+4      	; 0x1088 <DIO_enuTogPit+0x10e>
			break;
		}

		} else {
		Local_enuErrorState = ES_OUT_OF_RANGE;
    1084:	82 e0       	ldi	r24, 0x02	; 2
    1086:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    1088:	89 81       	ldd	r24, Y+1	; 0x01
}
    108a:	0f 90       	pop	r0
    108c:	0f 90       	pop	r0
    108e:	0f 90       	pop	r0
    1090:	0f 90       	pop	r0
    1092:	0f 90       	pop	r0
    1094:	cf 91       	pop	r28
    1096:	df 91       	pop	r29
    1098:	08 95       	ret

0000109a <DIO_enuSetPinDirection>:

ES_t DIO_enuSetPinDirection(u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8Value) {
    109a:	df 93       	push	r29
    109c:	cf 93       	push	r28
    109e:	00 d0       	rcall	.+0      	; 0x10a0 <DIO_enuSetPinDirection+0x6>
    10a0:	00 d0       	rcall	.+0      	; 0x10a2 <DIO_enuSetPinDirection+0x8>
    10a2:	00 d0       	rcall	.+0      	; 0x10a4 <DIO_enuSetPinDirection+0xa>
    10a4:	cd b7       	in	r28, 0x3d	; 61
    10a6:	de b7       	in	r29, 0x3e	; 62
    10a8:	8a 83       	std	Y+2, r24	; 0x02
    10aa:	6b 83       	std	Y+3, r22	; 0x03
    10ac:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOTOK;
    10ae:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7
    10b0:	8a 81       	ldd	r24, Y+2	; 0x02
    10b2:	84 30       	cpi	r24, 0x04	; 4
    10b4:	08 f0       	brcs	.+2      	; 0x10b8 <DIO_enuSetPinDirection+0x1e>
    10b6:	d1 c0       	rjmp	.+418    	; 0x125a <DIO_enuSetPinDirection+0x1c0>
    10b8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ba:	88 30       	cpi	r24, 0x08	; 8
    10bc:	08 f0       	brcs	.+2      	; 0x10c0 <DIO_enuSetPinDirection+0x26>
    10be:	cd c0       	rjmp	.+410    	; 0x125a <DIO_enuSetPinDirection+0x1c0>
    10c0:	8c 81       	ldd	r24, Y+4	; 0x04
    10c2:	82 30       	cpi	r24, 0x02	; 2
    10c4:	08 f0       	brcs	.+2      	; 0x10c8 <DIO_enuSetPinDirection+0x2e>
    10c6:	c9 c0       	rjmp	.+402    	; 0x125a <DIO_enuSetPinDirection+0x1c0>
	&& Copy_u8Value <= OUTPUT) {
		switch (Copy_u8PortID) {
    10c8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ca:	28 2f       	mov	r18, r24
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	3e 83       	std	Y+6, r19	; 0x06
    10d0:	2d 83       	std	Y+5, r18	; 0x05
    10d2:	6d 81       	ldd	r22, Y+5	; 0x05
    10d4:	7e 81       	ldd	r23, Y+6	; 0x06
    10d6:	61 30       	cpi	r22, 0x01	; 1
    10d8:	71 05       	cpc	r23, r1
    10da:	09 f4       	brne	.+2      	; 0x10de <DIO_enuSetPinDirection+0x44>
    10dc:	41 c0       	rjmp	.+130    	; 0x1160 <DIO_enuSetPinDirection+0xc6>
    10de:	8d 81       	ldd	r24, Y+5	; 0x05
    10e0:	9e 81       	ldd	r25, Y+6	; 0x06
    10e2:	82 30       	cpi	r24, 0x02	; 2
    10e4:	91 05       	cpc	r25, r1
    10e6:	34 f4       	brge	.+12     	; 0x10f4 <DIO_enuSetPinDirection+0x5a>
    10e8:	2d 81       	ldd	r18, Y+5	; 0x05
    10ea:	3e 81       	ldd	r19, Y+6	; 0x06
    10ec:	21 15       	cp	r18, r1
    10ee:	31 05       	cpc	r19, r1
    10f0:	71 f0       	breq	.+28     	; 0x110e <DIO_enuSetPinDirection+0x74>
    10f2:	b0 c0       	rjmp	.+352    	; 0x1254 <DIO_enuSetPinDirection+0x1ba>
    10f4:	6d 81       	ldd	r22, Y+5	; 0x05
    10f6:	7e 81       	ldd	r23, Y+6	; 0x06
    10f8:	62 30       	cpi	r22, 0x02	; 2
    10fa:	71 05       	cpc	r23, r1
    10fc:	09 f4       	brne	.+2      	; 0x1100 <DIO_enuSetPinDirection+0x66>
    10fe:	59 c0       	rjmp	.+178    	; 0x11b2 <DIO_enuSetPinDirection+0x118>
    1100:	8d 81       	ldd	r24, Y+5	; 0x05
    1102:	9e 81       	ldd	r25, Y+6	; 0x06
    1104:	83 30       	cpi	r24, 0x03	; 3
    1106:	91 05       	cpc	r25, r1
    1108:	09 f4       	brne	.+2      	; 0x110c <DIO_enuSetPinDirection+0x72>
    110a:	7c c0       	rjmp	.+248    	; 0x1204 <DIO_enuSetPinDirection+0x16a>
    110c:	a3 c0       	rjmp	.+326    	; 0x1254 <DIO_enuSetPinDirection+0x1ba>
			case DIO_PORTA:
			DDRA &= ~(DIO_MASK_BIT << Copy_u8PinID);
    110e:	aa e3       	ldi	r26, 0x3A	; 58
    1110:	b0 e0       	ldi	r27, 0x00	; 0
    1112:	ea e3       	ldi	r30, 0x3A	; 58
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	80 81       	ld	r24, Z
    1118:	48 2f       	mov	r20, r24
    111a:	8b 81       	ldd	r24, Y+3	; 0x03
    111c:	28 2f       	mov	r18, r24
    111e:	30 e0       	ldi	r19, 0x00	; 0
    1120:	81 e0       	ldi	r24, 0x01	; 1
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	02 c0       	rjmp	.+4      	; 0x112a <DIO_enuSetPinDirection+0x90>
    1126:	88 0f       	add	r24, r24
    1128:	99 1f       	adc	r25, r25
    112a:	2a 95       	dec	r18
    112c:	e2 f7       	brpl	.-8      	; 0x1126 <DIO_enuSetPinDirection+0x8c>
    112e:	80 95       	com	r24
    1130:	84 23       	and	r24, r20
    1132:	8c 93       	st	X, r24
			DDRA |= (Copy_u8Value << Copy_u8PinID);
    1134:	aa e3       	ldi	r26, 0x3A	; 58
    1136:	b0 e0       	ldi	r27, 0x00	; 0
    1138:	ea e3       	ldi	r30, 0x3A	; 58
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	80 81       	ld	r24, Z
    113e:	48 2f       	mov	r20, r24
    1140:	8c 81       	ldd	r24, Y+4	; 0x04
    1142:	28 2f       	mov	r18, r24
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	8b 81       	ldd	r24, Y+3	; 0x03
    1148:	88 2f       	mov	r24, r24
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	b9 01       	movw	r22, r18
    114e:	02 c0       	rjmp	.+4      	; 0x1154 <DIO_enuSetPinDirection+0xba>
    1150:	66 0f       	add	r22, r22
    1152:	77 1f       	adc	r23, r23
    1154:	8a 95       	dec	r24
    1156:	e2 f7       	brpl	.-8      	; 0x1150 <DIO_enuSetPinDirection+0xb6>
    1158:	cb 01       	movw	r24, r22
    115a:	84 2b       	or	r24, r20
    115c:	8c 93       	st	X, r24
    115e:	7a c0       	rjmp	.+244    	; 0x1254 <DIO_enuSetPinDirection+0x1ba>
			break;
			case DIO_PORTB:
			DDRB &= ~(DIO_MASK_BIT << Copy_u8PinID);
    1160:	a7 e3       	ldi	r26, 0x37	; 55
    1162:	b0 e0       	ldi	r27, 0x00	; 0
    1164:	e7 e3       	ldi	r30, 0x37	; 55
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	80 81       	ld	r24, Z
    116a:	48 2f       	mov	r20, r24
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	28 2f       	mov	r18, r24
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	02 c0       	rjmp	.+4      	; 0x117c <DIO_enuSetPinDirection+0xe2>
    1178:	88 0f       	add	r24, r24
    117a:	99 1f       	adc	r25, r25
    117c:	2a 95       	dec	r18
    117e:	e2 f7       	brpl	.-8      	; 0x1178 <DIO_enuSetPinDirection+0xde>
    1180:	80 95       	com	r24
    1182:	84 23       	and	r24, r20
    1184:	8c 93       	st	X, r24
			DDRB |= (Copy_u8Value << Copy_u8PinID);
    1186:	a7 e3       	ldi	r26, 0x37	; 55
    1188:	b0 e0       	ldi	r27, 0x00	; 0
    118a:	e7 e3       	ldi	r30, 0x37	; 55
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	80 81       	ld	r24, Z
    1190:	48 2f       	mov	r20, r24
    1192:	8c 81       	ldd	r24, Y+4	; 0x04
    1194:	28 2f       	mov	r18, r24
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	8b 81       	ldd	r24, Y+3	; 0x03
    119a:	88 2f       	mov	r24, r24
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	b9 01       	movw	r22, r18
    11a0:	02 c0       	rjmp	.+4      	; 0x11a6 <DIO_enuSetPinDirection+0x10c>
    11a2:	66 0f       	add	r22, r22
    11a4:	77 1f       	adc	r23, r23
    11a6:	8a 95       	dec	r24
    11a8:	e2 f7       	brpl	.-8      	; 0x11a2 <DIO_enuSetPinDirection+0x108>
    11aa:	cb 01       	movw	r24, r22
    11ac:	84 2b       	or	r24, r20
    11ae:	8c 93       	st	X, r24
    11b0:	51 c0       	rjmp	.+162    	; 0x1254 <DIO_enuSetPinDirection+0x1ba>
			break;
			case DIO_PORTC:
			DDRC &= ~(DIO_MASK_BIT << Copy_u8PinID);
    11b2:	a4 e3       	ldi	r26, 0x34	; 52
    11b4:	b0 e0       	ldi	r27, 0x00	; 0
    11b6:	e4 e3       	ldi	r30, 0x34	; 52
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	80 81       	ld	r24, Z
    11bc:	48 2f       	mov	r20, r24
    11be:	8b 81       	ldd	r24, Y+3	; 0x03
    11c0:	28 2f       	mov	r18, r24
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	02 c0       	rjmp	.+4      	; 0x11ce <DIO_enuSetPinDirection+0x134>
    11ca:	88 0f       	add	r24, r24
    11cc:	99 1f       	adc	r25, r25
    11ce:	2a 95       	dec	r18
    11d0:	e2 f7       	brpl	.-8      	; 0x11ca <DIO_enuSetPinDirection+0x130>
    11d2:	80 95       	com	r24
    11d4:	84 23       	and	r24, r20
    11d6:	8c 93       	st	X, r24
			DDRC |= (Copy_u8Value << Copy_u8PinID);
    11d8:	a4 e3       	ldi	r26, 0x34	; 52
    11da:	b0 e0       	ldi	r27, 0x00	; 0
    11dc:	e4 e3       	ldi	r30, 0x34	; 52
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	80 81       	ld	r24, Z
    11e2:	48 2f       	mov	r20, r24
    11e4:	8c 81       	ldd	r24, Y+4	; 0x04
    11e6:	28 2f       	mov	r18, r24
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	8b 81       	ldd	r24, Y+3	; 0x03
    11ec:	88 2f       	mov	r24, r24
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	b9 01       	movw	r22, r18
    11f2:	02 c0       	rjmp	.+4      	; 0x11f8 <DIO_enuSetPinDirection+0x15e>
    11f4:	66 0f       	add	r22, r22
    11f6:	77 1f       	adc	r23, r23
    11f8:	8a 95       	dec	r24
    11fa:	e2 f7       	brpl	.-8      	; 0x11f4 <DIO_enuSetPinDirection+0x15a>
    11fc:	cb 01       	movw	r24, r22
    11fe:	84 2b       	or	r24, r20
    1200:	8c 93       	st	X, r24
    1202:	28 c0       	rjmp	.+80     	; 0x1254 <DIO_enuSetPinDirection+0x1ba>
			break;
			case DIO_PORTD:
			DDRD &= ~(DIO_MASK_BIT << Copy_u8PinID);
    1204:	a1 e3       	ldi	r26, 0x31	; 49
    1206:	b0 e0       	ldi	r27, 0x00	; 0
    1208:	e1 e3       	ldi	r30, 0x31	; 49
    120a:	f0 e0       	ldi	r31, 0x00	; 0
    120c:	80 81       	ld	r24, Z
    120e:	48 2f       	mov	r20, r24
    1210:	8b 81       	ldd	r24, Y+3	; 0x03
    1212:	28 2f       	mov	r18, r24
    1214:	30 e0       	ldi	r19, 0x00	; 0
    1216:	81 e0       	ldi	r24, 0x01	; 1
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	02 c0       	rjmp	.+4      	; 0x1220 <DIO_enuSetPinDirection+0x186>
    121c:	88 0f       	add	r24, r24
    121e:	99 1f       	adc	r25, r25
    1220:	2a 95       	dec	r18
    1222:	e2 f7       	brpl	.-8      	; 0x121c <DIO_enuSetPinDirection+0x182>
    1224:	80 95       	com	r24
    1226:	84 23       	and	r24, r20
    1228:	8c 93       	st	X, r24
			DDRD |= (Copy_u8Value << Copy_u8PinID);
    122a:	a1 e3       	ldi	r26, 0x31	; 49
    122c:	b0 e0       	ldi	r27, 0x00	; 0
    122e:	e1 e3       	ldi	r30, 0x31	; 49
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	80 81       	ld	r24, Z
    1234:	48 2f       	mov	r20, r24
    1236:	8c 81       	ldd	r24, Y+4	; 0x04
    1238:	28 2f       	mov	r18, r24
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	8b 81       	ldd	r24, Y+3	; 0x03
    123e:	88 2f       	mov	r24, r24
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	b9 01       	movw	r22, r18
    1244:	02 c0       	rjmp	.+4      	; 0x124a <DIO_enuSetPinDirection+0x1b0>
    1246:	66 0f       	add	r22, r22
    1248:	77 1f       	adc	r23, r23
    124a:	8a 95       	dec	r24
    124c:	e2 f7       	brpl	.-8      	; 0x1246 <DIO_enuSetPinDirection+0x1ac>
    124e:	cb 01       	movw	r24, r22
    1250:	84 2b       	or	r24, r20
    1252:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    1254:	81 e0       	ldi	r24, 0x01	; 1
    1256:	89 83       	std	Y+1, r24	; 0x01
    1258:	02 c0       	rjmp	.+4      	; 0x125e <DIO_enuSetPinDirection+0x1c4>

		} else {
		Local_enuErrorState = ES_OUT_OF_RANGE;
    125a:	82 e0       	ldi	r24, 0x02	; 2
    125c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    125e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1260:	26 96       	adiw	r28, 0x06	; 6
    1262:	0f b6       	in	r0, 0x3f	; 63
    1264:	f8 94       	cli
    1266:	de bf       	out	0x3e, r29	; 62
    1268:	0f be       	out	0x3f, r0	; 63
    126a:	cd bf       	out	0x3d, r28	; 61
    126c:	cf 91       	pop	r28
    126e:	df 91       	pop	r29
    1270:	08 95       	ret

00001272 <DIO_enuSetPintValue>:
ES_t DIO_enuSetPintValue(u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8Value) {
    1272:	df 93       	push	r29
    1274:	cf 93       	push	r28
    1276:	00 d0       	rcall	.+0      	; 0x1278 <DIO_enuSetPintValue+0x6>
    1278:	00 d0       	rcall	.+0      	; 0x127a <DIO_enuSetPintValue+0x8>
    127a:	00 d0       	rcall	.+0      	; 0x127c <DIO_enuSetPintValue+0xa>
    127c:	cd b7       	in	r28, 0x3d	; 61
    127e:	de b7       	in	r29, 0x3e	; 62
    1280:	8a 83       	std	Y+2, r24	; 0x02
    1282:	6b 83       	std	Y+3, r22	; 0x03
    1284:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOTOK;
    1286:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7
    1288:	8a 81       	ldd	r24, Y+2	; 0x02
    128a:	84 30       	cpi	r24, 0x04	; 4
    128c:	08 f0       	brcs	.+2      	; 0x1290 <DIO_enuSetPintValue+0x1e>
    128e:	d1 c0       	rjmp	.+418    	; 0x1432 <DIO_enuSetPintValue+0x1c0>
    1290:	8b 81       	ldd	r24, Y+3	; 0x03
    1292:	88 30       	cpi	r24, 0x08	; 8
    1294:	08 f0       	brcs	.+2      	; 0x1298 <DIO_enuSetPintValue+0x26>
    1296:	cd c0       	rjmp	.+410    	; 0x1432 <DIO_enuSetPintValue+0x1c0>
    1298:	8c 81       	ldd	r24, Y+4	; 0x04
    129a:	82 30       	cpi	r24, 0x02	; 2
    129c:	08 f0       	brcs	.+2      	; 0x12a0 <DIO_enuSetPintValue+0x2e>
    129e:	c9 c0       	rjmp	.+402    	; 0x1432 <DIO_enuSetPintValue+0x1c0>
	&& Copy_u8Value <= OUTPUT) {

		switch (Copy_u8PortID) {
    12a0:	8a 81       	ldd	r24, Y+2	; 0x02
    12a2:	28 2f       	mov	r18, r24
    12a4:	30 e0       	ldi	r19, 0x00	; 0
    12a6:	3e 83       	std	Y+6, r19	; 0x06
    12a8:	2d 83       	std	Y+5, r18	; 0x05
    12aa:	6d 81       	ldd	r22, Y+5	; 0x05
    12ac:	7e 81       	ldd	r23, Y+6	; 0x06
    12ae:	61 30       	cpi	r22, 0x01	; 1
    12b0:	71 05       	cpc	r23, r1
    12b2:	09 f4       	brne	.+2      	; 0x12b6 <DIO_enuSetPintValue+0x44>
    12b4:	41 c0       	rjmp	.+130    	; 0x1338 <DIO_enuSetPintValue+0xc6>
    12b6:	8d 81       	ldd	r24, Y+5	; 0x05
    12b8:	9e 81       	ldd	r25, Y+6	; 0x06
    12ba:	82 30       	cpi	r24, 0x02	; 2
    12bc:	91 05       	cpc	r25, r1
    12be:	34 f4       	brge	.+12     	; 0x12cc <DIO_enuSetPintValue+0x5a>
    12c0:	2d 81       	ldd	r18, Y+5	; 0x05
    12c2:	3e 81       	ldd	r19, Y+6	; 0x06
    12c4:	21 15       	cp	r18, r1
    12c6:	31 05       	cpc	r19, r1
    12c8:	71 f0       	breq	.+28     	; 0x12e6 <DIO_enuSetPintValue+0x74>
    12ca:	b0 c0       	rjmp	.+352    	; 0x142c <DIO_enuSetPintValue+0x1ba>
    12cc:	6d 81       	ldd	r22, Y+5	; 0x05
    12ce:	7e 81       	ldd	r23, Y+6	; 0x06
    12d0:	62 30       	cpi	r22, 0x02	; 2
    12d2:	71 05       	cpc	r23, r1
    12d4:	09 f4       	brne	.+2      	; 0x12d8 <DIO_enuSetPintValue+0x66>
    12d6:	59 c0       	rjmp	.+178    	; 0x138a <DIO_enuSetPintValue+0x118>
    12d8:	8d 81       	ldd	r24, Y+5	; 0x05
    12da:	9e 81       	ldd	r25, Y+6	; 0x06
    12dc:	83 30       	cpi	r24, 0x03	; 3
    12de:	91 05       	cpc	r25, r1
    12e0:	09 f4       	brne	.+2      	; 0x12e4 <DIO_enuSetPintValue+0x72>
    12e2:	7c c0       	rjmp	.+248    	; 0x13dc <DIO_enuSetPintValue+0x16a>
    12e4:	a3 c0       	rjmp	.+326    	; 0x142c <DIO_enuSetPintValue+0x1ba>
			case DIO_PORTA:
			PORTA &= ~(DIO_MASK_BIT << Copy_u8PinID);
    12e6:	ab e3       	ldi	r26, 0x3B	; 59
    12e8:	b0 e0       	ldi	r27, 0x00	; 0
    12ea:	eb e3       	ldi	r30, 0x3B	; 59
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	80 81       	ld	r24, Z
    12f0:	48 2f       	mov	r20, r24
    12f2:	8b 81       	ldd	r24, Y+3	; 0x03
    12f4:	28 2f       	mov	r18, r24
    12f6:	30 e0       	ldi	r19, 0x00	; 0
    12f8:	81 e0       	ldi	r24, 0x01	; 1
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	02 c0       	rjmp	.+4      	; 0x1302 <DIO_enuSetPintValue+0x90>
    12fe:	88 0f       	add	r24, r24
    1300:	99 1f       	adc	r25, r25
    1302:	2a 95       	dec	r18
    1304:	e2 f7       	brpl	.-8      	; 0x12fe <DIO_enuSetPintValue+0x8c>
    1306:	80 95       	com	r24
    1308:	84 23       	and	r24, r20
    130a:	8c 93       	st	X, r24
			PORTA |= (Copy_u8Value << Copy_u8PinID);
    130c:	ab e3       	ldi	r26, 0x3B	; 59
    130e:	b0 e0       	ldi	r27, 0x00	; 0
    1310:	eb e3       	ldi	r30, 0x3B	; 59
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	80 81       	ld	r24, Z
    1316:	48 2f       	mov	r20, r24
    1318:	8c 81       	ldd	r24, Y+4	; 0x04
    131a:	28 2f       	mov	r18, r24
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	8b 81       	ldd	r24, Y+3	; 0x03
    1320:	88 2f       	mov	r24, r24
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	b9 01       	movw	r22, r18
    1326:	02 c0       	rjmp	.+4      	; 0x132c <DIO_enuSetPintValue+0xba>
    1328:	66 0f       	add	r22, r22
    132a:	77 1f       	adc	r23, r23
    132c:	8a 95       	dec	r24
    132e:	e2 f7       	brpl	.-8      	; 0x1328 <DIO_enuSetPintValue+0xb6>
    1330:	cb 01       	movw	r24, r22
    1332:	84 2b       	or	r24, r20
    1334:	8c 93       	st	X, r24
    1336:	7a c0       	rjmp	.+244    	; 0x142c <DIO_enuSetPintValue+0x1ba>
			break;
			case DIO_PORTB:
			PORTB &= ~(DIO_MASK_BIT << Copy_u8PinID);
    1338:	a8 e3       	ldi	r26, 0x38	; 56
    133a:	b0 e0       	ldi	r27, 0x00	; 0
    133c:	e8 e3       	ldi	r30, 0x38	; 56
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	80 81       	ld	r24, Z
    1342:	48 2f       	mov	r20, r24
    1344:	8b 81       	ldd	r24, Y+3	; 0x03
    1346:	28 2f       	mov	r18, r24
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	81 e0       	ldi	r24, 0x01	; 1
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	02 c0       	rjmp	.+4      	; 0x1354 <DIO_enuSetPintValue+0xe2>
    1350:	88 0f       	add	r24, r24
    1352:	99 1f       	adc	r25, r25
    1354:	2a 95       	dec	r18
    1356:	e2 f7       	brpl	.-8      	; 0x1350 <DIO_enuSetPintValue+0xde>
    1358:	80 95       	com	r24
    135a:	84 23       	and	r24, r20
    135c:	8c 93       	st	X, r24
			PORTB |= (Copy_u8Value << Copy_u8PinID);
    135e:	a8 e3       	ldi	r26, 0x38	; 56
    1360:	b0 e0       	ldi	r27, 0x00	; 0
    1362:	e8 e3       	ldi	r30, 0x38	; 56
    1364:	f0 e0       	ldi	r31, 0x00	; 0
    1366:	80 81       	ld	r24, Z
    1368:	48 2f       	mov	r20, r24
    136a:	8c 81       	ldd	r24, Y+4	; 0x04
    136c:	28 2f       	mov	r18, r24
    136e:	30 e0       	ldi	r19, 0x00	; 0
    1370:	8b 81       	ldd	r24, Y+3	; 0x03
    1372:	88 2f       	mov	r24, r24
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	b9 01       	movw	r22, r18
    1378:	02 c0       	rjmp	.+4      	; 0x137e <DIO_enuSetPintValue+0x10c>
    137a:	66 0f       	add	r22, r22
    137c:	77 1f       	adc	r23, r23
    137e:	8a 95       	dec	r24
    1380:	e2 f7       	brpl	.-8      	; 0x137a <DIO_enuSetPintValue+0x108>
    1382:	cb 01       	movw	r24, r22
    1384:	84 2b       	or	r24, r20
    1386:	8c 93       	st	X, r24
    1388:	51 c0       	rjmp	.+162    	; 0x142c <DIO_enuSetPintValue+0x1ba>
			break;
			case DIO_PORTC:
			PORTC &= ~(DIO_MASK_BIT << Copy_u8PinID);
    138a:	a5 e3       	ldi	r26, 0x35	; 53
    138c:	b0 e0       	ldi	r27, 0x00	; 0
    138e:	e5 e3       	ldi	r30, 0x35	; 53
    1390:	f0 e0       	ldi	r31, 0x00	; 0
    1392:	80 81       	ld	r24, Z
    1394:	48 2f       	mov	r20, r24
    1396:	8b 81       	ldd	r24, Y+3	; 0x03
    1398:	28 2f       	mov	r18, r24
    139a:	30 e0       	ldi	r19, 0x00	; 0
    139c:	81 e0       	ldi	r24, 0x01	; 1
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	02 c0       	rjmp	.+4      	; 0x13a6 <DIO_enuSetPintValue+0x134>
    13a2:	88 0f       	add	r24, r24
    13a4:	99 1f       	adc	r25, r25
    13a6:	2a 95       	dec	r18
    13a8:	e2 f7       	brpl	.-8      	; 0x13a2 <DIO_enuSetPintValue+0x130>
    13aa:	80 95       	com	r24
    13ac:	84 23       	and	r24, r20
    13ae:	8c 93       	st	X, r24
			PORTC |= (Copy_u8Value << Copy_u8PinID);
    13b0:	a5 e3       	ldi	r26, 0x35	; 53
    13b2:	b0 e0       	ldi	r27, 0x00	; 0
    13b4:	e5 e3       	ldi	r30, 0x35	; 53
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	80 81       	ld	r24, Z
    13ba:	48 2f       	mov	r20, r24
    13bc:	8c 81       	ldd	r24, Y+4	; 0x04
    13be:	28 2f       	mov	r18, r24
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	8b 81       	ldd	r24, Y+3	; 0x03
    13c4:	88 2f       	mov	r24, r24
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	b9 01       	movw	r22, r18
    13ca:	02 c0       	rjmp	.+4      	; 0x13d0 <DIO_enuSetPintValue+0x15e>
    13cc:	66 0f       	add	r22, r22
    13ce:	77 1f       	adc	r23, r23
    13d0:	8a 95       	dec	r24
    13d2:	e2 f7       	brpl	.-8      	; 0x13cc <DIO_enuSetPintValue+0x15a>
    13d4:	cb 01       	movw	r24, r22
    13d6:	84 2b       	or	r24, r20
    13d8:	8c 93       	st	X, r24
    13da:	28 c0       	rjmp	.+80     	; 0x142c <DIO_enuSetPintValue+0x1ba>
			break;
			case DIO_PORTD:
			PORTD &= ~(DIO_MASK_BIT << Copy_u8PinID);
    13dc:	a2 e3       	ldi	r26, 0x32	; 50
    13de:	b0 e0       	ldi	r27, 0x00	; 0
    13e0:	e2 e3       	ldi	r30, 0x32	; 50
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	80 81       	ld	r24, Z
    13e6:	48 2f       	mov	r20, r24
    13e8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ea:	28 2f       	mov	r18, r24
    13ec:	30 e0       	ldi	r19, 0x00	; 0
    13ee:	81 e0       	ldi	r24, 0x01	; 1
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	02 c0       	rjmp	.+4      	; 0x13f8 <DIO_enuSetPintValue+0x186>
    13f4:	88 0f       	add	r24, r24
    13f6:	99 1f       	adc	r25, r25
    13f8:	2a 95       	dec	r18
    13fa:	e2 f7       	brpl	.-8      	; 0x13f4 <DIO_enuSetPintValue+0x182>
    13fc:	80 95       	com	r24
    13fe:	84 23       	and	r24, r20
    1400:	8c 93       	st	X, r24
			PORTD |= (Copy_u8Value << Copy_u8PinID);
    1402:	a2 e3       	ldi	r26, 0x32	; 50
    1404:	b0 e0       	ldi	r27, 0x00	; 0
    1406:	e2 e3       	ldi	r30, 0x32	; 50
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	80 81       	ld	r24, Z
    140c:	48 2f       	mov	r20, r24
    140e:	8c 81       	ldd	r24, Y+4	; 0x04
    1410:	28 2f       	mov	r18, r24
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	8b 81       	ldd	r24, Y+3	; 0x03
    1416:	88 2f       	mov	r24, r24
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	b9 01       	movw	r22, r18
    141c:	02 c0       	rjmp	.+4      	; 0x1422 <DIO_enuSetPintValue+0x1b0>
    141e:	66 0f       	add	r22, r22
    1420:	77 1f       	adc	r23, r23
    1422:	8a 95       	dec	r24
    1424:	e2 f7       	brpl	.-8      	; 0x141e <DIO_enuSetPintValue+0x1ac>
    1426:	cb 01       	movw	r24, r22
    1428:	84 2b       	or	r24, r20
    142a:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    142c:	81 e0       	ldi	r24, 0x01	; 1
    142e:	89 83       	std	Y+1, r24	; 0x01
    1430:	02 c0       	rjmp	.+4      	; 0x1436 <DIO_enuSetPintValue+0x1c4>
		} else {
		Local_enuErrorState = ES_OUT_OF_RANGE;
    1432:	82 e0       	ldi	r24, 0x02	; 2
    1434:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    1436:	89 81       	ldd	r24, Y+1	; 0x01
}
    1438:	26 96       	adiw	r28, 0x06	; 6
    143a:	0f b6       	in	r0, 0x3f	; 63
    143c:	f8 94       	cli
    143e:	de bf       	out	0x3e, r29	; 62
    1440:	0f be       	out	0x3f, r0	; 63
    1442:	cd bf       	out	0x3d, r28	; 61
    1444:	cf 91       	pop	r28
    1446:	df 91       	pop	r29
    1448:	08 95       	ret

0000144a <LCD_enuInit>:

#include <util/delay.h>

static u8 LCD_u8PosCounter = 0;

ES_t LCD_enuInit(void) {
    144a:	0f 93       	push	r16
    144c:	1f 93       	push	r17
    144e:	df 93       	push	r29
    1450:	cf 93       	push	r28
    1452:	cd b7       	in	r28, 0x3d	; 61
    1454:	de b7       	in	r29, 0x3e	; 62
    1456:	c8 54       	subi	r28, 0x48	; 72
    1458:	d0 40       	sbci	r29, 0x00	; 0
    145a:	0f b6       	in	r0, 0x3f	; 63
    145c:	f8 94       	cli
    145e:	de bf       	out	0x3e, r29	; 62
    1460:	0f be       	out	0x3f, r0	; 63
    1462:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState = ES_NOTOK;
    1464:	fe 01       	movw	r30, r28
    1466:	e9 5b       	subi	r30, 0xB9	; 185
    1468:	ff 4f       	sbci	r31, 0xFF	; 255
    146a:	10 82       	st	Z, r1

	Local_enuErrorState = DIO_enuSetPinDirection(RS_PORT, RS_PIN, DIO_u8OUTPUT);
    146c:	80 e0       	ldi	r24, 0x00	; 0
    146e:	60 e0       	ldi	r22, 0x00	; 0
    1470:	41 e0       	ldi	r20, 0x01	; 1
    1472:	0e 94 4d 08 	call	0x109a	; 0x109a <DIO_enuSetPinDirection>
    1476:	fe 01       	movw	r30, r28
    1478:	e9 5b       	subi	r30, 0xB9	; 185
    147a:	ff 4f       	sbci	r31, 0xFF	; 255
    147c:	80 83       	st	Z, r24
	if (Local_enuErrorState != ES_OK)
    147e:	fe 01       	movw	r30, r28
    1480:	e9 5b       	subi	r30, 0xB9	; 185
    1482:	ff 4f       	sbci	r31, 0xFF	; 255
    1484:	80 81       	ld	r24, Z
    1486:	81 30       	cpi	r24, 0x01	; 1
    1488:	41 f0       	breq	.+16     	; 0x149a <LCD_enuInit+0x50>
		return Local_enuErrorState;
    148a:	fe 01       	movw	r30, r28
    148c:	e9 5b       	subi	r30, 0xB9	; 185
    148e:	ff 4f       	sbci	r31, 0xFF	; 255
    1490:	80 81       	ld	r24, Z
    1492:	29 96       	adiw	r28, 0x09	; 9
    1494:	8f af       	std	Y+63, r24	; 0x3f
    1496:	29 97       	sbiw	r28, 0x09	; 9
    1498:	93 c3       	rjmp	.+1830   	; 0x1bc0 <LCD_enuInit+0x776>

	Local_enuErrorState = DIO_enuSetPinDirection(RW_PORT, RW_PIN, DIO_u8OUTPUT);
    149a:	80 e0       	ldi	r24, 0x00	; 0
    149c:	61 e0       	ldi	r22, 0x01	; 1
    149e:	41 e0       	ldi	r20, 0x01	; 1
    14a0:	0e 94 4d 08 	call	0x109a	; 0x109a <DIO_enuSetPinDirection>
    14a4:	fe 01       	movw	r30, r28
    14a6:	e9 5b       	subi	r30, 0xB9	; 185
    14a8:	ff 4f       	sbci	r31, 0xFF	; 255
    14aa:	80 83       	st	Z, r24
	if (Local_enuErrorState != ES_OK)
    14ac:	fe 01       	movw	r30, r28
    14ae:	e9 5b       	subi	r30, 0xB9	; 185
    14b0:	ff 4f       	sbci	r31, 0xFF	; 255
    14b2:	80 81       	ld	r24, Z
    14b4:	81 30       	cpi	r24, 0x01	; 1
    14b6:	41 f0       	breq	.+16     	; 0x14c8 <LCD_enuInit+0x7e>
		return Local_enuErrorState;
    14b8:	fe 01       	movw	r30, r28
    14ba:	e9 5b       	subi	r30, 0xB9	; 185
    14bc:	ff 4f       	sbci	r31, 0xFF	; 255
    14be:	80 81       	ld	r24, Z
    14c0:	29 96       	adiw	r28, 0x09	; 9
    14c2:	8f af       	std	Y+63, r24	; 0x3f
    14c4:	29 97       	sbiw	r28, 0x09	; 9
    14c6:	7c c3       	rjmp	.+1784   	; 0x1bc0 <LCD_enuInit+0x776>

	Local_enuErrorState = DIO_enuSetPinDirection(EN_PORT, EN_PIN, DIO_u8OUTPUT);
    14c8:	80 e0       	ldi	r24, 0x00	; 0
    14ca:	62 e0       	ldi	r22, 0x02	; 2
    14cc:	41 e0       	ldi	r20, 0x01	; 1
    14ce:	0e 94 4d 08 	call	0x109a	; 0x109a <DIO_enuSetPinDirection>
    14d2:	fe 01       	movw	r30, r28
    14d4:	e9 5b       	subi	r30, 0xB9	; 185
    14d6:	ff 4f       	sbci	r31, 0xFF	; 255
    14d8:	80 83       	st	Z, r24
	if (Local_enuErrorState != ES_OK)
    14da:	fe 01       	movw	r30, r28
    14dc:	e9 5b       	subi	r30, 0xB9	; 185
    14de:	ff 4f       	sbci	r31, 0xFF	; 255
    14e0:	80 81       	ld	r24, Z
    14e2:	81 30       	cpi	r24, 0x01	; 1
    14e4:	41 f0       	breq	.+16     	; 0x14f6 <LCD_enuInit+0xac>
		return Local_enuErrorState;
    14e6:	fe 01       	movw	r30, r28
    14e8:	e9 5b       	subi	r30, 0xB9	; 185
    14ea:	ff 4f       	sbci	r31, 0xFF	; 255
    14ec:	80 81       	ld	r24, Z
    14ee:	29 96       	adiw	r28, 0x09	; 9
    14f0:	8f af       	std	Y+63, r24	; 0x3f
    14f2:	29 97       	sbiw	r28, 0x09	; 9
    14f4:	65 c3       	rjmp	.+1738   	; 0x1bc0 <LCD_enuInit+0x776>

	Local_enuErrorState = DIO_enuSetPinDirection(D7_PORT, D7_PIN, DIO_u8OUTPUT);
    14f6:	81 e0       	ldi	r24, 0x01	; 1
    14f8:	67 e0       	ldi	r22, 0x07	; 7
    14fa:	41 e0       	ldi	r20, 0x01	; 1
    14fc:	0e 94 4d 08 	call	0x109a	; 0x109a <DIO_enuSetPinDirection>
    1500:	fe 01       	movw	r30, r28
    1502:	e9 5b       	subi	r30, 0xB9	; 185
    1504:	ff 4f       	sbci	r31, 0xFF	; 255
    1506:	80 83       	st	Z, r24
	if (Local_enuErrorState != ES_OK)
    1508:	fe 01       	movw	r30, r28
    150a:	e9 5b       	subi	r30, 0xB9	; 185
    150c:	ff 4f       	sbci	r31, 0xFF	; 255
    150e:	80 81       	ld	r24, Z
    1510:	81 30       	cpi	r24, 0x01	; 1
    1512:	41 f0       	breq	.+16     	; 0x1524 <LCD_enuInit+0xda>
		return Local_enuErrorState;
    1514:	fe 01       	movw	r30, r28
    1516:	e9 5b       	subi	r30, 0xB9	; 185
    1518:	ff 4f       	sbci	r31, 0xFF	; 255
    151a:	80 81       	ld	r24, Z
    151c:	29 96       	adiw	r28, 0x09	; 9
    151e:	8f af       	std	Y+63, r24	; 0x3f
    1520:	29 97       	sbiw	r28, 0x09	; 9
    1522:	4e c3       	rjmp	.+1692   	; 0x1bc0 <LCD_enuInit+0x776>

	Local_enuErrorState = DIO_enuSetPinDirection(D6_PORT, D6_PIN, DIO_u8OUTPUT);
    1524:	81 e0       	ldi	r24, 0x01	; 1
    1526:	66 e0       	ldi	r22, 0x06	; 6
    1528:	41 e0       	ldi	r20, 0x01	; 1
    152a:	0e 94 4d 08 	call	0x109a	; 0x109a <DIO_enuSetPinDirection>
    152e:	fe 01       	movw	r30, r28
    1530:	e9 5b       	subi	r30, 0xB9	; 185
    1532:	ff 4f       	sbci	r31, 0xFF	; 255
    1534:	80 83       	st	Z, r24
	if (Local_enuErrorState != ES_OK)
    1536:	fe 01       	movw	r30, r28
    1538:	e9 5b       	subi	r30, 0xB9	; 185
    153a:	ff 4f       	sbci	r31, 0xFF	; 255
    153c:	80 81       	ld	r24, Z
    153e:	81 30       	cpi	r24, 0x01	; 1
    1540:	41 f0       	breq	.+16     	; 0x1552 <LCD_enuInit+0x108>
		return Local_enuErrorState;
    1542:	fe 01       	movw	r30, r28
    1544:	e9 5b       	subi	r30, 0xB9	; 185
    1546:	ff 4f       	sbci	r31, 0xFF	; 255
    1548:	80 81       	ld	r24, Z
    154a:	29 96       	adiw	r28, 0x09	; 9
    154c:	8f af       	std	Y+63, r24	; 0x3f
    154e:	29 97       	sbiw	r28, 0x09	; 9
    1550:	37 c3       	rjmp	.+1646   	; 0x1bc0 <LCD_enuInit+0x776>

	Local_enuErrorState = DIO_enuSetPinDirection(D5_PORT, D5_PIN, DIO_u8OUTPUT);
    1552:	81 e0       	ldi	r24, 0x01	; 1
    1554:	65 e0       	ldi	r22, 0x05	; 5
    1556:	41 e0       	ldi	r20, 0x01	; 1
    1558:	0e 94 4d 08 	call	0x109a	; 0x109a <DIO_enuSetPinDirection>
    155c:	fe 01       	movw	r30, r28
    155e:	e9 5b       	subi	r30, 0xB9	; 185
    1560:	ff 4f       	sbci	r31, 0xFF	; 255
    1562:	80 83       	st	Z, r24
	if (Local_enuErrorState != ES_OK)
    1564:	fe 01       	movw	r30, r28
    1566:	e9 5b       	subi	r30, 0xB9	; 185
    1568:	ff 4f       	sbci	r31, 0xFF	; 255
    156a:	80 81       	ld	r24, Z
    156c:	81 30       	cpi	r24, 0x01	; 1
    156e:	41 f0       	breq	.+16     	; 0x1580 <LCD_enuInit+0x136>
		return Local_enuErrorState;
    1570:	fe 01       	movw	r30, r28
    1572:	e9 5b       	subi	r30, 0xB9	; 185
    1574:	ff 4f       	sbci	r31, 0xFF	; 255
    1576:	80 81       	ld	r24, Z
    1578:	29 96       	adiw	r28, 0x09	; 9
    157a:	8f af       	std	Y+63, r24	; 0x3f
    157c:	29 97       	sbiw	r28, 0x09	; 9
    157e:	20 c3       	rjmp	.+1600   	; 0x1bc0 <LCD_enuInit+0x776>
	Local_enuErrorState = DIO_enuSetPinDirection(D4_PORT, D4_PIN, DIO_u8OUTPUT);
    1580:	81 e0       	ldi	r24, 0x01	; 1
    1582:	64 e0       	ldi	r22, 0x04	; 4
    1584:	41 e0       	ldi	r20, 0x01	; 1
    1586:	0e 94 4d 08 	call	0x109a	; 0x109a <DIO_enuSetPinDirection>
    158a:	fe 01       	movw	r30, r28
    158c:	e9 5b       	subi	r30, 0xB9	; 185
    158e:	ff 4f       	sbci	r31, 0xFF	; 255
    1590:	80 83       	st	Z, r24
	if (Local_enuErrorState != ES_OK)
    1592:	fe 01       	movw	r30, r28
    1594:	e9 5b       	subi	r30, 0xB9	; 185
    1596:	ff 4f       	sbci	r31, 0xFF	; 255
    1598:	80 81       	ld	r24, Z
    159a:	81 30       	cpi	r24, 0x01	; 1
    159c:	41 f0       	breq	.+16     	; 0x15ae <LCD_enuInit+0x164>
		return Local_enuErrorState;
    159e:	fe 01       	movw	r30, r28
    15a0:	e9 5b       	subi	r30, 0xB9	; 185
    15a2:	ff 4f       	sbci	r31, 0xFF	; 255
    15a4:	80 81       	ld	r24, Z
    15a6:	29 96       	adiw	r28, 0x09	; 9
    15a8:	8f af       	std	Y+63, r24	; 0x3f
    15aa:	29 97       	sbiw	r28, 0x09	; 9
    15ac:	09 c3       	rjmp	.+1554   	; 0x1bc0 <LCD_enuInit+0x776>
    15ae:	fe 01       	movw	r30, r28
    15b0:	ed 5b       	subi	r30, 0xBD	; 189
    15b2:	ff 4f       	sbci	r31, 0xFF	; 255
    15b4:	80 e0       	ldi	r24, 0x00	; 0
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	ac e0       	ldi	r26, 0x0C	; 12
    15ba:	b2 e4       	ldi	r27, 0x42	; 66
    15bc:	80 83       	st	Z, r24
    15be:	91 83       	std	Z+1, r25	; 0x01
    15c0:	a2 83       	std	Z+2, r26	; 0x02
    15c2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15c4:	8e 01       	movw	r16, r28
    15c6:	01 5c       	subi	r16, 0xC1	; 193
    15c8:	1f 4f       	sbci	r17, 0xFF	; 255
    15ca:	fe 01       	movw	r30, r28
    15cc:	ed 5b       	subi	r30, 0xBD	; 189
    15ce:	ff 4f       	sbci	r31, 0xFF	; 255
    15d0:	60 81       	ld	r22, Z
    15d2:	71 81       	ldd	r23, Z+1	; 0x01
    15d4:	82 81       	ldd	r24, Z+2	; 0x02
    15d6:	93 81       	ldd	r25, Z+3	; 0x03
    15d8:	20 e0       	ldi	r18, 0x00	; 0
    15da:	30 e0       	ldi	r19, 0x00	; 0
    15dc:	4a e7       	ldi	r20, 0x7A	; 122
    15de:	53 e4       	ldi	r21, 0x43	; 67
    15e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15e4:	dc 01       	movw	r26, r24
    15e6:	cb 01       	movw	r24, r22
    15e8:	f8 01       	movw	r30, r16
    15ea:	80 83       	st	Z, r24
    15ec:	91 83       	std	Z+1, r25	; 0x01
    15ee:	a2 83       	std	Z+2, r26	; 0x02
    15f0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    15f2:	fe 01       	movw	r30, r28
    15f4:	ff 96       	adiw	r30, 0x3f	; 63
    15f6:	60 81       	ld	r22, Z
    15f8:	71 81       	ldd	r23, Z+1	; 0x01
    15fa:	82 81       	ldd	r24, Z+2	; 0x02
    15fc:	93 81       	ldd	r25, Z+3	; 0x03
    15fe:	20 e0       	ldi	r18, 0x00	; 0
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	40 e8       	ldi	r20, 0x80	; 128
    1604:	5f e3       	ldi	r21, 0x3F	; 63
    1606:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    160a:	88 23       	and	r24, r24
    160c:	2c f4       	brge	.+10     	; 0x1618 <LCD_enuInit+0x1ce>
		__ticks = 1;
    160e:	81 e0       	ldi	r24, 0x01	; 1
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	9e af       	std	Y+62, r25	; 0x3e
    1614:	8d af       	std	Y+61, r24	; 0x3d
    1616:	46 c0       	rjmp	.+140    	; 0x16a4 <LCD_enuInit+0x25a>
	else if (__tmp > 65535)
    1618:	fe 01       	movw	r30, r28
    161a:	ff 96       	adiw	r30, 0x3f	; 63
    161c:	60 81       	ld	r22, Z
    161e:	71 81       	ldd	r23, Z+1	; 0x01
    1620:	82 81       	ldd	r24, Z+2	; 0x02
    1622:	93 81       	ldd	r25, Z+3	; 0x03
    1624:	20 e0       	ldi	r18, 0x00	; 0
    1626:	3f ef       	ldi	r19, 0xFF	; 255
    1628:	4f e7       	ldi	r20, 0x7F	; 127
    162a:	57 e4       	ldi	r21, 0x47	; 71
    162c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1630:	18 16       	cp	r1, r24
    1632:	64 f5       	brge	.+88     	; 0x168c <LCD_enuInit+0x242>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1634:	fe 01       	movw	r30, r28
    1636:	ed 5b       	subi	r30, 0xBD	; 189
    1638:	ff 4f       	sbci	r31, 0xFF	; 255
    163a:	60 81       	ld	r22, Z
    163c:	71 81       	ldd	r23, Z+1	; 0x01
    163e:	82 81       	ldd	r24, Z+2	; 0x02
    1640:	93 81       	ldd	r25, Z+3	; 0x03
    1642:	20 e0       	ldi	r18, 0x00	; 0
    1644:	30 e0       	ldi	r19, 0x00	; 0
    1646:	40 e2       	ldi	r20, 0x20	; 32
    1648:	51 e4       	ldi	r21, 0x41	; 65
    164a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    164e:	dc 01       	movw	r26, r24
    1650:	cb 01       	movw	r24, r22
    1652:	bc 01       	movw	r22, r24
    1654:	cd 01       	movw	r24, r26
    1656:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    165a:	dc 01       	movw	r26, r24
    165c:	cb 01       	movw	r24, r22
    165e:	9e af       	std	Y+62, r25	; 0x3e
    1660:	8d af       	std	Y+61, r24	; 0x3d
    1662:	0f c0       	rjmp	.+30     	; 0x1682 <LCD_enuInit+0x238>
    1664:	89 e1       	ldi	r24, 0x19	; 25
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	9c af       	std	Y+60, r25	; 0x3c
    166a:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    166c:	8b ad       	ldd	r24, Y+59	; 0x3b
    166e:	9c ad       	ldd	r25, Y+60	; 0x3c
    1670:	01 97       	sbiw	r24, 0x01	; 1
    1672:	f1 f7       	brne	.-4      	; 0x1670 <LCD_enuInit+0x226>
    1674:	9c af       	std	Y+60, r25	; 0x3c
    1676:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1678:	8d ad       	ldd	r24, Y+61	; 0x3d
    167a:	9e ad       	ldd	r25, Y+62	; 0x3e
    167c:	01 97       	sbiw	r24, 0x01	; 1
    167e:	9e af       	std	Y+62, r25	; 0x3e
    1680:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1682:	8d ad       	ldd	r24, Y+61	; 0x3d
    1684:	9e ad       	ldd	r25, Y+62	; 0x3e
    1686:	00 97       	sbiw	r24, 0x00	; 0
    1688:	69 f7       	brne	.-38     	; 0x1664 <LCD_enuInit+0x21a>
    168a:	16 c0       	rjmp	.+44     	; 0x16b8 <LCD_enuInit+0x26e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    168c:	fe 01       	movw	r30, r28
    168e:	ff 96       	adiw	r30, 0x3f	; 63
    1690:	60 81       	ld	r22, Z
    1692:	71 81       	ldd	r23, Z+1	; 0x01
    1694:	82 81       	ldd	r24, Z+2	; 0x02
    1696:	93 81       	ldd	r25, Z+3	; 0x03
    1698:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    169c:	dc 01       	movw	r26, r24
    169e:	cb 01       	movw	r24, r22
    16a0:	9e af       	std	Y+62, r25	; 0x3e
    16a2:	8d af       	std	Y+61, r24	; 0x3d
    16a4:	8d ad       	ldd	r24, Y+61	; 0x3d
    16a6:	9e ad       	ldd	r25, Y+62	; 0x3e
    16a8:	9a af       	std	Y+58, r25	; 0x3a
    16aa:	89 af       	std	Y+57, r24	; 0x39
    16ac:	89 ad       	ldd	r24, Y+57	; 0x39
    16ae:	9a ad       	ldd	r25, Y+58	; 0x3a
    16b0:	01 97       	sbiw	r24, 0x01	; 1
    16b2:	f1 f7       	brne	.-4      	; 0x16b0 <LCD_enuInit+0x266>
    16b4:	9a af       	std	Y+58, r25	; 0x3a
    16b6:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(35);

#if LCD_MODE == EIGHT_BIT
	Local_enuErrorState = DIO_enuSetPinDirection(D3_PORT, D3_PIN, DIO_u8OUTPUT);
    16b8:	81 e0       	ldi	r24, 0x01	; 1
    16ba:	63 e0       	ldi	r22, 0x03	; 3
    16bc:	41 e0       	ldi	r20, 0x01	; 1
    16be:	0e 94 4d 08 	call	0x109a	; 0x109a <DIO_enuSetPinDirection>
    16c2:	fe 01       	movw	r30, r28
    16c4:	e9 5b       	subi	r30, 0xB9	; 185
    16c6:	ff 4f       	sbci	r31, 0xFF	; 255
    16c8:	80 83       	st	Z, r24
	if (Local_enuErrorState != ES_OK)
    16ca:	fe 01       	movw	r30, r28
    16cc:	e9 5b       	subi	r30, 0xB9	; 185
    16ce:	ff 4f       	sbci	r31, 0xFF	; 255
    16d0:	80 81       	ld	r24, Z
    16d2:	81 30       	cpi	r24, 0x01	; 1
    16d4:	41 f0       	breq	.+16     	; 0x16e6 <LCD_enuInit+0x29c>
		return Local_enuErrorState;
    16d6:	fe 01       	movw	r30, r28
    16d8:	e9 5b       	subi	r30, 0xB9	; 185
    16da:	ff 4f       	sbci	r31, 0xFF	; 255
    16dc:	80 81       	ld	r24, Z
    16de:	29 96       	adiw	r28, 0x09	; 9
    16e0:	8f af       	std	Y+63, r24	; 0x3f
    16e2:	29 97       	sbiw	r28, 0x09	; 9
    16e4:	6d c2       	rjmp	.+1242   	; 0x1bc0 <LCD_enuInit+0x776>

	Local_enuErrorState = DIO_enuSetPinDirection(D2_PORT, D2_PIN, DIO_u8OUTPUT);
    16e6:	81 e0       	ldi	r24, 0x01	; 1
    16e8:	62 e0       	ldi	r22, 0x02	; 2
    16ea:	41 e0       	ldi	r20, 0x01	; 1
    16ec:	0e 94 4d 08 	call	0x109a	; 0x109a <DIO_enuSetPinDirection>
    16f0:	fe 01       	movw	r30, r28
    16f2:	e9 5b       	subi	r30, 0xB9	; 185
    16f4:	ff 4f       	sbci	r31, 0xFF	; 255
    16f6:	80 83       	st	Z, r24
	if (Local_enuErrorState != ES_OK)
    16f8:	fe 01       	movw	r30, r28
    16fa:	e9 5b       	subi	r30, 0xB9	; 185
    16fc:	ff 4f       	sbci	r31, 0xFF	; 255
    16fe:	80 81       	ld	r24, Z
    1700:	81 30       	cpi	r24, 0x01	; 1
    1702:	41 f0       	breq	.+16     	; 0x1714 <LCD_enuInit+0x2ca>
		return Local_enuErrorState;
    1704:	fe 01       	movw	r30, r28
    1706:	e9 5b       	subi	r30, 0xB9	; 185
    1708:	ff 4f       	sbci	r31, 0xFF	; 255
    170a:	80 81       	ld	r24, Z
    170c:	29 96       	adiw	r28, 0x09	; 9
    170e:	8f af       	std	Y+63, r24	; 0x3f
    1710:	29 97       	sbiw	r28, 0x09	; 9
    1712:	56 c2       	rjmp	.+1196   	; 0x1bc0 <LCD_enuInit+0x776>

	Local_enuErrorState = DIO_enuSetPinDirection(D1_PORT, D1_PIN, DIO_u8OUTPUT);
    1714:	81 e0       	ldi	r24, 0x01	; 1
    1716:	61 e0       	ldi	r22, 0x01	; 1
    1718:	41 e0       	ldi	r20, 0x01	; 1
    171a:	0e 94 4d 08 	call	0x109a	; 0x109a <DIO_enuSetPinDirection>
    171e:	fe 01       	movw	r30, r28
    1720:	e9 5b       	subi	r30, 0xB9	; 185
    1722:	ff 4f       	sbci	r31, 0xFF	; 255
    1724:	80 83       	st	Z, r24
	if (Local_enuErrorState != ES_OK)
    1726:	fe 01       	movw	r30, r28
    1728:	e9 5b       	subi	r30, 0xB9	; 185
    172a:	ff 4f       	sbci	r31, 0xFF	; 255
    172c:	80 81       	ld	r24, Z
    172e:	81 30       	cpi	r24, 0x01	; 1
    1730:	41 f0       	breq	.+16     	; 0x1742 <LCD_enuInit+0x2f8>
		return Local_enuErrorState;
    1732:	fe 01       	movw	r30, r28
    1734:	e9 5b       	subi	r30, 0xB9	; 185
    1736:	ff 4f       	sbci	r31, 0xFF	; 255
    1738:	80 81       	ld	r24, Z
    173a:	29 96       	adiw	r28, 0x09	; 9
    173c:	8f af       	std	Y+63, r24	; 0x3f
    173e:	29 97       	sbiw	r28, 0x09	; 9
    1740:	3f c2       	rjmp	.+1150   	; 0x1bc0 <LCD_enuInit+0x776>

	Local_enuErrorState = DIO_enuSetPinDirection(D0_PORT, D0_PIN, DIO_u8OUTPUT);
    1742:	81 e0       	ldi	r24, 0x01	; 1
    1744:	60 e0       	ldi	r22, 0x00	; 0
    1746:	41 e0       	ldi	r20, 0x01	; 1
    1748:	0e 94 4d 08 	call	0x109a	; 0x109a <DIO_enuSetPinDirection>
    174c:	fe 01       	movw	r30, r28
    174e:	e9 5b       	subi	r30, 0xB9	; 185
    1750:	ff 4f       	sbci	r31, 0xFF	; 255
    1752:	80 83       	st	Z, r24
	if (Local_enuErrorState != ES_OK)
    1754:	fe 01       	movw	r30, r28
    1756:	e9 5b       	subi	r30, 0xB9	; 185
    1758:	ff 4f       	sbci	r31, 0xFF	; 255
    175a:	80 81       	ld	r24, Z
    175c:	81 30       	cpi	r24, 0x01	; 1
    175e:	41 f0       	breq	.+16     	; 0x1770 <LCD_enuInit+0x326>
		return Local_enuErrorState;
    1760:	fe 01       	movw	r30, r28
    1762:	e9 5b       	subi	r30, 0xB9	; 185
    1764:	ff 4f       	sbci	r31, 0xFF	; 255
    1766:	80 81       	ld	r24, Z
    1768:	29 96       	adiw	r28, 0x09	; 9
    176a:	8f af       	std	Y+63, r24	; 0x3f
    176c:	29 97       	sbiw	r28, 0x09	; 9
    176e:	28 c2       	rjmp	.+1104   	; 0x1bc0 <LCD_enuInit+0x776>

	Local_enuErrorState = LCD_inlenuSendCommand(0x38);
    1770:	88 e3       	ldi	r24, 0x38	; 56
    1772:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <LCD_inlenuSendCommand>
    1776:	fe 01       	movw	r30, r28
    1778:	e9 5b       	subi	r30, 0xB9	; 185
    177a:	ff 4f       	sbci	r31, 0xFF	; 255
    177c:	80 83       	st	Z, r24
	if (Local_enuErrorState != ES_OK)
    177e:	fe 01       	movw	r30, r28
    1780:	e9 5b       	subi	r30, 0xB9	; 185
    1782:	ff 4f       	sbci	r31, 0xFF	; 255
    1784:	80 81       	ld	r24, Z
    1786:	81 30       	cpi	r24, 0x01	; 1
    1788:	41 f0       	breq	.+16     	; 0x179a <LCD_enuInit+0x350>
		return Local_enuErrorState;
    178a:	fe 01       	movw	r30, r28
    178c:	e9 5b       	subi	r30, 0xB9	; 185
    178e:	ff 4f       	sbci	r31, 0xFF	; 255
    1790:	80 81       	ld	r24, Z
    1792:	29 96       	adiw	r28, 0x09	; 9
    1794:	8f af       	std	Y+63, r24	; 0x3f
    1796:	29 97       	sbiw	r28, 0x09	; 9
    1798:	13 c2       	rjmp	.+1062   	; 0x1bc0 <LCD_enuInit+0x776>
    179a:	80 e0       	ldi	r24, 0x00	; 0
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	a0 e8       	ldi	r26, 0x80	; 128
    17a0:	bf e3       	ldi	r27, 0x3F	; 63
    17a2:	8d ab       	std	Y+53, r24	; 0x35
    17a4:	9e ab       	std	Y+54, r25	; 0x36
    17a6:	af ab       	std	Y+55, r26	; 0x37
    17a8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17aa:	6d a9       	ldd	r22, Y+53	; 0x35
    17ac:	7e a9       	ldd	r23, Y+54	; 0x36
    17ae:	8f a9       	ldd	r24, Y+55	; 0x37
    17b0:	98 ad       	ldd	r25, Y+56	; 0x38
    17b2:	20 e0       	ldi	r18, 0x00	; 0
    17b4:	30 e0       	ldi	r19, 0x00	; 0
    17b6:	4a e7       	ldi	r20, 0x7A	; 122
    17b8:	53 e4       	ldi	r21, 0x43	; 67
    17ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17be:	dc 01       	movw	r26, r24
    17c0:	cb 01       	movw	r24, r22
    17c2:	89 ab       	std	Y+49, r24	; 0x31
    17c4:	9a ab       	std	Y+50, r25	; 0x32
    17c6:	ab ab       	std	Y+51, r26	; 0x33
    17c8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    17ca:	69 a9       	ldd	r22, Y+49	; 0x31
    17cc:	7a a9       	ldd	r23, Y+50	; 0x32
    17ce:	8b a9       	ldd	r24, Y+51	; 0x33
    17d0:	9c a9       	ldd	r25, Y+52	; 0x34
    17d2:	20 e0       	ldi	r18, 0x00	; 0
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	40 e8       	ldi	r20, 0x80	; 128
    17d8:	5f e3       	ldi	r21, 0x3F	; 63
    17da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17de:	88 23       	and	r24, r24
    17e0:	2c f4       	brge	.+10     	; 0x17ec <LCD_enuInit+0x3a2>
		__ticks = 1;
    17e2:	81 e0       	ldi	r24, 0x01	; 1
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	98 ab       	std	Y+48, r25	; 0x30
    17e8:	8f a7       	std	Y+47, r24	; 0x2f
    17ea:	3f c0       	rjmp	.+126    	; 0x186a <LCD_enuInit+0x420>
	else if (__tmp > 65535)
    17ec:	69 a9       	ldd	r22, Y+49	; 0x31
    17ee:	7a a9       	ldd	r23, Y+50	; 0x32
    17f0:	8b a9       	ldd	r24, Y+51	; 0x33
    17f2:	9c a9       	ldd	r25, Y+52	; 0x34
    17f4:	20 e0       	ldi	r18, 0x00	; 0
    17f6:	3f ef       	ldi	r19, 0xFF	; 255
    17f8:	4f e7       	ldi	r20, 0x7F	; 127
    17fa:	57 e4       	ldi	r21, 0x47	; 71
    17fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1800:	18 16       	cp	r1, r24
    1802:	4c f5       	brge	.+82     	; 0x1856 <LCD_enuInit+0x40c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1804:	6d a9       	ldd	r22, Y+53	; 0x35
    1806:	7e a9       	ldd	r23, Y+54	; 0x36
    1808:	8f a9       	ldd	r24, Y+55	; 0x37
    180a:	98 ad       	ldd	r25, Y+56	; 0x38
    180c:	20 e0       	ldi	r18, 0x00	; 0
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	40 e2       	ldi	r20, 0x20	; 32
    1812:	51 e4       	ldi	r21, 0x41	; 65
    1814:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1818:	dc 01       	movw	r26, r24
    181a:	cb 01       	movw	r24, r22
    181c:	bc 01       	movw	r22, r24
    181e:	cd 01       	movw	r24, r26
    1820:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1824:	dc 01       	movw	r26, r24
    1826:	cb 01       	movw	r24, r22
    1828:	98 ab       	std	Y+48, r25	; 0x30
    182a:	8f a7       	std	Y+47, r24	; 0x2f
    182c:	0f c0       	rjmp	.+30     	; 0x184c <LCD_enuInit+0x402>
    182e:	89 e1       	ldi	r24, 0x19	; 25
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	9e a7       	std	Y+46, r25	; 0x2e
    1834:	8d a7       	std	Y+45, r24	; 0x2d
    1836:	8d a5       	ldd	r24, Y+45	; 0x2d
    1838:	9e a5       	ldd	r25, Y+46	; 0x2e
    183a:	01 97       	sbiw	r24, 0x01	; 1
    183c:	f1 f7       	brne	.-4      	; 0x183a <LCD_enuInit+0x3f0>
    183e:	9e a7       	std	Y+46, r25	; 0x2e
    1840:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1842:	8f a5       	ldd	r24, Y+47	; 0x2f
    1844:	98 a9       	ldd	r25, Y+48	; 0x30
    1846:	01 97       	sbiw	r24, 0x01	; 1
    1848:	98 ab       	std	Y+48, r25	; 0x30
    184a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    184c:	8f a5       	ldd	r24, Y+47	; 0x2f
    184e:	98 a9       	ldd	r25, Y+48	; 0x30
    1850:	00 97       	sbiw	r24, 0x00	; 0
    1852:	69 f7       	brne	.-38     	; 0x182e <LCD_enuInit+0x3e4>
    1854:	14 c0       	rjmp	.+40     	; 0x187e <LCD_enuInit+0x434>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1856:	69 a9       	ldd	r22, Y+49	; 0x31
    1858:	7a a9       	ldd	r23, Y+50	; 0x32
    185a:	8b a9       	ldd	r24, Y+51	; 0x33
    185c:	9c a9       	ldd	r25, Y+52	; 0x34
    185e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1862:	dc 01       	movw	r26, r24
    1864:	cb 01       	movw	r24, r22
    1866:	98 ab       	std	Y+48, r25	; 0x30
    1868:	8f a7       	std	Y+47, r24	; 0x2f
    186a:	8f a5       	ldd	r24, Y+47	; 0x2f
    186c:	98 a9       	ldd	r25, Y+48	; 0x30
    186e:	9c a7       	std	Y+44, r25	; 0x2c
    1870:	8b a7       	std	Y+43, r24	; 0x2b
    1872:	8b a5       	ldd	r24, Y+43	; 0x2b
    1874:	9c a5       	ldd	r25, Y+44	; 0x2c
    1876:	01 97       	sbiw	r24, 0x01	; 1
    1878:	f1 f7       	brne	.-4      	; 0x1876 <LCD_enuInit+0x42c>
    187a:	9c a7       	std	Y+44, r25	; 0x2c
    187c:	8b a7       	std	Y+43, r24	; 0x2b
#else
#error "wrong configuration of LCD mode!!"
#endif

	/* Display ON/OFF Control */
	Local_enuErrorState = LCD_inlenuSendCommand(0x0F);
    187e:	8f e0       	ldi	r24, 0x0F	; 15
    1880:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <LCD_inlenuSendCommand>
    1884:	fe 01       	movw	r30, r28
    1886:	e9 5b       	subi	r30, 0xB9	; 185
    1888:	ff 4f       	sbci	r31, 0xFF	; 255
    188a:	80 83       	st	Z, r24
	if (Local_enuErrorState != ES_OK)
    188c:	fe 01       	movw	r30, r28
    188e:	e9 5b       	subi	r30, 0xB9	; 185
    1890:	ff 4f       	sbci	r31, 0xFF	; 255
    1892:	80 81       	ld	r24, Z
    1894:	81 30       	cpi	r24, 0x01	; 1
    1896:	41 f0       	breq	.+16     	; 0x18a8 <LCD_enuInit+0x45e>
		return Local_enuErrorState;
    1898:	fe 01       	movw	r30, r28
    189a:	e9 5b       	subi	r30, 0xB9	; 185
    189c:	ff 4f       	sbci	r31, 0xFF	; 255
    189e:	80 81       	ld	r24, Z
    18a0:	29 96       	adiw	r28, 0x09	; 9
    18a2:	8f af       	std	Y+63, r24	; 0x3f
    18a4:	29 97       	sbiw	r28, 0x09	; 9
    18a6:	8c c1       	rjmp	.+792    	; 0x1bc0 <LCD_enuInit+0x776>
    18a8:	80 e0       	ldi	r24, 0x00	; 0
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	a0 e8       	ldi	r26, 0x80	; 128
    18ae:	bf e3       	ldi	r27, 0x3F	; 63
    18b0:	8f a3       	std	Y+39, r24	; 0x27
    18b2:	98 a7       	std	Y+40, r25	; 0x28
    18b4:	a9 a7       	std	Y+41, r26	; 0x29
    18b6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18b8:	6f a1       	ldd	r22, Y+39	; 0x27
    18ba:	78 a5       	ldd	r23, Y+40	; 0x28
    18bc:	89 a5       	ldd	r24, Y+41	; 0x29
    18be:	9a a5       	ldd	r25, Y+42	; 0x2a
    18c0:	20 e0       	ldi	r18, 0x00	; 0
    18c2:	30 e0       	ldi	r19, 0x00	; 0
    18c4:	4a e7       	ldi	r20, 0x7A	; 122
    18c6:	53 e4       	ldi	r21, 0x43	; 67
    18c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18cc:	dc 01       	movw	r26, r24
    18ce:	cb 01       	movw	r24, r22
    18d0:	8b a3       	std	Y+35, r24	; 0x23
    18d2:	9c a3       	std	Y+36, r25	; 0x24
    18d4:	ad a3       	std	Y+37, r26	; 0x25
    18d6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    18d8:	6b a1       	ldd	r22, Y+35	; 0x23
    18da:	7c a1       	ldd	r23, Y+36	; 0x24
    18dc:	8d a1       	ldd	r24, Y+37	; 0x25
    18de:	9e a1       	ldd	r25, Y+38	; 0x26
    18e0:	20 e0       	ldi	r18, 0x00	; 0
    18e2:	30 e0       	ldi	r19, 0x00	; 0
    18e4:	40 e8       	ldi	r20, 0x80	; 128
    18e6:	5f e3       	ldi	r21, 0x3F	; 63
    18e8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18ec:	88 23       	and	r24, r24
    18ee:	2c f4       	brge	.+10     	; 0x18fa <LCD_enuInit+0x4b0>
		__ticks = 1;
    18f0:	81 e0       	ldi	r24, 0x01	; 1
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	9a a3       	std	Y+34, r25	; 0x22
    18f6:	89 a3       	std	Y+33, r24	; 0x21
    18f8:	3f c0       	rjmp	.+126    	; 0x1978 <LCD_enuInit+0x52e>
	else if (__tmp > 65535)
    18fa:	6b a1       	ldd	r22, Y+35	; 0x23
    18fc:	7c a1       	ldd	r23, Y+36	; 0x24
    18fe:	8d a1       	ldd	r24, Y+37	; 0x25
    1900:	9e a1       	ldd	r25, Y+38	; 0x26
    1902:	20 e0       	ldi	r18, 0x00	; 0
    1904:	3f ef       	ldi	r19, 0xFF	; 255
    1906:	4f e7       	ldi	r20, 0x7F	; 127
    1908:	57 e4       	ldi	r21, 0x47	; 71
    190a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    190e:	18 16       	cp	r1, r24
    1910:	4c f5       	brge	.+82     	; 0x1964 <LCD_enuInit+0x51a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1912:	6f a1       	ldd	r22, Y+39	; 0x27
    1914:	78 a5       	ldd	r23, Y+40	; 0x28
    1916:	89 a5       	ldd	r24, Y+41	; 0x29
    1918:	9a a5       	ldd	r25, Y+42	; 0x2a
    191a:	20 e0       	ldi	r18, 0x00	; 0
    191c:	30 e0       	ldi	r19, 0x00	; 0
    191e:	40 e2       	ldi	r20, 0x20	; 32
    1920:	51 e4       	ldi	r21, 0x41	; 65
    1922:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1926:	dc 01       	movw	r26, r24
    1928:	cb 01       	movw	r24, r22
    192a:	bc 01       	movw	r22, r24
    192c:	cd 01       	movw	r24, r26
    192e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1932:	dc 01       	movw	r26, r24
    1934:	cb 01       	movw	r24, r22
    1936:	9a a3       	std	Y+34, r25	; 0x22
    1938:	89 a3       	std	Y+33, r24	; 0x21
    193a:	0f c0       	rjmp	.+30     	; 0x195a <LCD_enuInit+0x510>
    193c:	89 e1       	ldi	r24, 0x19	; 25
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	98 a3       	std	Y+32, r25	; 0x20
    1942:	8f 8f       	std	Y+31, r24	; 0x1f
    1944:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1946:	98 a1       	ldd	r25, Y+32	; 0x20
    1948:	01 97       	sbiw	r24, 0x01	; 1
    194a:	f1 f7       	brne	.-4      	; 0x1948 <LCD_enuInit+0x4fe>
    194c:	98 a3       	std	Y+32, r25	; 0x20
    194e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1950:	89 a1       	ldd	r24, Y+33	; 0x21
    1952:	9a a1       	ldd	r25, Y+34	; 0x22
    1954:	01 97       	sbiw	r24, 0x01	; 1
    1956:	9a a3       	std	Y+34, r25	; 0x22
    1958:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    195a:	89 a1       	ldd	r24, Y+33	; 0x21
    195c:	9a a1       	ldd	r25, Y+34	; 0x22
    195e:	00 97       	sbiw	r24, 0x00	; 0
    1960:	69 f7       	brne	.-38     	; 0x193c <LCD_enuInit+0x4f2>
    1962:	14 c0       	rjmp	.+40     	; 0x198c <LCD_enuInit+0x542>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1964:	6b a1       	ldd	r22, Y+35	; 0x23
    1966:	7c a1       	ldd	r23, Y+36	; 0x24
    1968:	8d a1       	ldd	r24, Y+37	; 0x25
    196a:	9e a1       	ldd	r25, Y+38	; 0x26
    196c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1970:	dc 01       	movw	r26, r24
    1972:	cb 01       	movw	r24, r22
    1974:	9a a3       	std	Y+34, r25	; 0x22
    1976:	89 a3       	std	Y+33, r24	; 0x21
    1978:	89 a1       	ldd	r24, Y+33	; 0x21
    197a:	9a a1       	ldd	r25, Y+34	; 0x22
    197c:	9e 8f       	std	Y+30, r25	; 0x1e
    197e:	8d 8f       	std	Y+29, r24	; 0x1d
    1980:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1982:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1984:	01 97       	sbiw	r24, 0x01	; 1
    1986:	f1 f7       	brne	.-4      	; 0x1984 <LCD_enuInit+0x53a>
    1988:	9e 8f       	std	Y+30, r25	; 0x1e
    198a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	/* Display Clear */
	Local_enuErrorState = LCD_inlenuSendCommand(0x01);
    198c:	81 e0       	ldi	r24, 0x01	; 1
    198e:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <LCD_inlenuSendCommand>
    1992:	fe 01       	movw	r30, r28
    1994:	e9 5b       	subi	r30, 0xB9	; 185
    1996:	ff 4f       	sbci	r31, 0xFF	; 255
    1998:	80 83       	st	Z, r24
	if (Local_enuErrorState != ES_OK)
    199a:	fe 01       	movw	r30, r28
    199c:	e9 5b       	subi	r30, 0xB9	; 185
    199e:	ff 4f       	sbci	r31, 0xFF	; 255
    19a0:	80 81       	ld	r24, Z
    19a2:	81 30       	cpi	r24, 0x01	; 1
    19a4:	41 f0       	breq	.+16     	; 0x19b6 <LCD_enuInit+0x56c>
		return Local_enuErrorState;
    19a6:	fe 01       	movw	r30, r28
    19a8:	e9 5b       	subi	r30, 0xB9	; 185
    19aa:	ff 4f       	sbci	r31, 0xFF	; 255
    19ac:	80 81       	ld	r24, Z
    19ae:	29 96       	adiw	r28, 0x09	; 9
    19b0:	8f af       	std	Y+63, r24	; 0x3f
    19b2:	29 97       	sbiw	r28, 0x09	; 9
    19b4:	05 c1       	rjmp	.+522    	; 0x1bc0 <LCD_enuInit+0x776>
    19b6:	80 e0       	ldi	r24, 0x00	; 0
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	a0 e0       	ldi	r26, 0x00	; 0
    19bc:	b0 e4       	ldi	r27, 0x40	; 64
    19be:	89 8f       	std	Y+25, r24	; 0x19
    19c0:	9a 8f       	std	Y+26, r25	; 0x1a
    19c2:	ab 8f       	std	Y+27, r26	; 0x1b
    19c4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19c6:	69 8d       	ldd	r22, Y+25	; 0x19
    19c8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19ce:	20 e0       	ldi	r18, 0x00	; 0
    19d0:	30 e0       	ldi	r19, 0x00	; 0
    19d2:	4a e7       	ldi	r20, 0x7A	; 122
    19d4:	53 e4       	ldi	r21, 0x43	; 67
    19d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19da:	dc 01       	movw	r26, r24
    19dc:	cb 01       	movw	r24, r22
    19de:	8d 8b       	std	Y+21, r24	; 0x15
    19e0:	9e 8b       	std	Y+22, r25	; 0x16
    19e2:	af 8b       	std	Y+23, r26	; 0x17
    19e4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    19e6:	6d 89       	ldd	r22, Y+21	; 0x15
    19e8:	7e 89       	ldd	r23, Y+22	; 0x16
    19ea:	8f 89       	ldd	r24, Y+23	; 0x17
    19ec:	98 8d       	ldd	r25, Y+24	; 0x18
    19ee:	20 e0       	ldi	r18, 0x00	; 0
    19f0:	30 e0       	ldi	r19, 0x00	; 0
    19f2:	40 e8       	ldi	r20, 0x80	; 128
    19f4:	5f e3       	ldi	r21, 0x3F	; 63
    19f6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19fa:	88 23       	and	r24, r24
    19fc:	2c f4       	brge	.+10     	; 0x1a08 <LCD_enuInit+0x5be>
		__ticks = 1;
    19fe:	81 e0       	ldi	r24, 0x01	; 1
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	9c 8b       	std	Y+20, r25	; 0x14
    1a04:	8b 8b       	std	Y+19, r24	; 0x13
    1a06:	3f c0       	rjmp	.+126    	; 0x1a86 <LCD_enuInit+0x63c>
	else if (__tmp > 65535)
    1a08:	6d 89       	ldd	r22, Y+21	; 0x15
    1a0a:	7e 89       	ldd	r23, Y+22	; 0x16
    1a0c:	8f 89       	ldd	r24, Y+23	; 0x17
    1a0e:	98 8d       	ldd	r25, Y+24	; 0x18
    1a10:	20 e0       	ldi	r18, 0x00	; 0
    1a12:	3f ef       	ldi	r19, 0xFF	; 255
    1a14:	4f e7       	ldi	r20, 0x7F	; 127
    1a16:	57 e4       	ldi	r21, 0x47	; 71
    1a18:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a1c:	18 16       	cp	r1, r24
    1a1e:	4c f5       	brge	.+82     	; 0x1a72 <LCD_enuInit+0x628>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a20:	69 8d       	ldd	r22, Y+25	; 0x19
    1a22:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a24:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a26:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a28:	20 e0       	ldi	r18, 0x00	; 0
    1a2a:	30 e0       	ldi	r19, 0x00	; 0
    1a2c:	40 e2       	ldi	r20, 0x20	; 32
    1a2e:	51 e4       	ldi	r21, 0x41	; 65
    1a30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a34:	dc 01       	movw	r26, r24
    1a36:	cb 01       	movw	r24, r22
    1a38:	bc 01       	movw	r22, r24
    1a3a:	cd 01       	movw	r24, r26
    1a3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a40:	dc 01       	movw	r26, r24
    1a42:	cb 01       	movw	r24, r22
    1a44:	9c 8b       	std	Y+20, r25	; 0x14
    1a46:	8b 8b       	std	Y+19, r24	; 0x13
    1a48:	0f c0       	rjmp	.+30     	; 0x1a68 <LCD_enuInit+0x61e>
    1a4a:	89 e1       	ldi	r24, 0x19	; 25
    1a4c:	90 e0       	ldi	r25, 0x00	; 0
    1a4e:	9a 8b       	std	Y+18, r25	; 0x12
    1a50:	89 8b       	std	Y+17, r24	; 0x11
    1a52:	89 89       	ldd	r24, Y+17	; 0x11
    1a54:	9a 89       	ldd	r25, Y+18	; 0x12
    1a56:	01 97       	sbiw	r24, 0x01	; 1
    1a58:	f1 f7       	brne	.-4      	; 0x1a56 <LCD_enuInit+0x60c>
    1a5a:	9a 8b       	std	Y+18, r25	; 0x12
    1a5c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a5e:	8b 89       	ldd	r24, Y+19	; 0x13
    1a60:	9c 89       	ldd	r25, Y+20	; 0x14
    1a62:	01 97       	sbiw	r24, 0x01	; 1
    1a64:	9c 8b       	std	Y+20, r25	; 0x14
    1a66:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a68:	8b 89       	ldd	r24, Y+19	; 0x13
    1a6a:	9c 89       	ldd	r25, Y+20	; 0x14
    1a6c:	00 97       	sbiw	r24, 0x00	; 0
    1a6e:	69 f7       	brne	.-38     	; 0x1a4a <LCD_enuInit+0x600>
    1a70:	14 c0       	rjmp	.+40     	; 0x1a9a <LCD_enuInit+0x650>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a72:	6d 89       	ldd	r22, Y+21	; 0x15
    1a74:	7e 89       	ldd	r23, Y+22	; 0x16
    1a76:	8f 89       	ldd	r24, Y+23	; 0x17
    1a78:	98 8d       	ldd	r25, Y+24	; 0x18
    1a7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a7e:	dc 01       	movw	r26, r24
    1a80:	cb 01       	movw	r24, r22
    1a82:	9c 8b       	std	Y+20, r25	; 0x14
    1a84:	8b 8b       	std	Y+19, r24	; 0x13
    1a86:	8b 89       	ldd	r24, Y+19	; 0x13
    1a88:	9c 89       	ldd	r25, Y+20	; 0x14
    1a8a:	98 8b       	std	Y+16, r25	; 0x10
    1a8c:	8f 87       	std	Y+15, r24	; 0x0f
    1a8e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a90:	98 89       	ldd	r25, Y+16	; 0x10
    1a92:	01 97       	sbiw	r24, 0x01	; 1
    1a94:	f1 f7       	brne	.-4      	; 0x1a92 <LCD_enuInit+0x648>
    1a96:	98 8b       	std	Y+16, r25	; 0x10
    1a98:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);

	/* Entry Mode Set */
	Local_enuErrorState = LCD_inlenuSendCommand(0x06);
    1a9a:	86 e0       	ldi	r24, 0x06	; 6
    1a9c:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <LCD_inlenuSendCommand>
    1aa0:	fe 01       	movw	r30, r28
    1aa2:	e9 5b       	subi	r30, 0xB9	; 185
    1aa4:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa6:	80 83       	st	Z, r24
	if (Local_enuErrorState != ES_OK)
    1aa8:	fe 01       	movw	r30, r28
    1aaa:	e9 5b       	subi	r30, 0xB9	; 185
    1aac:	ff 4f       	sbci	r31, 0xFF	; 255
    1aae:	80 81       	ld	r24, Z
    1ab0:	81 30       	cpi	r24, 0x01	; 1
    1ab2:	41 f0       	breq	.+16     	; 0x1ac4 <LCD_enuInit+0x67a>
		return Local_enuErrorState;
    1ab4:	fe 01       	movw	r30, r28
    1ab6:	e9 5b       	subi	r30, 0xB9	; 185
    1ab8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aba:	80 81       	ld	r24, Z
    1abc:	29 96       	adiw	r28, 0x09	; 9
    1abe:	8f af       	std	Y+63, r24	; 0x3f
    1ac0:	29 97       	sbiw	r28, 0x09	; 9
    1ac2:	7e c0       	rjmp	.+252    	; 0x1bc0 <LCD_enuInit+0x776>
    1ac4:	80 e0       	ldi	r24, 0x00	; 0
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	a0 e8       	ldi	r26, 0x80	; 128
    1aca:	bf e3       	ldi	r27, 0x3F	; 63
    1acc:	8b 87       	std	Y+11, r24	; 0x0b
    1ace:	9c 87       	std	Y+12, r25	; 0x0c
    1ad0:	ad 87       	std	Y+13, r26	; 0x0d
    1ad2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ad4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ad6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ad8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ada:	9e 85       	ldd	r25, Y+14	; 0x0e
    1adc:	20 e0       	ldi	r18, 0x00	; 0
    1ade:	30 e0       	ldi	r19, 0x00	; 0
    1ae0:	4a e7       	ldi	r20, 0x7A	; 122
    1ae2:	53 e4       	ldi	r21, 0x43	; 67
    1ae4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ae8:	dc 01       	movw	r26, r24
    1aea:	cb 01       	movw	r24, r22
    1aec:	8f 83       	std	Y+7, r24	; 0x07
    1aee:	98 87       	std	Y+8, r25	; 0x08
    1af0:	a9 87       	std	Y+9, r26	; 0x09
    1af2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1af4:	6f 81       	ldd	r22, Y+7	; 0x07
    1af6:	78 85       	ldd	r23, Y+8	; 0x08
    1af8:	89 85       	ldd	r24, Y+9	; 0x09
    1afa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1afc:	20 e0       	ldi	r18, 0x00	; 0
    1afe:	30 e0       	ldi	r19, 0x00	; 0
    1b00:	40 e8       	ldi	r20, 0x80	; 128
    1b02:	5f e3       	ldi	r21, 0x3F	; 63
    1b04:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b08:	88 23       	and	r24, r24
    1b0a:	2c f4       	brge	.+10     	; 0x1b16 <LCD_enuInit+0x6cc>
		__ticks = 1;
    1b0c:	81 e0       	ldi	r24, 0x01	; 1
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	9e 83       	std	Y+6, r25	; 0x06
    1b12:	8d 83       	std	Y+5, r24	; 0x05
    1b14:	3f c0       	rjmp	.+126    	; 0x1b94 <LCD_enuInit+0x74a>
	else if (__tmp > 65535)
    1b16:	6f 81       	ldd	r22, Y+7	; 0x07
    1b18:	78 85       	ldd	r23, Y+8	; 0x08
    1b1a:	89 85       	ldd	r24, Y+9	; 0x09
    1b1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b1e:	20 e0       	ldi	r18, 0x00	; 0
    1b20:	3f ef       	ldi	r19, 0xFF	; 255
    1b22:	4f e7       	ldi	r20, 0x7F	; 127
    1b24:	57 e4       	ldi	r21, 0x47	; 71
    1b26:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b2a:	18 16       	cp	r1, r24
    1b2c:	4c f5       	brge	.+82     	; 0x1b80 <LCD_enuInit+0x736>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b2e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b30:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b32:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b34:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b36:	20 e0       	ldi	r18, 0x00	; 0
    1b38:	30 e0       	ldi	r19, 0x00	; 0
    1b3a:	40 e2       	ldi	r20, 0x20	; 32
    1b3c:	51 e4       	ldi	r21, 0x41	; 65
    1b3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b42:	dc 01       	movw	r26, r24
    1b44:	cb 01       	movw	r24, r22
    1b46:	bc 01       	movw	r22, r24
    1b48:	cd 01       	movw	r24, r26
    1b4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b4e:	dc 01       	movw	r26, r24
    1b50:	cb 01       	movw	r24, r22
    1b52:	9e 83       	std	Y+6, r25	; 0x06
    1b54:	8d 83       	std	Y+5, r24	; 0x05
    1b56:	0f c0       	rjmp	.+30     	; 0x1b76 <LCD_enuInit+0x72c>
    1b58:	89 e1       	ldi	r24, 0x19	; 25
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	9c 83       	std	Y+4, r25	; 0x04
    1b5e:	8b 83       	std	Y+3, r24	; 0x03
    1b60:	8b 81       	ldd	r24, Y+3	; 0x03
    1b62:	9c 81       	ldd	r25, Y+4	; 0x04
    1b64:	01 97       	sbiw	r24, 0x01	; 1
    1b66:	f1 f7       	brne	.-4      	; 0x1b64 <LCD_enuInit+0x71a>
    1b68:	9c 83       	std	Y+4, r25	; 0x04
    1b6a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b6e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b70:	01 97       	sbiw	r24, 0x01	; 1
    1b72:	9e 83       	std	Y+6, r25	; 0x06
    1b74:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b76:	8d 81       	ldd	r24, Y+5	; 0x05
    1b78:	9e 81       	ldd	r25, Y+6	; 0x06
    1b7a:	00 97       	sbiw	r24, 0x00	; 0
    1b7c:	69 f7       	brne	.-38     	; 0x1b58 <LCD_enuInit+0x70e>
    1b7e:	14 c0       	rjmp	.+40     	; 0x1ba8 <LCD_enuInit+0x75e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b80:	6f 81       	ldd	r22, Y+7	; 0x07
    1b82:	78 85       	ldd	r23, Y+8	; 0x08
    1b84:	89 85       	ldd	r24, Y+9	; 0x09
    1b86:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b8c:	dc 01       	movw	r26, r24
    1b8e:	cb 01       	movw	r24, r22
    1b90:	9e 83       	std	Y+6, r25	; 0x06
    1b92:	8d 83       	std	Y+5, r24	; 0x05
    1b94:	8d 81       	ldd	r24, Y+5	; 0x05
    1b96:	9e 81       	ldd	r25, Y+6	; 0x06
    1b98:	9a 83       	std	Y+2, r25	; 0x02
    1b9a:	89 83       	std	Y+1, r24	; 0x01
    1b9c:	89 81       	ldd	r24, Y+1	; 0x01
    1b9e:	9a 81       	ldd	r25, Y+2	; 0x02
    1ba0:	01 97       	sbiw	r24, 0x01	; 1
    1ba2:	f1 f7       	brne	.-4      	; 0x1ba0 <LCD_enuInit+0x756>
    1ba4:	9a 83       	std	Y+2, r25	; 0x02
    1ba6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

	Local_enuErrorState = ES_OK;
    1ba8:	fe 01       	movw	r30, r28
    1baa:	e9 5b       	subi	r30, 0xB9	; 185
    1bac:	ff 4f       	sbci	r31, 0xFF	; 255
    1bae:	81 e0       	ldi	r24, 0x01	; 1
    1bb0:	80 83       	st	Z, r24
	return Local_enuErrorState;
    1bb2:	fe 01       	movw	r30, r28
    1bb4:	e9 5b       	subi	r30, 0xB9	; 185
    1bb6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb8:	80 81       	ld	r24, Z
    1bba:	29 96       	adiw	r28, 0x09	; 9
    1bbc:	8f af       	std	Y+63, r24	; 0x3f
    1bbe:	29 97       	sbiw	r28, 0x09	; 9
    1bc0:	29 96       	adiw	r28, 0x09	; 9
    1bc2:	8f ad       	ldd	r24, Y+63	; 0x3f
    1bc4:	29 97       	sbiw	r28, 0x09	; 9
}
    1bc6:	c8 5b       	subi	r28, 0xB8	; 184
    1bc8:	df 4f       	sbci	r29, 0xFF	; 255
    1bca:	0f b6       	in	r0, 0x3f	; 63
    1bcc:	f8 94       	cli
    1bce:	de bf       	out	0x3e, r29	; 62
    1bd0:	0f be       	out	0x3f, r0	; 63
    1bd2:	cd bf       	out	0x3d, r28	; 61
    1bd4:	cf 91       	pop	r28
    1bd6:	df 91       	pop	r29
    1bd8:	1f 91       	pop	r17
    1bda:	0f 91       	pop	r16
    1bdc:	08 95       	ret

00001bde <LCD_enuDisplayChar>:

ES_t LCD_enuDisplayChar(u8 Copy_u8Data) {
    1bde:	df 93       	push	r29
    1be0:	cf 93       	push	r28
    1be2:	00 d0       	rcall	.+0      	; 0x1be4 <LCD_enuDisplayChar+0x6>
    1be4:	0f 92       	push	r0
    1be6:	cd b7       	in	r28, 0x3d	; 61
    1be8:	de b7       	in	r29, 0x3e	; 62
    1bea:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOTOK;
    1bec:	19 82       	std	Y+1, r1	; 0x01

	LCD_vidCheckPosition();
    1bee:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <LCD_vidCheckPosition>

	Local_enuErrorState = DIO_enuSetPintValue(RS_PORT, RS_PIN, DIO_u8HIGH);
    1bf2:	80 e0       	ldi	r24, 0x00	; 0
    1bf4:	60 e0       	ldi	r22, 0x00	; 0
    1bf6:	41 e0       	ldi	r20, 0x01	; 1
    1bf8:	0e 94 39 09 	call	0x1272	; 0x1272 <DIO_enuSetPintValue>
    1bfc:	89 83       	std	Y+1, r24	; 0x01
	if (Local_enuErrorState != ES_OK)
    1bfe:	89 81       	ldd	r24, Y+1	; 0x01
    1c00:	81 30       	cpi	r24, 0x01	; 1
    1c02:	19 f0       	breq	.+6      	; 0x1c0a <LCD_enuDisplayChar+0x2c>
		return Local_enuErrorState;
    1c04:	89 81       	ldd	r24, Y+1	; 0x01
    1c06:	8b 83       	std	Y+3, r24	; 0x03
    1c08:	0e c0       	rjmp	.+28     	; 0x1c26 <LCD_enuDisplayChar+0x48>

	Local_enuErrorState = LCD_enuLatch(Copy_u8Data);
    1c0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c0c:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <LCD_enuLatch>
    1c10:	89 83       	std	Y+1, r24	; 0x01
	if (Local_enuErrorState != ES_OK)
    1c12:	89 81       	ldd	r24, Y+1	; 0x01
    1c14:	81 30       	cpi	r24, 0x01	; 1
    1c16:	19 f0       	breq	.+6      	; 0x1c1e <LCD_enuDisplayChar+0x40>
		return Local_enuErrorState;
    1c18:	89 81       	ldd	r24, Y+1	; 0x01
    1c1a:	8b 83       	std	Y+3, r24	; 0x03
    1c1c:	04 c0       	rjmp	.+8      	; 0x1c26 <LCD_enuDisplayChar+0x48>

	Local_enuErrorState = ES_OK;
    1c1e:	81 e0       	ldi	r24, 0x01	; 1
    1c20:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorState;
    1c22:	89 81       	ldd	r24, Y+1	; 0x01
    1c24:	8b 83       	std	Y+3, r24	; 0x03
    1c26:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1c28:	0f 90       	pop	r0
    1c2a:	0f 90       	pop	r0
    1c2c:	0f 90       	pop	r0
    1c2e:	cf 91       	pop	r28
    1c30:	df 91       	pop	r29
    1c32:	08 95       	ret

00001c34 <LCD_enuSendCommand>:

ES_t LCD_enuSendCommand(u8 Copy_u8Command) {
    1c34:	df 93       	push	r29
    1c36:	cf 93       	push	r28
    1c38:	00 d0       	rcall	.+0      	; 0x1c3a <LCD_enuSendCommand+0x6>
    1c3a:	0f 92       	push	r0
    1c3c:	cd b7       	in	r28, 0x3d	; 61
    1c3e:	de b7       	in	r29, 0x3e	; 62
    1c40:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOTOK;
    1c42:	19 82       	std	Y+1, r1	; 0x01

	/* RS --> LOW to write Command */
	Local_enuErrorState = DIO_enuSetPintValue(RS_PORT, RS_PIN, DIO_u8LOW);
    1c44:	80 e0       	ldi	r24, 0x00	; 0
    1c46:	60 e0       	ldi	r22, 0x00	; 0
    1c48:	40 e0       	ldi	r20, 0x00	; 0
    1c4a:	0e 94 39 09 	call	0x1272	; 0x1272 <DIO_enuSetPintValue>
    1c4e:	89 83       	std	Y+1, r24	; 0x01
	if (Local_enuErrorState != ES_OK)
    1c50:	89 81       	ldd	r24, Y+1	; 0x01
    1c52:	81 30       	cpi	r24, 0x01	; 1
    1c54:	19 f0       	breq	.+6      	; 0x1c5c <LCD_enuSendCommand+0x28>
		return Local_enuErrorState;
    1c56:	89 81       	ldd	r24, Y+1	; 0x01
    1c58:	8b 83       	std	Y+3, r24	; 0x03
    1c5a:	0e c0       	rjmp	.+28     	; 0x1c78 <LCD_enuSendCommand+0x44>

	/* Call Latch Function */
	Local_enuErrorState = LCD_enuLatch(Copy_u8Command);
    1c5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c5e:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <LCD_enuLatch>
    1c62:	89 83       	std	Y+1, r24	; 0x01
	if (Local_enuErrorState != ES_OK)
    1c64:	89 81       	ldd	r24, Y+1	; 0x01
    1c66:	81 30       	cpi	r24, 0x01	; 1
    1c68:	19 f0       	breq	.+6      	; 0x1c70 <LCD_enuSendCommand+0x3c>
		return Local_enuErrorState;
    1c6a:	89 81       	ldd	r24, Y+1	; 0x01
    1c6c:	8b 83       	std	Y+3, r24	; 0x03
    1c6e:	04 c0       	rjmp	.+8      	; 0x1c78 <LCD_enuSendCommand+0x44>

	Local_enuErrorState = ES_OK;
    1c70:	81 e0       	ldi	r24, 0x01	; 1
    1c72:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorState;
    1c74:	89 81       	ldd	r24, Y+1	; 0x01
    1c76:	8b 83       	std	Y+3, r24	; 0x03
    1c78:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1c7a:	0f 90       	pop	r0
    1c7c:	0f 90       	pop	r0
    1c7e:	0f 90       	pop	r0
    1c80:	cf 91       	pop	r28
    1c82:	df 91       	pop	r29
    1c84:	08 95       	ret

00001c86 <LCD_enuLatch>:

static ES_t LCD_enuLatch(u8 Copy_u8Data) {
    1c86:	df 93       	push	r29
    1c88:	cf 93       	push	r28
    1c8a:	00 d0       	rcall	.+0      	; 0x1c8c <LCD_enuLatch+0x6>
    1c8c:	0f 92       	push	r0
    1c8e:	cd b7       	in	r28, 0x3d	; 61
    1c90:	de b7       	in	r29, 0x3e	; 62
    1c92:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOTOK;
    1c94:	19 82       	std	Y+1, r1	; 0x01

	Local_enuErrorState = DIO_enuSetPintValue(RW_PORT, RW_PIN, DIO_u8LOW);
    1c96:	80 e0       	ldi	r24, 0x00	; 0
    1c98:	61 e0       	ldi	r22, 0x01	; 1
    1c9a:	40 e0       	ldi	r20, 0x00	; 0
    1c9c:	0e 94 39 09 	call	0x1272	; 0x1272 <DIO_enuSetPintValue>
    1ca0:	89 83       	std	Y+1, r24	; 0x01
	if (Local_enuErrorState != ES_OK)
    1ca2:	89 81       	ldd	r24, Y+1	; 0x01
    1ca4:	81 30       	cpi	r24, 0x01	; 1
    1ca6:	19 f0       	breq	.+6      	; 0x1cae <LCD_enuLatch+0x28>
		return Local_enuErrorState;
    1ca8:	89 81       	ldd	r24, Y+1	; 0x01
    1caa:	8b 83       	std	Y+3, r24	; 0x03
    1cac:	9b c0       	rjmp	.+310    	; 0x1de4 <LCD_enuLatch+0x15e>

	Local_enuErrorState = DIO_enuSetPintValue(EN_PORT, EN_PIN, DIO_u8LOW);
    1cae:	80 e0       	ldi	r24, 0x00	; 0
    1cb0:	62 e0       	ldi	r22, 0x02	; 2
    1cb2:	40 e0       	ldi	r20, 0x00	; 0
    1cb4:	0e 94 39 09 	call	0x1272	; 0x1272 <DIO_enuSetPintValue>
    1cb8:	89 83       	std	Y+1, r24	; 0x01
	if (Local_enuErrorState != ES_OK)
    1cba:	89 81       	ldd	r24, Y+1	; 0x01
    1cbc:	81 30       	cpi	r24, 0x01	; 1
    1cbe:	19 f0       	breq	.+6      	; 0x1cc6 <LCD_enuLatch+0x40>
		return Local_enuErrorState;
    1cc0:	89 81       	ldd	r24, Y+1	; 0x01
    1cc2:	8b 83       	std	Y+3, r24	; 0x03
    1cc4:	8f c0       	rjmp	.+286    	; 0x1de4 <LCD_enuLatch+0x15e>

#if LCD_MODE == EIGHT_BIT
	Local_enuErrorState = DIO_enuSetPintValue(D7_PORT, D7_PIN,
    1cc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc8:	98 2f       	mov	r25, r24
    1cca:	99 1f       	adc	r25, r25
    1ccc:	99 27       	eor	r25, r25
    1cce:	99 1f       	adc	r25, r25
    1cd0:	81 e0       	ldi	r24, 0x01	; 1
    1cd2:	67 e0       	ldi	r22, 0x07	; 7
    1cd4:	49 2f       	mov	r20, r25
    1cd6:	0e 94 39 09 	call	0x1272	; 0x1272 <DIO_enuSetPintValue>
    1cda:	89 83       	std	Y+1, r24	; 0x01
			((Copy_u8Data >> 7) & MASK_BIT));
	if (Local_enuErrorState != ES_OK)
    1cdc:	89 81       	ldd	r24, Y+1	; 0x01
    1cde:	81 30       	cpi	r24, 0x01	; 1
    1ce0:	19 f0       	breq	.+6      	; 0x1ce8 <LCD_enuLatch+0x62>
		return Local_enuErrorState;
    1ce2:	89 81       	ldd	r24, Y+1	; 0x01
    1ce4:	8b 83       	std	Y+3, r24	; 0x03
    1ce6:	7e c0       	rjmp	.+252    	; 0x1de4 <LCD_enuLatch+0x15e>

	Local_enuErrorState = DIO_enuSetPintValue(D6_PORT, D6_PIN,
    1ce8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cea:	82 95       	swap	r24
    1cec:	86 95       	lsr	r24
    1cee:	86 95       	lsr	r24
    1cf0:	83 70       	andi	r24, 0x03	; 3
    1cf2:	98 2f       	mov	r25, r24
    1cf4:	91 70       	andi	r25, 0x01	; 1
    1cf6:	81 e0       	ldi	r24, 0x01	; 1
    1cf8:	66 e0       	ldi	r22, 0x06	; 6
    1cfa:	49 2f       	mov	r20, r25
    1cfc:	0e 94 39 09 	call	0x1272	; 0x1272 <DIO_enuSetPintValue>
    1d00:	89 83       	std	Y+1, r24	; 0x01
			((Copy_u8Data >> 6) & MASK_BIT));
	if (Local_enuErrorState != ES_OK)
    1d02:	89 81       	ldd	r24, Y+1	; 0x01
    1d04:	81 30       	cpi	r24, 0x01	; 1
    1d06:	19 f0       	breq	.+6      	; 0x1d0e <LCD_enuLatch+0x88>
		return Local_enuErrorState;
    1d08:	89 81       	ldd	r24, Y+1	; 0x01
    1d0a:	8b 83       	std	Y+3, r24	; 0x03
    1d0c:	6b c0       	rjmp	.+214    	; 0x1de4 <LCD_enuLatch+0x15e>

	Local_enuErrorState = DIO_enuSetPintValue(D5_PORT, D5_PIN,
    1d0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d10:	82 95       	swap	r24
    1d12:	86 95       	lsr	r24
    1d14:	87 70       	andi	r24, 0x07	; 7
    1d16:	98 2f       	mov	r25, r24
    1d18:	91 70       	andi	r25, 0x01	; 1
    1d1a:	81 e0       	ldi	r24, 0x01	; 1
    1d1c:	65 e0       	ldi	r22, 0x05	; 5
    1d1e:	49 2f       	mov	r20, r25
    1d20:	0e 94 39 09 	call	0x1272	; 0x1272 <DIO_enuSetPintValue>
    1d24:	89 83       	std	Y+1, r24	; 0x01
			((Copy_u8Data >> 5) & MASK_BIT));
	if (Local_enuErrorState != ES_OK)
    1d26:	89 81       	ldd	r24, Y+1	; 0x01
    1d28:	81 30       	cpi	r24, 0x01	; 1
    1d2a:	19 f0       	breq	.+6      	; 0x1d32 <LCD_enuLatch+0xac>
		return Local_enuErrorState;
    1d2c:	89 81       	ldd	r24, Y+1	; 0x01
    1d2e:	8b 83       	std	Y+3, r24	; 0x03
    1d30:	59 c0       	rjmp	.+178    	; 0x1de4 <LCD_enuLatch+0x15e>

	Local_enuErrorState = DIO_enuSetPintValue(D4_PORT, D4_PIN,
    1d32:	8a 81       	ldd	r24, Y+2	; 0x02
    1d34:	82 95       	swap	r24
    1d36:	8f 70       	andi	r24, 0x0F	; 15
    1d38:	98 2f       	mov	r25, r24
    1d3a:	91 70       	andi	r25, 0x01	; 1
    1d3c:	81 e0       	ldi	r24, 0x01	; 1
    1d3e:	64 e0       	ldi	r22, 0x04	; 4
    1d40:	49 2f       	mov	r20, r25
    1d42:	0e 94 39 09 	call	0x1272	; 0x1272 <DIO_enuSetPintValue>
    1d46:	89 83       	std	Y+1, r24	; 0x01
			((Copy_u8Data >> 4) & MASK_BIT));
	if (Local_enuErrorState != ES_OK)
    1d48:	89 81       	ldd	r24, Y+1	; 0x01
    1d4a:	81 30       	cpi	r24, 0x01	; 1
    1d4c:	19 f0       	breq	.+6      	; 0x1d54 <LCD_enuLatch+0xce>
		return Local_enuErrorState;
    1d4e:	89 81       	ldd	r24, Y+1	; 0x01
    1d50:	8b 83       	std	Y+3, r24	; 0x03
    1d52:	48 c0       	rjmp	.+144    	; 0x1de4 <LCD_enuLatch+0x15e>

	Local_enuErrorState = DIO_enuSetPintValue(D3_PORT, D3_PIN,
    1d54:	8a 81       	ldd	r24, Y+2	; 0x02
    1d56:	86 95       	lsr	r24
    1d58:	86 95       	lsr	r24
    1d5a:	86 95       	lsr	r24
    1d5c:	98 2f       	mov	r25, r24
    1d5e:	91 70       	andi	r25, 0x01	; 1
    1d60:	81 e0       	ldi	r24, 0x01	; 1
    1d62:	63 e0       	ldi	r22, 0x03	; 3
    1d64:	49 2f       	mov	r20, r25
    1d66:	0e 94 39 09 	call	0x1272	; 0x1272 <DIO_enuSetPintValue>
    1d6a:	89 83       	std	Y+1, r24	; 0x01
			((Copy_u8Data >> 3) & MASK_BIT));
	if (Local_enuErrorState != ES_OK)
    1d6c:	89 81       	ldd	r24, Y+1	; 0x01
    1d6e:	81 30       	cpi	r24, 0x01	; 1
    1d70:	19 f0       	breq	.+6      	; 0x1d78 <LCD_enuLatch+0xf2>
		return Local_enuErrorState;
    1d72:	89 81       	ldd	r24, Y+1	; 0x01
    1d74:	8b 83       	std	Y+3, r24	; 0x03
    1d76:	36 c0       	rjmp	.+108    	; 0x1de4 <LCD_enuLatch+0x15e>

	Local_enuErrorState = DIO_enuSetPintValue(D2_PORT, D2_PIN,
    1d78:	8a 81       	ldd	r24, Y+2	; 0x02
    1d7a:	86 95       	lsr	r24
    1d7c:	86 95       	lsr	r24
    1d7e:	98 2f       	mov	r25, r24
    1d80:	91 70       	andi	r25, 0x01	; 1
    1d82:	81 e0       	ldi	r24, 0x01	; 1
    1d84:	62 e0       	ldi	r22, 0x02	; 2
    1d86:	49 2f       	mov	r20, r25
    1d88:	0e 94 39 09 	call	0x1272	; 0x1272 <DIO_enuSetPintValue>
    1d8c:	89 83       	std	Y+1, r24	; 0x01
			((Copy_u8Data >> 2) & MASK_BIT));
	if (Local_enuErrorState != ES_OK)
    1d8e:	89 81       	ldd	r24, Y+1	; 0x01
    1d90:	81 30       	cpi	r24, 0x01	; 1
    1d92:	19 f0       	breq	.+6      	; 0x1d9a <LCD_enuLatch+0x114>
		return Local_enuErrorState;
    1d94:	89 81       	ldd	r24, Y+1	; 0x01
    1d96:	8b 83       	std	Y+3, r24	; 0x03
    1d98:	25 c0       	rjmp	.+74     	; 0x1de4 <LCD_enuLatch+0x15e>

	Local_enuErrorState = DIO_enuSetPintValue(D1_PORT, D1_PIN,
    1d9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d9c:	86 95       	lsr	r24
    1d9e:	98 2f       	mov	r25, r24
    1da0:	91 70       	andi	r25, 0x01	; 1
    1da2:	81 e0       	ldi	r24, 0x01	; 1
    1da4:	61 e0       	ldi	r22, 0x01	; 1
    1da6:	49 2f       	mov	r20, r25
    1da8:	0e 94 39 09 	call	0x1272	; 0x1272 <DIO_enuSetPintValue>
    1dac:	89 83       	std	Y+1, r24	; 0x01
			((Copy_u8Data >> 1) & MASK_BIT));
	if (Local_enuErrorState != ES_OK)
    1dae:	89 81       	ldd	r24, Y+1	; 0x01
    1db0:	81 30       	cpi	r24, 0x01	; 1
    1db2:	19 f0       	breq	.+6      	; 0x1dba <LCD_enuLatch+0x134>
		return Local_enuErrorState;
    1db4:	89 81       	ldd	r24, Y+1	; 0x01
    1db6:	8b 83       	std	Y+3, r24	; 0x03
    1db8:	15 c0       	rjmp	.+42     	; 0x1de4 <LCD_enuLatch+0x15e>

	Local_enuErrorState = DIO_enuSetPintValue(D0_PORT, D0_PIN,
    1dba:	8a 81       	ldd	r24, Y+2	; 0x02
    1dbc:	98 2f       	mov	r25, r24
    1dbe:	91 70       	andi	r25, 0x01	; 1
    1dc0:	81 e0       	ldi	r24, 0x01	; 1
    1dc2:	60 e0       	ldi	r22, 0x00	; 0
    1dc4:	49 2f       	mov	r20, r25
    1dc6:	0e 94 39 09 	call	0x1272	; 0x1272 <DIO_enuSetPintValue>
    1dca:	89 83       	std	Y+1, r24	; 0x01
			((Copy_u8Data >> 0) & MASK_BIT));
	if (Local_enuErrorState != ES_OK)
    1dcc:	89 81       	ldd	r24, Y+1	; 0x01
    1dce:	81 30       	cpi	r24, 0x01	; 1
    1dd0:	19 f0       	breq	.+6      	; 0x1dd8 <LCD_enuLatch+0x152>
		return Local_enuErrorState;
    1dd2:	89 81       	ldd	r24, Y+1	; 0x01
    1dd4:	8b 83       	std	Y+3, r24	; 0x03
    1dd6:	06 c0       	rjmp	.+12     	; 0x1de4 <LCD_enuLatch+0x15e>

#else
#error "wrong configuration of LCD mode!!"
#endif

	LCD_vidTrigger_LATCH();
    1dd8:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <LCD_vidTrigger_LATCH>

	Local_enuErrorState = ES_OK;
    1ddc:	81 e0       	ldi	r24, 0x01	; 1
    1dde:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorState;
    1de0:	89 81       	ldd	r24, Y+1	; 0x01
    1de2:	8b 83       	std	Y+3, r24	; 0x03
    1de4:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1de6:	0f 90       	pop	r0
    1de8:	0f 90       	pop	r0
    1dea:	0f 90       	pop	r0
    1dec:	cf 91       	pop	r28
    1dee:	df 91       	pop	r29
    1df0:	08 95       	ret

00001df2 <LCD_vidTrigger_LATCH>:

static void LCD_vidTrigger_LATCH(void) {
    1df2:	df 93       	push	r29
    1df4:	cf 93       	push	r28
    1df6:	cd b7       	in	r28, 0x3d	; 61
    1df8:	de b7       	in	r29, 0x3e	; 62
    1dfa:	2e 97       	sbiw	r28, 0x0e	; 14
    1dfc:	0f b6       	in	r0, 0x3f	; 63
    1dfe:	f8 94       	cli
    1e00:	de bf       	out	0x3e, r29	; 62
    1e02:	0f be       	out	0x3f, r0	; 63
    1e04:	cd bf       	out	0x3d, r28	; 61
	/* Enable EN --> it works at Rising Edge */
	DIO_enuSetPintValue(EN_PORT, EN_PIN, DIO_u8HIGH);
    1e06:	80 e0       	ldi	r24, 0x00	; 0
    1e08:	62 e0       	ldi	r22, 0x02	; 2
    1e0a:	41 e0       	ldi	r20, 0x01	; 1
    1e0c:	0e 94 39 09 	call	0x1272	; 0x1272 <DIO_enuSetPintValue>
    1e10:	80 e0       	ldi	r24, 0x00	; 0
    1e12:	90 e0       	ldi	r25, 0x00	; 0
    1e14:	a0 e2       	ldi	r26, 0x20	; 32
    1e16:	b1 e4       	ldi	r27, 0x41	; 65
    1e18:	8b 87       	std	Y+11, r24	; 0x0b
    1e1a:	9c 87       	std	Y+12, r25	; 0x0c
    1e1c:	ad 87       	std	Y+13, r26	; 0x0d
    1e1e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e20:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e22:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e24:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e26:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e28:	20 e0       	ldi	r18, 0x00	; 0
    1e2a:	30 e0       	ldi	r19, 0x00	; 0
    1e2c:	4a e7       	ldi	r20, 0x7A	; 122
    1e2e:	53 e4       	ldi	r21, 0x43	; 67
    1e30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e34:	dc 01       	movw	r26, r24
    1e36:	cb 01       	movw	r24, r22
    1e38:	8f 83       	std	Y+7, r24	; 0x07
    1e3a:	98 87       	std	Y+8, r25	; 0x08
    1e3c:	a9 87       	std	Y+9, r26	; 0x09
    1e3e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e40:	6f 81       	ldd	r22, Y+7	; 0x07
    1e42:	78 85       	ldd	r23, Y+8	; 0x08
    1e44:	89 85       	ldd	r24, Y+9	; 0x09
    1e46:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e48:	20 e0       	ldi	r18, 0x00	; 0
    1e4a:	30 e0       	ldi	r19, 0x00	; 0
    1e4c:	40 e8       	ldi	r20, 0x80	; 128
    1e4e:	5f e3       	ldi	r21, 0x3F	; 63
    1e50:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e54:	88 23       	and	r24, r24
    1e56:	2c f4       	brge	.+10     	; 0x1e62 <LCD_vidTrigger_LATCH+0x70>
		__ticks = 1;
    1e58:	81 e0       	ldi	r24, 0x01	; 1
    1e5a:	90 e0       	ldi	r25, 0x00	; 0
    1e5c:	9e 83       	std	Y+6, r25	; 0x06
    1e5e:	8d 83       	std	Y+5, r24	; 0x05
    1e60:	3f c0       	rjmp	.+126    	; 0x1ee0 <LCD_vidTrigger_LATCH+0xee>
	else if (__tmp > 65535)
    1e62:	6f 81       	ldd	r22, Y+7	; 0x07
    1e64:	78 85       	ldd	r23, Y+8	; 0x08
    1e66:	89 85       	ldd	r24, Y+9	; 0x09
    1e68:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e6a:	20 e0       	ldi	r18, 0x00	; 0
    1e6c:	3f ef       	ldi	r19, 0xFF	; 255
    1e6e:	4f e7       	ldi	r20, 0x7F	; 127
    1e70:	57 e4       	ldi	r21, 0x47	; 71
    1e72:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e76:	18 16       	cp	r1, r24
    1e78:	4c f5       	brge	.+82     	; 0x1ecc <LCD_vidTrigger_LATCH+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e7a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e7c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e80:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e82:	20 e0       	ldi	r18, 0x00	; 0
    1e84:	30 e0       	ldi	r19, 0x00	; 0
    1e86:	40 e2       	ldi	r20, 0x20	; 32
    1e88:	51 e4       	ldi	r21, 0x41	; 65
    1e8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e8e:	dc 01       	movw	r26, r24
    1e90:	cb 01       	movw	r24, r22
    1e92:	bc 01       	movw	r22, r24
    1e94:	cd 01       	movw	r24, r26
    1e96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e9a:	dc 01       	movw	r26, r24
    1e9c:	cb 01       	movw	r24, r22
    1e9e:	9e 83       	std	Y+6, r25	; 0x06
    1ea0:	8d 83       	std	Y+5, r24	; 0x05
    1ea2:	0f c0       	rjmp	.+30     	; 0x1ec2 <LCD_vidTrigger_LATCH+0xd0>
    1ea4:	89 e1       	ldi	r24, 0x19	; 25
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	9c 83       	std	Y+4, r25	; 0x04
    1eaa:	8b 83       	std	Y+3, r24	; 0x03
    1eac:	8b 81       	ldd	r24, Y+3	; 0x03
    1eae:	9c 81       	ldd	r25, Y+4	; 0x04
    1eb0:	01 97       	sbiw	r24, 0x01	; 1
    1eb2:	f1 f7       	brne	.-4      	; 0x1eb0 <LCD_vidTrigger_LATCH+0xbe>
    1eb4:	9c 83       	std	Y+4, r25	; 0x04
    1eb6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eb8:	8d 81       	ldd	r24, Y+5	; 0x05
    1eba:	9e 81       	ldd	r25, Y+6	; 0x06
    1ebc:	01 97       	sbiw	r24, 0x01	; 1
    1ebe:	9e 83       	std	Y+6, r25	; 0x06
    1ec0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ec2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ec4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ec6:	00 97       	sbiw	r24, 0x00	; 0
    1ec8:	69 f7       	brne	.-38     	; 0x1ea4 <LCD_vidTrigger_LATCH+0xb2>
    1eca:	14 c0       	rjmp	.+40     	; 0x1ef4 <LCD_vidTrigger_LATCH+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ecc:	6f 81       	ldd	r22, Y+7	; 0x07
    1ece:	78 85       	ldd	r23, Y+8	; 0x08
    1ed0:	89 85       	ldd	r24, Y+9	; 0x09
    1ed2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ed4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ed8:	dc 01       	movw	r26, r24
    1eda:	cb 01       	movw	r24, r22
    1edc:	9e 83       	std	Y+6, r25	; 0x06
    1ede:	8d 83       	std	Y+5, r24	; 0x05
    1ee0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ee2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ee4:	9a 83       	std	Y+2, r25	; 0x02
    1ee6:	89 83       	std	Y+1, r24	; 0x01
    1ee8:	89 81       	ldd	r24, Y+1	; 0x01
    1eea:	9a 81       	ldd	r25, Y+2	; 0x02
    1eec:	01 97       	sbiw	r24, 0x01	; 1
    1eee:	f1 f7       	brne	.-4      	; 0x1eec <LCD_vidTrigger_LATCH+0xfa>
    1ef0:	9a 83       	std	Y+2, r25	; 0x02
    1ef2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	DIO_enuSetPintValue(EN_PORT, EN_PIN, DIO_u8LOW);
    1ef4:	80 e0       	ldi	r24, 0x00	; 0
    1ef6:	62 e0       	ldi	r22, 0x02	; 2
    1ef8:	40 e0       	ldi	r20, 0x00	; 0
    1efa:	0e 94 39 09 	call	0x1272	; 0x1272 <DIO_enuSetPintValue>
}
    1efe:	2e 96       	adiw	r28, 0x0e	; 14
    1f00:	0f b6       	in	r0, 0x3f	; 63
    1f02:	f8 94       	cli
    1f04:	de bf       	out	0x3e, r29	; 62
    1f06:	0f be       	out	0x3f, r0	; 63
    1f08:	cd bf       	out	0x3d, r28	; 61
    1f0a:	cf 91       	pop	r28
    1f0c:	df 91       	pop	r29
    1f0e:	08 95       	ret

00001f10 <LCD_inlenuSendCommand>:

static inline ES_t LCD_inlenuSendCommand(u8 Copy_u8Command) {
    1f10:	df 93       	push	r29
    1f12:	cf 93       	push	r28
    1f14:	00 d0       	rcall	.+0      	; 0x1f16 <LCD_inlenuSendCommand+0x6>
    1f16:	0f 92       	push	r0
    1f18:	cd b7       	in	r28, 0x3d	; 61
    1f1a:	de b7       	in	r29, 0x3e	; 62
    1f1c:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOTOK;
    1f1e:	19 82       	std	Y+1, r1	; 0x01

	/* RS --> LOW to write Command */
	Local_enuErrorState = DIO_enuSetPintValue(RS_PORT, RS_PIN, DIO_u8LOW);
    1f20:	80 e0       	ldi	r24, 0x00	; 0
    1f22:	60 e0       	ldi	r22, 0x00	; 0
    1f24:	40 e0       	ldi	r20, 0x00	; 0
    1f26:	0e 94 39 09 	call	0x1272	; 0x1272 <DIO_enuSetPintValue>
    1f2a:	89 83       	std	Y+1, r24	; 0x01
	if (Local_enuErrorState != ES_OK)
    1f2c:	89 81       	ldd	r24, Y+1	; 0x01
    1f2e:	81 30       	cpi	r24, 0x01	; 1
    1f30:	19 f0       	breq	.+6      	; 0x1f38 <LCD_inlenuSendCommand+0x28>
		return Local_enuErrorState;
    1f32:	89 81       	ldd	r24, Y+1	; 0x01
    1f34:	8b 83       	std	Y+3, r24	; 0x03
    1f36:	0e c0       	rjmp	.+28     	; 0x1f54 <LCD_inlenuSendCommand+0x44>

	/* Call Latch Function */
	Local_enuErrorState = LCD_enuLatch(Copy_u8Command);
    1f38:	8a 81       	ldd	r24, Y+2	; 0x02
    1f3a:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <LCD_enuLatch>
    1f3e:	89 83       	std	Y+1, r24	; 0x01
	if (Local_enuErrorState != ES_OK)
    1f40:	89 81       	ldd	r24, Y+1	; 0x01
    1f42:	81 30       	cpi	r24, 0x01	; 1
    1f44:	19 f0       	breq	.+6      	; 0x1f4c <LCD_inlenuSendCommand+0x3c>
		return Local_enuErrorState;
    1f46:	89 81       	ldd	r24, Y+1	; 0x01
    1f48:	8b 83       	std	Y+3, r24	; 0x03
    1f4a:	04 c0       	rjmp	.+8      	; 0x1f54 <LCD_inlenuSendCommand+0x44>

	Local_enuErrorState = ES_OK;
    1f4c:	81 e0       	ldi	r24, 0x01	; 1
    1f4e:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorState;
    1f50:	89 81       	ldd	r24, Y+1	; 0x01
    1f52:	8b 83       	std	Y+3, r24	; 0x03
    1f54:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1f56:	0f 90       	pop	r0
    1f58:	0f 90       	pop	r0
    1f5a:	0f 90       	pop	r0
    1f5c:	cf 91       	pop	r28
    1f5e:	df 91       	pop	r29
    1f60:	08 95       	ret

00001f62 <LCD_enuGoToPosition>:

ES_t LCD_enuGoToPosition(u8 Copy_u8Line, u8 Copy_u8Position) {
    1f62:	df 93       	push	r29
    1f64:	cf 93       	push	r28
    1f66:	00 d0       	rcall	.+0      	; 0x1f68 <LCD_enuGoToPosition+0x6>
    1f68:	0f 92       	push	r0
    1f6a:	cd b7       	in	r28, 0x3d	; 61
    1f6c:	de b7       	in	r29, 0x3e	; 62
    1f6e:	8a 83       	std	Y+2, r24	; 0x02
    1f70:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOTOK;
    1f72:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8Position < 16) {
    1f74:	8b 81       	ldd	r24, Y+3	; 0x03
    1f76:	80 31       	cpi	r24, 0x10	; 16
    1f78:	e0 f4       	brcc	.+56     	; 0x1fb2 <LCD_enuGoToPosition+0x50>
		if (Copy_u8Line == FIRST_LINE ) {
    1f7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f7c:	81 30       	cpi	r24, 0x01	; 1
    1f7e:	59 f4       	brne	.+22     	; 0x1f96 <LCD_enuGoToPosition+0x34>
			Local_enuErrorState = ES_OK;
    1f80:	81 e0       	ldi	r24, 0x01	; 1
    1f82:	89 83       	std	Y+1, r24	; 0x01
			Local_enuErrorState = LCD_inlenuSendCommand(
    1f84:	8b 81       	ldd	r24, Y+3	; 0x03
    1f86:	80 58       	subi	r24, 0x80	; 128
    1f88:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <LCD_inlenuSendCommand>
    1f8c:	89 83       	std	Y+1, r24	; 0x01
					START_OF_FIRST_LINE + Copy_u8Position);

			LCD_u8PosCounter = Copy_u8Position;
    1f8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f90:	80 93 6c 00 	sts	0x006C, r24
    1f94:	0e c0       	rjmp	.+28     	; 0x1fb2 <LCD_enuGoToPosition+0x50>
		} else if (Copy_u8Line == SECOND_LINE) {
    1f96:	8a 81       	ldd	r24, Y+2	; 0x02
    1f98:	82 30       	cpi	r24, 0x02	; 2
    1f9a:	59 f4       	brne	.+22     	; 0x1fb2 <LCD_enuGoToPosition+0x50>
			Local_enuErrorState = ES_OK;
    1f9c:	81 e0       	ldi	r24, 0x01	; 1
    1f9e:	89 83       	std	Y+1, r24	; 0x01
			Local_enuErrorState = LCD_inlenuSendCommand(
    1fa0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa2:	80 54       	subi	r24, 0x40	; 64
    1fa4:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <LCD_inlenuSendCommand>
    1fa8:	89 83       	std	Y+1, r24	; 0x01
					START_OF_SECOND_LINE + Copy_u8Position);
			LCD_u8PosCounter = Copy_u8Position + 16;
    1faa:	8b 81       	ldd	r24, Y+3	; 0x03
    1fac:	80 5f       	subi	r24, 0xF0	; 240
    1fae:	80 93 6c 00 	sts	0x006C, r24
		}
	}

	return Local_enuErrorState;
    1fb2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fb4:	0f 90       	pop	r0
    1fb6:	0f 90       	pop	r0
    1fb8:	0f 90       	pop	r0
    1fba:	cf 91       	pop	r28
    1fbc:	df 91       	pop	r29
    1fbe:	08 95       	ret

00001fc0 <LCD_vidCheckPosition>:

static void LCD_vidCheckPosition(void) {
    1fc0:	df 93       	push	r29
    1fc2:	cf 93       	push	r28
    1fc4:	cd b7       	in	r28, 0x3d	; 61
    1fc6:	de b7       	in	r29, 0x3e	; 62
	if (LCD_u8PosCounter == 16) {
    1fc8:	80 91 6c 00 	lds	r24, 0x006C
    1fcc:	80 31       	cpi	r24, 0x10	; 16
    1fce:	51 f4       	brne	.+20     	; 0x1fe4 <LCD_vidCheckPosition+0x24>
		LCD_enuGoToPosition(SECOND_LINE, 0);
    1fd0:	82 e0       	ldi	r24, 0x02	; 2
    1fd2:	60 e0       	ldi	r22, 0x00	; 0
    1fd4:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <LCD_enuGoToPosition>
		LCD_u8PosCounter++;
    1fd8:	80 91 6c 00 	lds	r24, 0x006C
    1fdc:	8f 5f       	subi	r24, 0xFF	; 255
    1fde:	80 93 6c 00 	sts	0x006C, r24
    1fe2:	13 c0       	rjmp	.+38     	; 0x200a <LCD_vidCheckPosition+0x4a>
	} else if (LCD_u8PosCounter == 32) {
    1fe4:	80 91 6c 00 	lds	r24, 0x006C
    1fe8:	80 32       	cpi	r24, 0x20	; 32
    1fea:	51 f4       	brne	.+20     	; 0x2000 <LCD_vidCheckPosition+0x40>
		LCD_inlenuSendCommand(0x01);
    1fec:	81 e0       	ldi	r24, 0x01	; 1
    1fee:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <LCD_inlenuSendCommand>
		LCD_enuGoToPosition(FIRST_LINE, 0);
    1ff2:	81 e0       	ldi	r24, 0x01	; 1
    1ff4:	60 e0       	ldi	r22, 0x00	; 0
    1ff6:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <LCD_enuGoToPosition>
		LCD_u8PosCounter = 0;
    1ffa:	10 92 6c 00 	sts	0x006C, r1
    1ffe:	05 c0       	rjmp	.+10     	; 0x200a <LCD_vidCheckPosition+0x4a>
	} else {
		LCD_u8PosCounter++;
    2000:	80 91 6c 00 	lds	r24, 0x006C
    2004:	8f 5f       	subi	r24, 0xFF	; 255
    2006:	80 93 6c 00 	sts	0x006C, r24
	}
}
    200a:	cf 91       	pop	r28
    200c:	df 91       	pop	r29
    200e:	08 95       	ret

00002010 <LCD_vidClearScreen>:

void LCD_vidClearScreen(void) {
    2010:	df 93       	push	r29
    2012:	cf 93       	push	r28
    2014:	cd b7       	in	r28, 0x3d	; 61
    2016:	de b7       	in	r29, 0x3e	; 62
	LCD_inlenuSendCommand(0x01);
    2018:	81 e0       	ldi	r24, 0x01	; 1
    201a:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <LCD_inlenuSendCommand>
	LCD_u8PosCounter = 0;
    201e:	10 92 6c 00 	sts	0x006C, r1
}
    2022:	cf 91       	pop	r28
    2024:	df 91       	pop	r29
    2026:	08 95       	ret

00002028 <LCD_enuWriteString>:

ES_t LCD_enuWriteString(u8 *Copy_pu8Str) {
    2028:	df 93       	push	r29
    202a:	cf 93       	push	r28
    202c:	00 d0       	rcall	.+0      	; 0x202e <LCD_enuWriteString+0x6>
    202e:	00 d0       	rcall	.+0      	; 0x2030 <LCD_enuWriteString+0x8>
    2030:	cd b7       	in	r28, 0x3d	; 61
    2032:	de b7       	in	r29, 0x3e	; 62
    2034:	9b 83       	std	Y+3, r25	; 0x03
    2036:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOTOK;
    2038:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pu8Str != NULL) {
    203a:	8a 81       	ldd	r24, Y+2	; 0x02
    203c:	9b 81       	ldd	r25, Y+3	; 0x03
    203e:	00 97       	sbiw	r24, 0x00	; 0
    2040:	f1 f0       	breq	.+60     	; 0x207e <LCD_enuWriteString+0x56>
    2042:	11 c0       	rjmp	.+34     	; 0x2066 <LCD_enuWriteString+0x3e>
		while (*Copy_pu8Str != '\0') {
			Local_enuErrorState = LCD_enuDisplayChar(*Copy_pu8Str);
    2044:	ea 81       	ldd	r30, Y+2	; 0x02
    2046:	fb 81       	ldd	r31, Y+3	; 0x03
    2048:	80 81       	ld	r24, Z
    204a:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <LCD_enuDisplayChar>
    204e:	89 83       	std	Y+1, r24	; 0x01
			if (Local_enuErrorState != ES_OK)
    2050:	89 81       	ldd	r24, Y+1	; 0x01
    2052:	81 30       	cpi	r24, 0x01	; 1
    2054:	19 f0       	breq	.+6      	; 0x205c <LCD_enuWriteString+0x34>
				return Local_enuErrorState;
    2056:	89 81       	ldd	r24, Y+1	; 0x01
    2058:	8c 83       	std	Y+4, r24	; 0x04
    205a:	13 c0       	rjmp	.+38     	; 0x2082 <LCD_enuWriteString+0x5a>
			Copy_pu8Str++;
    205c:	8a 81       	ldd	r24, Y+2	; 0x02
    205e:	9b 81       	ldd	r25, Y+3	; 0x03
    2060:	01 96       	adiw	r24, 0x01	; 1
    2062:	9b 83       	std	Y+3, r25	; 0x03
    2064:	8a 83       	std	Y+2, r24	; 0x02

ES_t LCD_enuWriteString(u8 *Copy_pu8Str) {
	ES_t Local_enuErrorState = ES_NOTOK;

	if (Copy_pu8Str != NULL) {
		while (*Copy_pu8Str != '\0') {
    2066:	ea 81       	ldd	r30, Y+2	; 0x02
    2068:	fb 81       	ldd	r31, Y+3	; 0x03
    206a:	80 81       	ld	r24, Z
    206c:	88 23       	and	r24, r24
    206e:	51 f7       	brne	.-44     	; 0x2044 <LCD_enuWriteString+0x1c>
			Local_enuErrorState = LCD_enuDisplayChar(*Copy_pu8Str);
			if (Local_enuErrorState != ES_OK)
				return Local_enuErrorState;
			Copy_pu8Str++;
		}
		Local_enuErrorState = ES_OK;
    2070:	81 e0       	ldi	r24, 0x01	; 1
    2072:	89 83       	std	Y+1, r24	; 0x01
	} else {
		return ES_NULL_POINTER;
	}

	Local_enuErrorState = ES_OK;
    2074:	81 e0       	ldi	r24, 0x01	; 1
    2076:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorState;
    2078:	89 81       	ldd	r24, Y+1	; 0x01
    207a:	8c 83       	std	Y+4, r24	; 0x04
    207c:	02 c0       	rjmp	.+4      	; 0x2082 <LCD_enuWriteString+0x5a>
				return Local_enuErrorState;
			Copy_pu8Str++;
		}
		Local_enuErrorState = ES_OK;
	} else {
		return ES_NULL_POINTER;
    207e:	83 e0       	ldi	r24, 0x03	; 3
    2080:	8c 83       	std	Y+4, r24	; 0x04
    2082:	8c 81       	ldd	r24, Y+4	; 0x04
	}

	Local_enuErrorState = ES_OK;
	return Local_enuErrorState;
}
    2084:	0f 90       	pop	r0
    2086:	0f 90       	pop	r0
    2088:	0f 90       	pop	r0
    208a:	0f 90       	pop	r0
    208c:	cf 91       	pop	r28
    208e:	df 91       	pop	r29
    2090:	08 95       	ret

00002092 <LCD_enuWriteNumber>:

ES_t LCD_enuWriteNumber(int Copy_s32Number) {
    2092:	df 93       	push	r29
    2094:	cf 93       	push	r28
    2096:	cd b7       	in	r28, 0x3d	; 61
    2098:	de b7       	in	r29, 0x3e	; 62
    209a:	64 97       	sbiw	r28, 0x14	; 20
    209c:	0f b6       	in	r0, 0x3f	; 63
    209e:	f8 94       	cli
    20a0:	de bf       	out	0x3e, r29	; 62
    20a2:	0f be       	out	0x3f, r0	; 63
    20a4:	cd bf       	out	0x3d, r28	; 61
    20a6:	9c 8b       	std	Y+20, r25	; 0x14
    20a8:	8b 8b       	std	Y+19, r24	; 0x13
	ES_t Local_enuErrorState = ES_NOTOK;
    20aa:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_As8Container[16];
	u8 Local_u8Iterator;

	sprintf(Local_As8Container, "%d", Copy_s32Number);
    20ac:	00 d0       	rcall	.+0      	; 0x20ae <LCD_enuWriteNumber+0x1c>
    20ae:	00 d0       	rcall	.+0      	; 0x20b0 <LCD_enuWriteNumber+0x1e>
    20b0:	00 d0       	rcall	.+0      	; 0x20b2 <LCD_enuWriteNumber+0x20>
    20b2:	ed b7       	in	r30, 0x3d	; 61
    20b4:	fe b7       	in	r31, 0x3e	; 62
    20b6:	31 96       	adiw	r30, 0x01	; 1
    20b8:	ce 01       	movw	r24, r28
    20ba:	03 96       	adiw	r24, 0x03	; 3
    20bc:	91 83       	std	Z+1, r25	; 0x01
    20be:	80 83       	st	Z, r24
    20c0:	80 e6       	ldi	r24, 0x60	; 96
    20c2:	90 e0       	ldi	r25, 0x00	; 0
    20c4:	93 83       	std	Z+3, r25	; 0x03
    20c6:	82 83       	std	Z+2, r24	; 0x02
    20c8:	8b 89       	ldd	r24, Y+19	; 0x13
    20ca:	9c 89       	ldd	r25, Y+20	; 0x14
    20cc:	95 83       	std	Z+5, r25	; 0x05
    20ce:	84 83       	std	Z+4, r24	; 0x04
    20d0:	0e 94 0d 12 	call	0x241a	; 0x241a <sprintf>
    20d4:	8d b7       	in	r24, 0x3d	; 61
    20d6:	9e b7       	in	r25, 0x3e	; 62
    20d8:	06 96       	adiw	r24, 0x06	; 6
    20da:	0f b6       	in	r0, 0x3f	; 63
    20dc:	f8 94       	cli
    20de:	9e bf       	out	0x3e, r25	; 62
    20e0:	0f be       	out	0x3f, r0	; 63
    20e2:	8d bf       	out	0x3d, r24	; 61

	for (Local_u8Iterator = 0; Local_As8Container[Local_u8Iterator] != '\0';
    20e4:	19 82       	std	Y+1, r1	; 0x01
    20e6:	0f c0       	rjmp	.+30     	; 0x2106 <LCD_enuWriteNumber+0x74>
			Local_u8Iterator++) {
		Local_enuErrorState = LCD_enuDisplayChar(
    20e8:	89 81       	ldd	r24, Y+1	; 0x01
    20ea:	28 2f       	mov	r18, r24
    20ec:	30 e0       	ldi	r19, 0x00	; 0
    20ee:	ce 01       	movw	r24, r28
    20f0:	03 96       	adiw	r24, 0x03	; 3
    20f2:	fc 01       	movw	r30, r24
    20f4:	e2 0f       	add	r30, r18
    20f6:	f3 1f       	adc	r31, r19
    20f8:	80 81       	ld	r24, Z
    20fa:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <LCD_enuDisplayChar>
    20fe:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Iterator;

	sprintf(Local_As8Container, "%d", Copy_s32Number);

	for (Local_u8Iterator = 0; Local_As8Container[Local_u8Iterator] != '\0';
			Local_u8Iterator++) {
    2100:	89 81       	ldd	r24, Y+1	; 0x01
    2102:	8f 5f       	subi	r24, 0xFF	; 255
    2104:	89 83       	std	Y+1, r24	; 0x01
	u8 Local_As8Container[16];
	u8 Local_u8Iterator;

	sprintf(Local_As8Container, "%d", Copy_s32Number);

	for (Local_u8Iterator = 0; Local_As8Container[Local_u8Iterator] != '\0';
    2106:	89 81       	ldd	r24, Y+1	; 0x01
    2108:	28 2f       	mov	r18, r24
    210a:	30 e0       	ldi	r19, 0x00	; 0
    210c:	ce 01       	movw	r24, r28
    210e:	03 96       	adiw	r24, 0x03	; 3
    2110:	fc 01       	movw	r30, r24
    2112:	e2 0f       	add	r30, r18
    2114:	f3 1f       	adc	r31, r19
    2116:	80 81       	ld	r24, Z
    2118:	88 23       	and	r24, r24
    211a:	31 f7       	brne	.-52     	; 0x20e8 <LCD_enuWriteNumber+0x56>
			Local_u8Iterator++) {
		Local_enuErrorState = LCD_enuDisplayChar(
				Local_As8Container[Local_u8Iterator]);
	}

	return Local_enuErrorState;
    211c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    211e:	64 96       	adiw	r28, 0x14	; 20
    2120:	0f b6       	in	r0, 0x3f	; 63
    2122:	f8 94       	cli
    2124:	de bf       	out	0x3e, r29	; 62
    2126:	0f be       	out	0x3f, r0	; 63
    2128:	cd bf       	out	0x3d, r28	; 61
    212a:	cf 91       	pop	r28
    212c:	df 91       	pop	r29
    212e:	08 95       	ret

00002130 <ADC_int>:
#include  "ADC_priv.h"
#include  "ADC_int.h"
#include "BIT_MATH.h"
#include <util/delay.h>

void ADC_int(ADC_vref volt,ADC_Prescaler prescaler) {
    2130:	df 93       	push	r29
    2132:	cf 93       	push	r28
    2134:	00 d0       	rcall	.+0      	; 0x2136 <ADC_int+0x6>
    2136:	00 d0       	rcall	.+0      	; 0x2138 <ADC_int+0x8>
    2138:	cd b7       	in	r28, 0x3d	; 61
    213a:	de b7       	in	r29, 0x3e	; 62
    213c:	89 83       	std	Y+1, r24	; 0x01
    213e:	6a 83       	std	Y+2, r22	; 0x02

	//prescaler
	ADCSRA&=0xf8;
    2140:	a6 e2       	ldi	r26, 0x26	; 38
    2142:	b0 e0       	ldi	r27, 0x00	; 0
    2144:	e6 e2       	ldi	r30, 0x26	; 38
    2146:	f0 e0       	ldi	r31, 0x00	; 0
    2148:	80 81       	ld	r24, Z
    214a:	88 7f       	andi	r24, 0xF8	; 248
    214c:	8c 93       	st	X, r24
	ADCSRA|=prescaler;
    214e:	a6 e2       	ldi	r26, 0x26	; 38
    2150:	b0 e0       	ldi	r27, 0x00	; 0
    2152:	e6 e2       	ldi	r30, 0x26	; 38
    2154:	f0 e0       	ldi	r31, 0x00	; 0
    2156:	90 81       	ld	r25, Z
    2158:	8a 81       	ldd	r24, Y+2	; 0x02
    215a:	89 2b       	or	r24, r25
    215c:	8c 93       	st	X, r24
	//vref
	switch (volt) {
    215e:	89 81       	ldd	r24, Y+1	; 0x01
    2160:	28 2f       	mov	r18, r24
    2162:	30 e0       	ldi	r19, 0x00	; 0
    2164:	3c 83       	std	Y+4, r19	; 0x04
    2166:	2b 83       	std	Y+3, r18	; 0x03
    2168:	8b 81       	ldd	r24, Y+3	; 0x03
    216a:	9c 81       	ldd	r25, Y+4	; 0x04
    216c:	81 30       	cpi	r24, 0x01	; 1
    216e:	91 05       	cpc	r25, r1
    2170:	41 f1       	breq	.+80     	; 0x21c2 <ADC_int+0x92>
    2172:	2b 81       	ldd	r18, Y+3	; 0x03
    2174:	3c 81       	ldd	r19, Y+4	; 0x04
    2176:	22 30       	cpi	r18, 0x02	; 2
    2178:	31 05       	cpc	r19, r1
    217a:	29 f0       	breq	.+10     	; 0x2186 <ADC_int+0x56>
    217c:	8b 81       	ldd	r24, Y+3	; 0x03
    217e:	9c 81       	ldd	r25, Y+4	; 0x04
    2180:	00 97       	sbiw	r24, 0x00	; 0
    2182:	81 f0       	breq	.+32     	; 0x21a4 <ADC_int+0x74>
    2184:	2c c0       	rjmp	.+88     	; 0x21de <ADC_int+0xae>
	case ADC_256:
		SET_BIT(ADMUX,REFS0);
    2186:	a7 e2       	ldi	r26, 0x27	; 39
    2188:	b0 e0       	ldi	r27, 0x00	; 0
    218a:	e7 e2       	ldi	r30, 0x27	; 39
    218c:	f0 e0       	ldi	r31, 0x00	; 0
    218e:	80 81       	ld	r24, Z
    2190:	80 64       	ori	r24, 0x40	; 64
    2192:	8c 93       	st	X, r24
		SET_BIT(ADMUX,REFS1);
    2194:	a7 e2       	ldi	r26, 0x27	; 39
    2196:	b0 e0       	ldi	r27, 0x00	; 0
    2198:	e7 e2       	ldi	r30, 0x27	; 39
    219a:	f0 e0       	ldi	r31, 0x00	; 0
    219c:	80 81       	ld	r24, Z
    219e:	80 68       	ori	r24, 0x80	; 128
    21a0:	8c 93       	st	X, r24
    21a2:	1d c0       	rjmp	.+58     	; 0x21de <ADC_int+0xae>
		break;
	case ADC_REF:
		CLR_BIT(ADMUX,REFS0);
    21a4:	a7 e2       	ldi	r26, 0x27	; 39
    21a6:	b0 e0       	ldi	r27, 0x00	; 0
    21a8:	e7 e2       	ldi	r30, 0x27	; 39
    21aa:	f0 e0       	ldi	r31, 0x00	; 0
    21ac:	80 81       	ld	r24, Z
    21ae:	8f 7b       	andi	r24, 0xBF	; 191
    21b0:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,REFS1);
    21b2:	a7 e2       	ldi	r26, 0x27	; 39
    21b4:	b0 e0       	ldi	r27, 0x00	; 0
    21b6:	e7 e2       	ldi	r30, 0x27	; 39
    21b8:	f0 e0       	ldi	r31, 0x00	; 0
    21ba:	80 81       	ld	r24, Z
    21bc:	8f 77       	andi	r24, 0x7F	; 127
    21be:	8c 93       	st	X, r24
    21c0:	0e c0       	rjmp	.+28     	; 0x21de <ADC_int+0xae>
		break;
	case ADC_VCC:
		SET_BIT(ADMUX,REFS0);
    21c2:	a7 e2       	ldi	r26, 0x27	; 39
    21c4:	b0 e0       	ldi	r27, 0x00	; 0
    21c6:	e7 e2       	ldi	r30, 0x27	; 39
    21c8:	f0 e0       	ldi	r31, 0x00	; 0
    21ca:	80 81       	ld	r24, Z
    21cc:	80 64       	ori	r24, 0x40	; 64
    21ce:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,REFS1);
    21d0:	a7 e2       	ldi	r26, 0x27	; 39
    21d2:	b0 e0       	ldi	r27, 0x00	; 0
    21d4:	e7 e2       	ldi	r30, 0x27	; 39
    21d6:	f0 e0       	ldi	r31, 0x00	; 0
    21d8:	80 81       	ld	r24, Z
    21da:	8f 77       	andi	r24, 0x7F	; 127
    21dc:	8c 93       	st	X, r24
		break;
	}
	//enable ADC
	SET_BIT(ADCSRA,ADEN);
    21de:	a6 e2       	ldi	r26, 0x26	; 38
    21e0:	b0 e0       	ldi	r27, 0x00	; 0
    21e2:	e6 e2       	ldi	r30, 0x26	; 38
    21e4:	f0 e0       	ldi	r31, 0x00	; 0
    21e6:	80 81       	ld	r24, Z
    21e8:	80 68       	ori	r24, 0x80	; 128
    21ea:	8c 93       	st	X, r24

}
    21ec:	0f 90       	pop	r0
    21ee:	0f 90       	pop	r0
    21f0:	0f 90       	pop	r0
    21f2:	0f 90       	pop	r0
    21f4:	cf 91       	pop	r28
    21f6:	df 91       	pop	r29
    21f8:	08 95       	ret

000021fa <ADC_read>:

u16 ADC_read(ADC_Channel channel)
{
    21fa:	df 93       	push	r29
    21fc:	cf 93       	push	r28
    21fe:	cd b7       	in	r28, 0x3d	; 61
    2200:	de b7       	in	r29, 0x3e	; 62
    2202:	2f 97       	sbiw	r28, 0x0f	; 15
    2204:	0f b6       	in	r0, 0x3f	; 63
    2206:	f8 94       	cli
    2208:	de bf       	out	0x3e, r29	; 62
    220a:	0f be       	out	0x3f, r0	; 63
    220c:	cd bf       	out	0x3d, r28	; 61
    220e:	8f 87       	std	Y+15, r24	; 0x0f
	//select channel
	ADMUX&=0xe0;
    2210:	a7 e2       	ldi	r26, 0x27	; 39
    2212:	b0 e0       	ldi	r27, 0x00	; 0
    2214:	e7 e2       	ldi	r30, 0x27	; 39
    2216:	f0 e0       	ldi	r31, 0x00	; 0
    2218:	80 81       	ld	r24, Z
    221a:	80 7e       	andi	r24, 0xE0	; 224
    221c:	8c 93       	st	X, r24
	ADMUX|=channel;
    221e:	a7 e2       	ldi	r26, 0x27	; 39
    2220:	b0 e0       	ldi	r27, 0x00	; 0
    2222:	e7 e2       	ldi	r30, 0x27	; 39
    2224:	f0 e0       	ldi	r31, 0x00	; 0
    2226:	90 81       	ld	r25, Z
    2228:	8f 85       	ldd	r24, Y+15	; 0x0f
    222a:	89 2b       	or	r24, r25
    222c:	8c 93       	st	X, r24
	//start conversion
	SET_BIT(ADCSRA,ADSC);
    222e:	a6 e2       	ldi	r26, 0x26	; 38
    2230:	b0 e0       	ldi	r27, 0x00	; 0
    2232:	e6 e2       	ldi	r30, 0x26	; 38
    2234:	f0 e0       	ldi	r31, 0x00	; 0
    2236:	80 81       	ld	r24, Z
    2238:	80 64       	ori	r24, 0x40	; 64
    223a:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,ADLAR);
    223c:	a7 e2       	ldi	r26, 0x27	; 39
    223e:	b0 e0       	ldi	r27, 0x00	; 0
    2240:	e7 e2       	ldi	r30, 0x27	; 39
    2242:	f0 e0       	ldi	r31, 0x00	; 0
    2244:	80 81       	ld	r24, Z
    2246:	8f 7d       	andi	r24, 0xDF	; 223
    2248:	8c 93       	st	X, r24
    224a:	80 e0       	ldi	r24, 0x00	; 0
    224c:	90 e0       	ldi	r25, 0x00	; 0
    224e:	a8 ec       	ldi	r26, 0xC8	; 200
    2250:	b2 e4       	ldi	r27, 0x42	; 66
    2252:	8b 87       	std	Y+11, r24	; 0x0b
    2254:	9c 87       	std	Y+12, r25	; 0x0c
    2256:	ad 87       	std	Y+13, r26	; 0x0d
    2258:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    225a:	6b 85       	ldd	r22, Y+11	; 0x0b
    225c:	7c 85       	ldd	r23, Y+12	; 0x0c
    225e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2260:	9e 85       	ldd	r25, Y+14	; 0x0e
    2262:	20 e0       	ldi	r18, 0x00	; 0
    2264:	30 e0       	ldi	r19, 0x00	; 0
    2266:	4a e7       	ldi	r20, 0x7A	; 122
    2268:	53 e4       	ldi	r21, 0x43	; 67
    226a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    226e:	dc 01       	movw	r26, r24
    2270:	cb 01       	movw	r24, r22
    2272:	8f 83       	std	Y+7, r24	; 0x07
    2274:	98 87       	std	Y+8, r25	; 0x08
    2276:	a9 87       	std	Y+9, r26	; 0x09
    2278:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    227a:	6f 81       	ldd	r22, Y+7	; 0x07
    227c:	78 85       	ldd	r23, Y+8	; 0x08
    227e:	89 85       	ldd	r24, Y+9	; 0x09
    2280:	9a 85       	ldd	r25, Y+10	; 0x0a
    2282:	20 e0       	ldi	r18, 0x00	; 0
    2284:	30 e0       	ldi	r19, 0x00	; 0
    2286:	40 e8       	ldi	r20, 0x80	; 128
    2288:	5f e3       	ldi	r21, 0x3F	; 63
    228a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    228e:	88 23       	and	r24, r24
    2290:	2c f4       	brge	.+10     	; 0x229c <ADC_read+0xa2>
		__ticks = 1;
    2292:	81 e0       	ldi	r24, 0x01	; 1
    2294:	90 e0       	ldi	r25, 0x00	; 0
    2296:	9e 83       	std	Y+6, r25	; 0x06
    2298:	8d 83       	std	Y+5, r24	; 0x05
    229a:	3f c0       	rjmp	.+126    	; 0x231a <ADC_read+0x120>
	else if (__tmp > 65535)
    229c:	6f 81       	ldd	r22, Y+7	; 0x07
    229e:	78 85       	ldd	r23, Y+8	; 0x08
    22a0:	89 85       	ldd	r24, Y+9	; 0x09
    22a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    22a4:	20 e0       	ldi	r18, 0x00	; 0
    22a6:	3f ef       	ldi	r19, 0xFF	; 255
    22a8:	4f e7       	ldi	r20, 0x7F	; 127
    22aa:	57 e4       	ldi	r21, 0x47	; 71
    22ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22b0:	18 16       	cp	r1, r24
    22b2:	4c f5       	brge	.+82     	; 0x2306 <ADC_read+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    22b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    22b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    22ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    22bc:	20 e0       	ldi	r18, 0x00	; 0
    22be:	30 e0       	ldi	r19, 0x00	; 0
    22c0:	40 e2       	ldi	r20, 0x20	; 32
    22c2:	51 e4       	ldi	r21, 0x41	; 65
    22c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22c8:	dc 01       	movw	r26, r24
    22ca:	cb 01       	movw	r24, r22
    22cc:	bc 01       	movw	r22, r24
    22ce:	cd 01       	movw	r24, r26
    22d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22d4:	dc 01       	movw	r26, r24
    22d6:	cb 01       	movw	r24, r22
    22d8:	9e 83       	std	Y+6, r25	; 0x06
    22da:	8d 83       	std	Y+5, r24	; 0x05
    22dc:	0f c0       	rjmp	.+30     	; 0x22fc <ADC_read+0x102>
    22de:	89 e1       	ldi	r24, 0x19	; 25
    22e0:	90 e0       	ldi	r25, 0x00	; 0
    22e2:	9c 83       	std	Y+4, r25	; 0x04
    22e4:	8b 83       	std	Y+3, r24	; 0x03
    22e6:	8b 81       	ldd	r24, Y+3	; 0x03
    22e8:	9c 81       	ldd	r25, Y+4	; 0x04
    22ea:	01 97       	sbiw	r24, 0x01	; 1
    22ec:	f1 f7       	brne	.-4      	; 0x22ea <ADC_read+0xf0>
    22ee:	9c 83       	std	Y+4, r25	; 0x04
    22f0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22f2:	8d 81       	ldd	r24, Y+5	; 0x05
    22f4:	9e 81       	ldd	r25, Y+6	; 0x06
    22f6:	01 97       	sbiw	r24, 0x01	; 1
    22f8:	9e 83       	std	Y+6, r25	; 0x06
    22fa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22fc:	8d 81       	ldd	r24, Y+5	; 0x05
    22fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2300:	00 97       	sbiw	r24, 0x00	; 0
    2302:	69 f7       	brne	.-38     	; 0x22de <ADC_read+0xe4>
    2304:	14 c0       	rjmp	.+40     	; 0x232e <ADC_read+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2306:	6f 81       	ldd	r22, Y+7	; 0x07
    2308:	78 85       	ldd	r23, Y+8	; 0x08
    230a:	89 85       	ldd	r24, Y+9	; 0x09
    230c:	9a 85       	ldd	r25, Y+10	; 0x0a
    230e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2312:	dc 01       	movw	r26, r24
    2314:	cb 01       	movw	r24, r22
    2316:	9e 83       	std	Y+6, r25	; 0x06
    2318:	8d 83       	std	Y+5, r24	; 0x05
    231a:	8d 81       	ldd	r24, Y+5	; 0x05
    231c:	9e 81       	ldd	r25, Y+6	; 0x06
    231e:	9a 83       	std	Y+2, r25	; 0x02
    2320:	89 83       	std	Y+1, r24	; 0x01
    2322:	89 81       	ldd	r24, Y+1	; 0x01
    2324:	9a 81       	ldd	r25, Y+2	; 0x02
    2326:	01 97       	sbiw	r24, 0x01	; 1
    2328:	f1 f7       	brne	.-4      	; 0x2326 <ADC_read+0x12c>
    232a:	9a 83       	std	Y+2, r25	; 0x02
    232c:	89 83       	std	Y+1, r24	; 0x01
	//busy wait
_delay_ms(100);
return ADC;
    232e:	e4 e2       	ldi	r30, 0x24	; 36
    2330:	f0 e0       	ldi	r31, 0x00	; 0
    2332:	80 81       	ld	r24, Z
    2334:	91 81       	ldd	r25, Z+1	; 0x01
}
    2336:	2f 96       	adiw	r28, 0x0f	; 15
    2338:	0f b6       	in	r0, 0x3f	; 63
    233a:	f8 94       	cli
    233c:	de bf       	out	0x3e, r29	; 62
    233e:	0f be       	out	0x3f, r0	; 63
    2340:	cd bf       	out	0x3d, r28	; 61
    2342:	cf 91       	pop	r28
    2344:	df 91       	pop	r29
    2346:	08 95       	ret

00002348 <main>:

#include "STD_TYPES.h"
#include "LCD_driver/LCD_int.h"
#include "ADC_int.h"
int main()
{
    2348:	df 93       	push	r29
    234a:	cf 93       	push	r28
    234c:	00 d0       	rcall	.+0      	; 0x234e <main+0x6>
    234e:	00 d0       	rcall	.+0      	; 0x2350 <main+0x8>
    2350:	cd b7       	in	r28, 0x3d	; 61
    2352:	de b7       	in	r29, 0x3e	; 62

	u16 num1,num2;
	LCD_enuInit();
    2354:	0e 94 25 0a 	call	0x144a	; 0x144a <LCD_enuInit>
	LCD_enuSendCommand(0x0c);
    2358:	8c e0       	ldi	r24, 0x0C	; 12
    235a:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <LCD_enuSendCommand>
	ADC_int(ADC_VCC,ADC_PRESCALER_64);
    235e:	81 e0       	ldi	r24, 0x01	; 1
    2360:	66 e0       	ldi	r22, 0x06	; 6
    2362:	0e 94 98 10 	call	0x2130	; 0x2130 <ADC_int>
	num1 = ADC_read(CHANNEL_6);
    2366:	86 e0       	ldi	r24, 0x06	; 6
    2368:	0e 94 fd 10 	call	0x21fa	; 0x21fa <ADC_read>
    236c:	9c 83       	std	Y+4, r25	; 0x04
    236e:	8b 83       	std	Y+3, r24	; 0x03
	LCD_enuGoToPosition(SECOND_LINE,POSETION_0);
    2370:	82 e0       	ldi	r24, 0x02	; 2
    2372:	60 e0       	ldi	r22, 0x00	; 0
    2374:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <LCD_enuGoToPosition>
	LCD_enuWriteNumber(num1);
    2378:	8b 81       	ldd	r24, Y+3	; 0x03
    237a:	9c 81       	ldd	r25, Y+4	; 0x04
    237c:	0e 94 49 10 	call	0x2092	; 0x2092 <LCD_enuWriteNumber>
	num2 = ADC_read(CHANNEL_7);
    2380:	87 e0       	ldi	r24, 0x07	; 7
    2382:	0e 94 fd 10 	call	0x21fa	; 0x21fa <ADC_read>
    2386:	9a 83       	std	Y+2, r25	; 0x02
    2388:	89 83       	std	Y+1, r24	; 0x01
	LCD_enuGoToPosition(FIRST_LINE,POSETION_0);
    238a:	81 e0       	ldi	r24, 0x01	; 1
    238c:	60 e0       	ldi	r22, 0x00	; 0
    238e:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <LCD_enuGoToPosition>
	LCD_enuWriteNumber(num2);
    2392:	89 81       	ldd	r24, Y+1	; 0x01
    2394:	9a 81       	ldd	r25, Y+2	; 0x02
    2396:	0e 94 49 10 	call	0x2092	; 0x2092 <LCD_enuWriteNumber>
    239a:	80 e0       	ldi	r24, 0x00	; 0
    239c:	90 e0       	ldi	r25, 0x00	; 0




}
    239e:	0f 90       	pop	r0
    23a0:	0f 90       	pop	r0
    23a2:	0f 90       	pop	r0
    23a4:	0f 90       	pop	r0
    23a6:	cf 91       	pop	r28
    23a8:	df 91       	pop	r29
    23aa:	08 95       	ret

000023ac <__prologue_saves__>:
    23ac:	2f 92       	push	r2
    23ae:	3f 92       	push	r3
    23b0:	4f 92       	push	r4
    23b2:	5f 92       	push	r5
    23b4:	6f 92       	push	r6
    23b6:	7f 92       	push	r7
    23b8:	8f 92       	push	r8
    23ba:	9f 92       	push	r9
    23bc:	af 92       	push	r10
    23be:	bf 92       	push	r11
    23c0:	cf 92       	push	r12
    23c2:	df 92       	push	r13
    23c4:	ef 92       	push	r14
    23c6:	ff 92       	push	r15
    23c8:	0f 93       	push	r16
    23ca:	1f 93       	push	r17
    23cc:	cf 93       	push	r28
    23ce:	df 93       	push	r29
    23d0:	cd b7       	in	r28, 0x3d	; 61
    23d2:	de b7       	in	r29, 0x3e	; 62
    23d4:	ca 1b       	sub	r28, r26
    23d6:	db 0b       	sbc	r29, r27
    23d8:	0f b6       	in	r0, 0x3f	; 63
    23da:	f8 94       	cli
    23dc:	de bf       	out	0x3e, r29	; 62
    23de:	0f be       	out	0x3f, r0	; 63
    23e0:	cd bf       	out	0x3d, r28	; 61
    23e2:	09 94       	ijmp

000023e4 <__epilogue_restores__>:
    23e4:	2a 88       	ldd	r2, Y+18	; 0x12
    23e6:	39 88       	ldd	r3, Y+17	; 0x11
    23e8:	48 88       	ldd	r4, Y+16	; 0x10
    23ea:	5f 84       	ldd	r5, Y+15	; 0x0f
    23ec:	6e 84       	ldd	r6, Y+14	; 0x0e
    23ee:	7d 84       	ldd	r7, Y+13	; 0x0d
    23f0:	8c 84       	ldd	r8, Y+12	; 0x0c
    23f2:	9b 84       	ldd	r9, Y+11	; 0x0b
    23f4:	aa 84       	ldd	r10, Y+10	; 0x0a
    23f6:	b9 84       	ldd	r11, Y+9	; 0x09
    23f8:	c8 84       	ldd	r12, Y+8	; 0x08
    23fa:	df 80       	ldd	r13, Y+7	; 0x07
    23fc:	ee 80       	ldd	r14, Y+6	; 0x06
    23fe:	fd 80       	ldd	r15, Y+5	; 0x05
    2400:	0c 81       	ldd	r16, Y+4	; 0x04
    2402:	1b 81       	ldd	r17, Y+3	; 0x03
    2404:	aa 81       	ldd	r26, Y+2	; 0x02
    2406:	b9 81       	ldd	r27, Y+1	; 0x01
    2408:	ce 0f       	add	r28, r30
    240a:	d1 1d       	adc	r29, r1
    240c:	0f b6       	in	r0, 0x3f	; 63
    240e:	f8 94       	cli
    2410:	de bf       	out	0x3e, r29	; 62
    2412:	0f be       	out	0x3f, r0	; 63
    2414:	cd bf       	out	0x3d, r28	; 61
    2416:	ed 01       	movw	r28, r26
    2418:	08 95       	ret

0000241a <sprintf>:
    241a:	ae e0       	ldi	r26, 0x0E	; 14
    241c:	b0 e0       	ldi	r27, 0x00	; 0
    241e:	e3 e1       	ldi	r30, 0x13	; 19
    2420:	f2 e1       	ldi	r31, 0x12	; 18
    2422:	0c 94 e4 11 	jmp	0x23c8	; 0x23c8 <__prologue_saves__+0x1c>
    2426:	0d 89       	ldd	r16, Y+21	; 0x15
    2428:	1e 89       	ldd	r17, Y+22	; 0x16
    242a:	86 e0       	ldi	r24, 0x06	; 6
    242c:	8c 83       	std	Y+4, r24	; 0x04
    242e:	1a 83       	std	Y+2, r17	; 0x02
    2430:	09 83       	std	Y+1, r16	; 0x01
    2432:	8f ef       	ldi	r24, 0xFF	; 255
    2434:	9f e7       	ldi	r25, 0x7F	; 127
    2436:	9e 83       	std	Y+6, r25	; 0x06
    2438:	8d 83       	std	Y+5, r24	; 0x05
    243a:	9e 01       	movw	r18, r28
    243c:	27 5e       	subi	r18, 0xE7	; 231
    243e:	3f 4f       	sbci	r19, 0xFF	; 255
    2440:	ce 01       	movw	r24, r28
    2442:	01 96       	adiw	r24, 0x01	; 1
    2444:	6f 89       	ldd	r22, Y+23	; 0x17
    2446:	78 8d       	ldd	r23, Y+24	; 0x18
    2448:	a9 01       	movw	r20, r18
    244a:	0e 94 31 12 	call	0x2462	; 0x2462 <vfprintf>
    244e:	2f 81       	ldd	r18, Y+7	; 0x07
    2450:	38 85       	ldd	r19, Y+8	; 0x08
    2452:	02 0f       	add	r16, r18
    2454:	13 1f       	adc	r17, r19
    2456:	f8 01       	movw	r30, r16
    2458:	10 82       	st	Z, r1
    245a:	2e 96       	adiw	r28, 0x0e	; 14
    245c:	e4 e0       	ldi	r30, 0x04	; 4
    245e:	0c 94 00 12 	jmp	0x2400	; 0x2400 <__epilogue_restores__+0x1c>

00002462 <vfprintf>:
    2462:	ab e0       	ldi	r26, 0x0B	; 11
    2464:	b0 e0       	ldi	r27, 0x00	; 0
    2466:	e7 e3       	ldi	r30, 0x37	; 55
    2468:	f2 e1       	ldi	r31, 0x12	; 18
    246a:	0c 94 d6 11 	jmp	0x23ac	; 0x23ac <__prologue_saves__>
    246e:	3c 01       	movw	r6, r24
    2470:	2b 01       	movw	r4, r22
    2472:	5a 01       	movw	r10, r20
    2474:	fc 01       	movw	r30, r24
    2476:	17 82       	std	Z+7, r1	; 0x07
    2478:	16 82       	std	Z+6, r1	; 0x06
    247a:	83 81       	ldd	r24, Z+3	; 0x03
    247c:	81 fd       	sbrc	r24, 1
    247e:	03 c0       	rjmp	.+6      	; 0x2486 <vfprintf+0x24>
    2480:	6f ef       	ldi	r22, 0xFF	; 255
    2482:	7f ef       	ldi	r23, 0xFF	; 255
    2484:	c6 c1       	rjmp	.+908    	; 0x2812 <vfprintf+0x3b0>
    2486:	9a e0       	ldi	r25, 0x0A	; 10
    2488:	89 2e       	mov	r8, r25
    248a:	1e 01       	movw	r2, r28
    248c:	08 94       	sec
    248e:	21 1c       	adc	r2, r1
    2490:	31 1c       	adc	r3, r1
    2492:	f3 01       	movw	r30, r6
    2494:	23 81       	ldd	r18, Z+3	; 0x03
    2496:	f2 01       	movw	r30, r4
    2498:	23 fd       	sbrc	r18, 3
    249a:	85 91       	lpm	r24, Z+
    249c:	23 ff       	sbrs	r18, 3
    249e:	81 91       	ld	r24, Z+
    24a0:	2f 01       	movw	r4, r30
    24a2:	88 23       	and	r24, r24
    24a4:	09 f4       	brne	.+2      	; 0x24a8 <vfprintf+0x46>
    24a6:	b2 c1       	rjmp	.+868    	; 0x280c <vfprintf+0x3aa>
    24a8:	85 32       	cpi	r24, 0x25	; 37
    24aa:	39 f4       	brne	.+14     	; 0x24ba <vfprintf+0x58>
    24ac:	23 fd       	sbrc	r18, 3
    24ae:	85 91       	lpm	r24, Z+
    24b0:	23 ff       	sbrs	r18, 3
    24b2:	81 91       	ld	r24, Z+
    24b4:	2f 01       	movw	r4, r30
    24b6:	85 32       	cpi	r24, 0x25	; 37
    24b8:	29 f4       	brne	.+10     	; 0x24c4 <vfprintf+0x62>
    24ba:	90 e0       	ldi	r25, 0x00	; 0
    24bc:	b3 01       	movw	r22, r6
    24be:	0e 94 24 14 	call	0x2848	; 0x2848 <fputc>
    24c2:	e7 cf       	rjmp	.-50     	; 0x2492 <vfprintf+0x30>
    24c4:	98 2f       	mov	r25, r24
    24c6:	ff 24       	eor	r15, r15
    24c8:	ee 24       	eor	r14, r14
    24ca:	99 24       	eor	r9, r9
    24cc:	ff e1       	ldi	r31, 0x1F	; 31
    24ce:	ff 15       	cp	r31, r15
    24d0:	d0 f0       	brcs	.+52     	; 0x2506 <vfprintf+0xa4>
    24d2:	9b 32       	cpi	r25, 0x2B	; 43
    24d4:	69 f0       	breq	.+26     	; 0x24f0 <vfprintf+0x8e>
    24d6:	9c 32       	cpi	r25, 0x2C	; 44
    24d8:	28 f4       	brcc	.+10     	; 0x24e4 <vfprintf+0x82>
    24da:	90 32       	cpi	r25, 0x20	; 32
    24dc:	59 f0       	breq	.+22     	; 0x24f4 <vfprintf+0x92>
    24de:	93 32       	cpi	r25, 0x23	; 35
    24e0:	91 f4       	brne	.+36     	; 0x2506 <vfprintf+0xa4>
    24e2:	0e c0       	rjmp	.+28     	; 0x2500 <vfprintf+0x9e>
    24e4:	9d 32       	cpi	r25, 0x2D	; 45
    24e6:	49 f0       	breq	.+18     	; 0x24fa <vfprintf+0x98>
    24e8:	90 33       	cpi	r25, 0x30	; 48
    24ea:	69 f4       	brne	.+26     	; 0x2506 <vfprintf+0xa4>
    24ec:	41 e0       	ldi	r20, 0x01	; 1
    24ee:	24 c0       	rjmp	.+72     	; 0x2538 <vfprintf+0xd6>
    24f0:	52 e0       	ldi	r21, 0x02	; 2
    24f2:	f5 2a       	or	r15, r21
    24f4:	84 e0       	ldi	r24, 0x04	; 4
    24f6:	f8 2a       	or	r15, r24
    24f8:	28 c0       	rjmp	.+80     	; 0x254a <vfprintf+0xe8>
    24fa:	98 e0       	ldi	r25, 0x08	; 8
    24fc:	f9 2a       	or	r15, r25
    24fe:	25 c0       	rjmp	.+74     	; 0x254a <vfprintf+0xe8>
    2500:	e0 e1       	ldi	r30, 0x10	; 16
    2502:	fe 2a       	or	r15, r30
    2504:	22 c0       	rjmp	.+68     	; 0x254a <vfprintf+0xe8>
    2506:	f7 fc       	sbrc	r15, 7
    2508:	29 c0       	rjmp	.+82     	; 0x255c <vfprintf+0xfa>
    250a:	89 2f       	mov	r24, r25
    250c:	80 53       	subi	r24, 0x30	; 48
    250e:	8a 30       	cpi	r24, 0x0A	; 10
    2510:	70 f4       	brcc	.+28     	; 0x252e <vfprintf+0xcc>
    2512:	f6 fe       	sbrs	r15, 6
    2514:	05 c0       	rjmp	.+10     	; 0x2520 <vfprintf+0xbe>
    2516:	98 9c       	mul	r9, r8
    2518:	90 2c       	mov	r9, r0
    251a:	11 24       	eor	r1, r1
    251c:	98 0e       	add	r9, r24
    251e:	15 c0       	rjmp	.+42     	; 0x254a <vfprintf+0xe8>
    2520:	e8 9c       	mul	r14, r8
    2522:	e0 2c       	mov	r14, r0
    2524:	11 24       	eor	r1, r1
    2526:	e8 0e       	add	r14, r24
    2528:	f0 e2       	ldi	r31, 0x20	; 32
    252a:	ff 2a       	or	r15, r31
    252c:	0e c0       	rjmp	.+28     	; 0x254a <vfprintf+0xe8>
    252e:	9e 32       	cpi	r25, 0x2E	; 46
    2530:	29 f4       	brne	.+10     	; 0x253c <vfprintf+0xda>
    2532:	f6 fc       	sbrc	r15, 6
    2534:	6b c1       	rjmp	.+726    	; 0x280c <vfprintf+0x3aa>
    2536:	40 e4       	ldi	r20, 0x40	; 64
    2538:	f4 2a       	or	r15, r20
    253a:	07 c0       	rjmp	.+14     	; 0x254a <vfprintf+0xe8>
    253c:	9c 36       	cpi	r25, 0x6C	; 108
    253e:	19 f4       	brne	.+6      	; 0x2546 <vfprintf+0xe4>
    2540:	50 e8       	ldi	r21, 0x80	; 128
    2542:	f5 2a       	or	r15, r21
    2544:	02 c0       	rjmp	.+4      	; 0x254a <vfprintf+0xe8>
    2546:	98 36       	cpi	r25, 0x68	; 104
    2548:	49 f4       	brne	.+18     	; 0x255c <vfprintf+0xfa>
    254a:	f2 01       	movw	r30, r4
    254c:	23 fd       	sbrc	r18, 3
    254e:	95 91       	lpm	r25, Z+
    2550:	23 ff       	sbrs	r18, 3
    2552:	91 91       	ld	r25, Z+
    2554:	2f 01       	movw	r4, r30
    2556:	99 23       	and	r25, r25
    2558:	09 f0       	breq	.+2      	; 0x255c <vfprintf+0xfa>
    255a:	b8 cf       	rjmp	.-144    	; 0x24cc <vfprintf+0x6a>
    255c:	89 2f       	mov	r24, r25
    255e:	85 54       	subi	r24, 0x45	; 69
    2560:	83 30       	cpi	r24, 0x03	; 3
    2562:	18 f0       	brcs	.+6      	; 0x256a <vfprintf+0x108>
    2564:	80 52       	subi	r24, 0x20	; 32
    2566:	83 30       	cpi	r24, 0x03	; 3
    2568:	38 f4       	brcc	.+14     	; 0x2578 <vfprintf+0x116>
    256a:	44 e0       	ldi	r20, 0x04	; 4
    256c:	50 e0       	ldi	r21, 0x00	; 0
    256e:	a4 0e       	add	r10, r20
    2570:	b5 1e       	adc	r11, r21
    2572:	5f e3       	ldi	r21, 0x3F	; 63
    2574:	59 83       	std	Y+1, r21	; 0x01
    2576:	0f c0       	rjmp	.+30     	; 0x2596 <vfprintf+0x134>
    2578:	93 36       	cpi	r25, 0x63	; 99
    257a:	31 f0       	breq	.+12     	; 0x2588 <vfprintf+0x126>
    257c:	93 37       	cpi	r25, 0x73	; 115
    257e:	79 f0       	breq	.+30     	; 0x259e <vfprintf+0x13c>
    2580:	93 35       	cpi	r25, 0x53	; 83
    2582:	09 f0       	breq	.+2      	; 0x2586 <vfprintf+0x124>
    2584:	56 c0       	rjmp	.+172    	; 0x2632 <vfprintf+0x1d0>
    2586:	20 c0       	rjmp	.+64     	; 0x25c8 <vfprintf+0x166>
    2588:	f5 01       	movw	r30, r10
    258a:	80 81       	ld	r24, Z
    258c:	89 83       	std	Y+1, r24	; 0x01
    258e:	42 e0       	ldi	r20, 0x02	; 2
    2590:	50 e0       	ldi	r21, 0x00	; 0
    2592:	a4 0e       	add	r10, r20
    2594:	b5 1e       	adc	r11, r21
    2596:	61 01       	movw	r12, r2
    2598:	01 e0       	ldi	r16, 0x01	; 1
    259a:	10 e0       	ldi	r17, 0x00	; 0
    259c:	12 c0       	rjmp	.+36     	; 0x25c2 <vfprintf+0x160>
    259e:	f5 01       	movw	r30, r10
    25a0:	c0 80       	ld	r12, Z
    25a2:	d1 80       	ldd	r13, Z+1	; 0x01
    25a4:	f6 fc       	sbrc	r15, 6
    25a6:	03 c0       	rjmp	.+6      	; 0x25ae <vfprintf+0x14c>
    25a8:	6f ef       	ldi	r22, 0xFF	; 255
    25aa:	7f ef       	ldi	r23, 0xFF	; 255
    25ac:	02 c0       	rjmp	.+4      	; 0x25b2 <vfprintf+0x150>
    25ae:	69 2d       	mov	r22, r9
    25b0:	70 e0       	ldi	r23, 0x00	; 0
    25b2:	42 e0       	ldi	r20, 0x02	; 2
    25b4:	50 e0       	ldi	r21, 0x00	; 0
    25b6:	a4 0e       	add	r10, r20
    25b8:	b5 1e       	adc	r11, r21
    25ba:	c6 01       	movw	r24, r12
    25bc:	0e 94 19 14 	call	0x2832	; 0x2832 <strnlen>
    25c0:	8c 01       	movw	r16, r24
    25c2:	5f e7       	ldi	r21, 0x7F	; 127
    25c4:	f5 22       	and	r15, r21
    25c6:	14 c0       	rjmp	.+40     	; 0x25f0 <vfprintf+0x18e>
    25c8:	f5 01       	movw	r30, r10
    25ca:	c0 80       	ld	r12, Z
    25cc:	d1 80       	ldd	r13, Z+1	; 0x01
    25ce:	f6 fc       	sbrc	r15, 6
    25d0:	03 c0       	rjmp	.+6      	; 0x25d8 <vfprintf+0x176>
    25d2:	6f ef       	ldi	r22, 0xFF	; 255
    25d4:	7f ef       	ldi	r23, 0xFF	; 255
    25d6:	02 c0       	rjmp	.+4      	; 0x25dc <vfprintf+0x17a>
    25d8:	69 2d       	mov	r22, r9
    25da:	70 e0       	ldi	r23, 0x00	; 0
    25dc:	42 e0       	ldi	r20, 0x02	; 2
    25de:	50 e0       	ldi	r21, 0x00	; 0
    25e0:	a4 0e       	add	r10, r20
    25e2:	b5 1e       	adc	r11, r21
    25e4:	c6 01       	movw	r24, r12
    25e6:	0e 94 0e 14 	call	0x281c	; 0x281c <strnlen_P>
    25ea:	8c 01       	movw	r16, r24
    25ec:	50 e8       	ldi	r21, 0x80	; 128
    25ee:	f5 2a       	or	r15, r21
    25f0:	f3 fe       	sbrs	r15, 3
    25f2:	07 c0       	rjmp	.+14     	; 0x2602 <vfprintf+0x1a0>
    25f4:	1a c0       	rjmp	.+52     	; 0x262a <vfprintf+0x1c8>
    25f6:	80 e2       	ldi	r24, 0x20	; 32
    25f8:	90 e0       	ldi	r25, 0x00	; 0
    25fa:	b3 01       	movw	r22, r6
    25fc:	0e 94 24 14 	call	0x2848	; 0x2848 <fputc>
    2600:	ea 94       	dec	r14
    2602:	8e 2d       	mov	r24, r14
    2604:	90 e0       	ldi	r25, 0x00	; 0
    2606:	08 17       	cp	r16, r24
    2608:	19 07       	cpc	r17, r25
    260a:	a8 f3       	brcs	.-22     	; 0x25f6 <vfprintf+0x194>
    260c:	0e c0       	rjmp	.+28     	; 0x262a <vfprintf+0x1c8>
    260e:	f6 01       	movw	r30, r12
    2610:	f7 fc       	sbrc	r15, 7
    2612:	85 91       	lpm	r24, Z+
    2614:	f7 fe       	sbrs	r15, 7
    2616:	81 91       	ld	r24, Z+
    2618:	6f 01       	movw	r12, r30
    261a:	90 e0       	ldi	r25, 0x00	; 0
    261c:	b3 01       	movw	r22, r6
    261e:	0e 94 24 14 	call	0x2848	; 0x2848 <fputc>
    2622:	e1 10       	cpse	r14, r1
    2624:	ea 94       	dec	r14
    2626:	01 50       	subi	r16, 0x01	; 1
    2628:	10 40       	sbci	r17, 0x00	; 0
    262a:	01 15       	cp	r16, r1
    262c:	11 05       	cpc	r17, r1
    262e:	79 f7       	brne	.-34     	; 0x260e <vfprintf+0x1ac>
    2630:	ea c0       	rjmp	.+468    	; 0x2806 <vfprintf+0x3a4>
    2632:	94 36       	cpi	r25, 0x64	; 100
    2634:	11 f0       	breq	.+4      	; 0x263a <vfprintf+0x1d8>
    2636:	99 36       	cpi	r25, 0x69	; 105
    2638:	69 f5       	brne	.+90     	; 0x2694 <vfprintf+0x232>
    263a:	f7 fe       	sbrs	r15, 7
    263c:	08 c0       	rjmp	.+16     	; 0x264e <vfprintf+0x1ec>
    263e:	f5 01       	movw	r30, r10
    2640:	20 81       	ld	r18, Z
    2642:	31 81       	ldd	r19, Z+1	; 0x01
    2644:	42 81       	ldd	r20, Z+2	; 0x02
    2646:	53 81       	ldd	r21, Z+3	; 0x03
    2648:	84 e0       	ldi	r24, 0x04	; 4
    264a:	90 e0       	ldi	r25, 0x00	; 0
    264c:	0a c0       	rjmp	.+20     	; 0x2662 <vfprintf+0x200>
    264e:	f5 01       	movw	r30, r10
    2650:	80 81       	ld	r24, Z
    2652:	91 81       	ldd	r25, Z+1	; 0x01
    2654:	9c 01       	movw	r18, r24
    2656:	44 27       	eor	r20, r20
    2658:	37 fd       	sbrc	r19, 7
    265a:	40 95       	com	r20
    265c:	54 2f       	mov	r21, r20
    265e:	82 e0       	ldi	r24, 0x02	; 2
    2660:	90 e0       	ldi	r25, 0x00	; 0
    2662:	a8 0e       	add	r10, r24
    2664:	b9 1e       	adc	r11, r25
    2666:	9f e6       	ldi	r25, 0x6F	; 111
    2668:	f9 22       	and	r15, r25
    266a:	57 ff       	sbrs	r21, 7
    266c:	09 c0       	rjmp	.+18     	; 0x2680 <vfprintf+0x21e>
    266e:	50 95       	com	r21
    2670:	40 95       	com	r20
    2672:	30 95       	com	r19
    2674:	21 95       	neg	r18
    2676:	3f 4f       	sbci	r19, 0xFF	; 255
    2678:	4f 4f       	sbci	r20, 0xFF	; 255
    267a:	5f 4f       	sbci	r21, 0xFF	; 255
    267c:	e0 e8       	ldi	r30, 0x80	; 128
    267e:	fe 2a       	or	r15, r30
    2680:	ca 01       	movw	r24, r20
    2682:	b9 01       	movw	r22, r18
    2684:	a1 01       	movw	r20, r2
    2686:	2a e0       	ldi	r18, 0x0A	; 10
    2688:	30 e0       	ldi	r19, 0x00	; 0
    268a:	0e 94 50 14 	call	0x28a0	; 0x28a0 <__ultoa_invert>
    268e:	d8 2e       	mov	r13, r24
    2690:	d2 18       	sub	r13, r2
    2692:	40 c0       	rjmp	.+128    	; 0x2714 <vfprintf+0x2b2>
    2694:	95 37       	cpi	r25, 0x75	; 117
    2696:	29 f4       	brne	.+10     	; 0x26a2 <vfprintf+0x240>
    2698:	1f 2d       	mov	r17, r15
    269a:	1f 7e       	andi	r17, 0xEF	; 239
    269c:	2a e0       	ldi	r18, 0x0A	; 10
    269e:	30 e0       	ldi	r19, 0x00	; 0
    26a0:	1d c0       	rjmp	.+58     	; 0x26dc <vfprintf+0x27a>
    26a2:	1f 2d       	mov	r17, r15
    26a4:	19 7f       	andi	r17, 0xF9	; 249
    26a6:	9f 36       	cpi	r25, 0x6F	; 111
    26a8:	61 f0       	breq	.+24     	; 0x26c2 <vfprintf+0x260>
    26aa:	90 37       	cpi	r25, 0x70	; 112
    26ac:	20 f4       	brcc	.+8      	; 0x26b6 <vfprintf+0x254>
    26ae:	98 35       	cpi	r25, 0x58	; 88
    26b0:	09 f0       	breq	.+2      	; 0x26b4 <vfprintf+0x252>
    26b2:	ac c0       	rjmp	.+344    	; 0x280c <vfprintf+0x3aa>
    26b4:	0f c0       	rjmp	.+30     	; 0x26d4 <vfprintf+0x272>
    26b6:	90 37       	cpi	r25, 0x70	; 112
    26b8:	39 f0       	breq	.+14     	; 0x26c8 <vfprintf+0x266>
    26ba:	98 37       	cpi	r25, 0x78	; 120
    26bc:	09 f0       	breq	.+2      	; 0x26c0 <vfprintf+0x25e>
    26be:	a6 c0       	rjmp	.+332    	; 0x280c <vfprintf+0x3aa>
    26c0:	04 c0       	rjmp	.+8      	; 0x26ca <vfprintf+0x268>
    26c2:	28 e0       	ldi	r18, 0x08	; 8
    26c4:	30 e0       	ldi	r19, 0x00	; 0
    26c6:	0a c0       	rjmp	.+20     	; 0x26dc <vfprintf+0x27a>
    26c8:	10 61       	ori	r17, 0x10	; 16
    26ca:	14 fd       	sbrc	r17, 4
    26cc:	14 60       	ori	r17, 0x04	; 4
    26ce:	20 e1       	ldi	r18, 0x10	; 16
    26d0:	30 e0       	ldi	r19, 0x00	; 0
    26d2:	04 c0       	rjmp	.+8      	; 0x26dc <vfprintf+0x27a>
    26d4:	14 fd       	sbrc	r17, 4
    26d6:	16 60       	ori	r17, 0x06	; 6
    26d8:	20 e1       	ldi	r18, 0x10	; 16
    26da:	32 e0       	ldi	r19, 0x02	; 2
    26dc:	17 ff       	sbrs	r17, 7
    26de:	08 c0       	rjmp	.+16     	; 0x26f0 <vfprintf+0x28e>
    26e0:	f5 01       	movw	r30, r10
    26e2:	60 81       	ld	r22, Z
    26e4:	71 81       	ldd	r23, Z+1	; 0x01
    26e6:	82 81       	ldd	r24, Z+2	; 0x02
    26e8:	93 81       	ldd	r25, Z+3	; 0x03
    26ea:	44 e0       	ldi	r20, 0x04	; 4
    26ec:	50 e0       	ldi	r21, 0x00	; 0
    26ee:	08 c0       	rjmp	.+16     	; 0x2700 <vfprintf+0x29e>
    26f0:	f5 01       	movw	r30, r10
    26f2:	80 81       	ld	r24, Z
    26f4:	91 81       	ldd	r25, Z+1	; 0x01
    26f6:	bc 01       	movw	r22, r24
    26f8:	80 e0       	ldi	r24, 0x00	; 0
    26fa:	90 e0       	ldi	r25, 0x00	; 0
    26fc:	42 e0       	ldi	r20, 0x02	; 2
    26fe:	50 e0       	ldi	r21, 0x00	; 0
    2700:	a4 0e       	add	r10, r20
    2702:	b5 1e       	adc	r11, r21
    2704:	a1 01       	movw	r20, r2
    2706:	0e 94 50 14 	call	0x28a0	; 0x28a0 <__ultoa_invert>
    270a:	d8 2e       	mov	r13, r24
    270c:	d2 18       	sub	r13, r2
    270e:	8f e7       	ldi	r24, 0x7F	; 127
    2710:	f8 2e       	mov	r15, r24
    2712:	f1 22       	and	r15, r17
    2714:	f6 fe       	sbrs	r15, 6
    2716:	0b c0       	rjmp	.+22     	; 0x272e <vfprintf+0x2cc>
    2718:	5e ef       	ldi	r21, 0xFE	; 254
    271a:	f5 22       	and	r15, r21
    271c:	d9 14       	cp	r13, r9
    271e:	38 f4       	brcc	.+14     	; 0x272e <vfprintf+0x2cc>
    2720:	f4 fe       	sbrs	r15, 4
    2722:	07 c0       	rjmp	.+14     	; 0x2732 <vfprintf+0x2d0>
    2724:	f2 fc       	sbrc	r15, 2
    2726:	05 c0       	rjmp	.+10     	; 0x2732 <vfprintf+0x2d0>
    2728:	8f ee       	ldi	r24, 0xEF	; 239
    272a:	f8 22       	and	r15, r24
    272c:	02 c0       	rjmp	.+4      	; 0x2732 <vfprintf+0x2d0>
    272e:	1d 2d       	mov	r17, r13
    2730:	01 c0       	rjmp	.+2      	; 0x2734 <vfprintf+0x2d2>
    2732:	19 2d       	mov	r17, r9
    2734:	f4 fe       	sbrs	r15, 4
    2736:	0d c0       	rjmp	.+26     	; 0x2752 <vfprintf+0x2f0>
    2738:	fe 01       	movw	r30, r28
    273a:	ed 0d       	add	r30, r13
    273c:	f1 1d       	adc	r31, r1
    273e:	80 81       	ld	r24, Z
    2740:	80 33       	cpi	r24, 0x30	; 48
    2742:	19 f4       	brne	.+6      	; 0x274a <vfprintf+0x2e8>
    2744:	99 ee       	ldi	r25, 0xE9	; 233
    2746:	f9 22       	and	r15, r25
    2748:	08 c0       	rjmp	.+16     	; 0x275a <vfprintf+0x2f8>
    274a:	1f 5f       	subi	r17, 0xFF	; 255
    274c:	f2 fe       	sbrs	r15, 2
    274e:	05 c0       	rjmp	.+10     	; 0x275a <vfprintf+0x2f8>
    2750:	03 c0       	rjmp	.+6      	; 0x2758 <vfprintf+0x2f6>
    2752:	8f 2d       	mov	r24, r15
    2754:	86 78       	andi	r24, 0x86	; 134
    2756:	09 f0       	breq	.+2      	; 0x275a <vfprintf+0x2f8>
    2758:	1f 5f       	subi	r17, 0xFF	; 255
    275a:	0f 2d       	mov	r16, r15
    275c:	f3 fc       	sbrc	r15, 3
    275e:	14 c0       	rjmp	.+40     	; 0x2788 <vfprintf+0x326>
    2760:	f0 fe       	sbrs	r15, 0
    2762:	0f c0       	rjmp	.+30     	; 0x2782 <vfprintf+0x320>
    2764:	1e 15       	cp	r17, r14
    2766:	10 f0       	brcs	.+4      	; 0x276c <vfprintf+0x30a>
    2768:	9d 2c       	mov	r9, r13
    276a:	0b c0       	rjmp	.+22     	; 0x2782 <vfprintf+0x320>
    276c:	9d 2c       	mov	r9, r13
    276e:	9e 0c       	add	r9, r14
    2770:	91 1a       	sub	r9, r17
    2772:	1e 2d       	mov	r17, r14
    2774:	06 c0       	rjmp	.+12     	; 0x2782 <vfprintf+0x320>
    2776:	80 e2       	ldi	r24, 0x20	; 32
    2778:	90 e0       	ldi	r25, 0x00	; 0
    277a:	b3 01       	movw	r22, r6
    277c:	0e 94 24 14 	call	0x2848	; 0x2848 <fputc>
    2780:	1f 5f       	subi	r17, 0xFF	; 255
    2782:	1e 15       	cp	r17, r14
    2784:	c0 f3       	brcs	.-16     	; 0x2776 <vfprintf+0x314>
    2786:	04 c0       	rjmp	.+8      	; 0x2790 <vfprintf+0x32e>
    2788:	1e 15       	cp	r17, r14
    278a:	10 f4       	brcc	.+4      	; 0x2790 <vfprintf+0x32e>
    278c:	e1 1a       	sub	r14, r17
    278e:	01 c0       	rjmp	.+2      	; 0x2792 <vfprintf+0x330>
    2790:	ee 24       	eor	r14, r14
    2792:	04 ff       	sbrs	r16, 4
    2794:	0f c0       	rjmp	.+30     	; 0x27b4 <vfprintf+0x352>
    2796:	80 e3       	ldi	r24, 0x30	; 48
    2798:	90 e0       	ldi	r25, 0x00	; 0
    279a:	b3 01       	movw	r22, r6
    279c:	0e 94 24 14 	call	0x2848	; 0x2848 <fputc>
    27a0:	02 ff       	sbrs	r16, 2
    27a2:	1d c0       	rjmp	.+58     	; 0x27de <vfprintf+0x37c>
    27a4:	01 fd       	sbrc	r16, 1
    27a6:	03 c0       	rjmp	.+6      	; 0x27ae <vfprintf+0x34c>
    27a8:	88 e7       	ldi	r24, 0x78	; 120
    27aa:	90 e0       	ldi	r25, 0x00	; 0
    27ac:	0e c0       	rjmp	.+28     	; 0x27ca <vfprintf+0x368>
    27ae:	88 e5       	ldi	r24, 0x58	; 88
    27b0:	90 e0       	ldi	r25, 0x00	; 0
    27b2:	0b c0       	rjmp	.+22     	; 0x27ca <vfprintf+0x368>
    27b4:	80 2f       	mov	r24, r16
    27b6:	86 78       	andi	r24, 0x86	; 134
    27b8:	91 f0       	breq	.+36     	; 0x27de <vfprintf+0x37c>
    27ba:	01 ff       	sbrs	r16, 1
    27bc:	02 c0       	rjmp	.+4      	; 0x27c2 <vfprintf+0x360>
    27be:	8b e2       	ldi	r24, 0x2B	; 43
    27c0:	01 c0       	rjmp	.+2      	; 0x27c4 <vfprintf+0x362>
    27c2:	80 e2       	ldi	r24, 0x20	; 32
    27c4:	f7 fc       	sbrc	r15, 7
    27c6:	8d e2       	ldi	r24, 0x2D	; 45
    27c8:	90 e0       	ldi	r25, 0x00	; 0
    27ca:	b3 01       	movw	r22, r6
    27cc:	0e 94 24 14 	call	0x2848	; 0x2848 <fputc>
    27d0:	06 c0       	rjmp	.+12     	; 0x27de <vfprintf+0x37c>
    27d2:	80 e3       	ldi	r24, 0x30	; 48
    27d4:	90 e0       	ldi	r25, 0x00	; 0
    27d6:	b3 01       	movw	r22, r6
    27d8:	0e 94 24 14 	call	0x2848	; 0x2848 <fputc>
    27dc:	9a 94       	dec	r9
    27de:	d9 14       	cp	r13, r9
    27e0:	c0 f3       	brcs	.-16     	; 0x27d2 <vfprintf+0x370>
    27e2:	da 94       	dec	r13
    27e4:	f1 01       	movw	r30, r2
    27e6:	ed 0d       	add	r30, r13
    27e8:	f1 1d       	adc	r31, r1
    27ea:	80 81       	ld	r24, Z
    27ec:	90 e0       	ldi	r25, 0x00	; 0
    27ee:	b3 01       	movw	r22, r6
    27f0:	0e 94 24 14 	call	0x2848	; 0x2848 <fputc>
    27f4:	dd 20       	and	r13, r13
    27f6:	a9 f7       	brne	.-22     	; 0x27e2 <vfprintf+0x380>
    27f8:	06 c0       	rjmp	.+12     	; 0x2806 <vfprintf+0x3a4>
    27fa:	80 e2       	ldi	r24, 0x20	; 32
    27fc:	90 e0       	ldi	r25, 0x00	; 0
    27fe:	b3 01       	movw	r22, r6
    2800:	0e 94 24 14 	call	0x2848	; 0x2848 <fputc>
    2804:	ea 94       	dec	r14
    2806:	ee 20       	and	r14, r14
    2808:	c1 f7       	brne	.-16     	; 0x27fa <vfprintf+0x398>
    280a:	43 ce       	rjmp	.-890    	; 0x2492 <vfprintf+0x30>
    280c:	f3 01       	movw	r30, r6
    280e:	66 81       	ldd	r22, Z+6	; 0x06
    2810:	77 81       	ldd	r23, Z+7	; 0x07
    2812:	cb 01       	movw	r24, r22
    2814:	2b 96       	adiw	r28, 0x0b	; 11
    2816:	e2 e1       	ldi	r30, 0x12	; 18
    2818:	0c 94 f2 11 	jmp	0x23e4	; 0x23e4 <__epilogue_restores__>

0000281c <strnlen_P>:
    281c:	fc 01       	movw	r30, r24
    281e:	05 90       	lpm	r0, Z+
    2820:	61 50       	subi	r22, 0x01	; 1
    2822:	70 40       	sbci	r23, 0x00	; 0
    2824:	01 10       	cpse	r0, r1
    2826:	d8 f7       	brcc	.-10     	; 0x281e <strnlen_P+0x2>
    2828:	80 95       	com	r24
    282a:	90 95       	com	r25
    282c:	8e 0f       	add	r24, r30
    282e:	9f 1f       	adc	r25, r31
    2830:	08 95       	ret

00002832 <strnlen>:
    2832:	fc 01       	movw	r30, r24
    2834:	61 50       	subi	r22, 0x01	; 1
    2836:	70 40       	sbci	r23, 0x00	; 0
    2838:	01 90       	ld	r0, Z+
    283a:	01 10       	cpse	r0, r1
    283c:	d8 f7       	brcc	.-10     	; 0x2834 <strnlen+0x2>
    283e:	80 95       	com	r24
    2840:	90 95       	com	r25
    2842:	8e 0f       	add	r24, r30
    2844:	9f 1f       	adc	r25, r31
    2846:	08 95       	ret

00002848 <fputc>:
    2848:	0f 93       	push	r16
    284a:	1f 93       	push	r17
    284c:	cf 93       	push	r28
    284e:	df 93       	push	r29
    2850:	8c 01       	movw	r16, r24
    2852:	eb 01       	movw	r28, r22
    2854:	8b 81       	ldd	r24, Y+3	; 0x03
    2856:	81 ff       	sbrs	r24, 1
    2858:	1b c0       	rjmp	.+54     	; 0x2890 <fputc+0x48>
    285a:	82 ff       	sbrs	r24, 2
    285c:	0d c0       	rjmp	.+26     	; 0x2878 <fputc+0x30>
    285e:	2e 81       	ldd	r18, Y+6	; 0x06
    2860:	3f 81       	ldd	r19, Y+7	; 0x07
    2862:	8c 81       	ldd	r24, Y+4	; 0x04
    2864:	9d 81       	ldd	r25, Y+5	; 0x05
    2866:	28 17       	cp	r18, r24
    2868:	39 07       	cpc	r19, r25
    286a:	64 f4       	brge	.+24     	; 0x2884 <fputc+0x3c>
    286c:	e8 81       	ld	r30, Y
    286e:	f9 81       	ldd	r31, Y+1	; 0x01
    2870:	01 93       	st	Z+, r16
    2872:	f9 83       	std	Y+1, r31	; 0x01
    2874:	e8 83       	st	Y, r30
    2876:	06 c0       	rjmp	.+12     	; 0x2884 <fputc+0x3c>
    2878:	e8 85       	ldd	r30, Y+8	; 0x08
    287a:	f9 85       	ldd	r31, Y+9	; 0x09
    287c:	80 2f       	mov	r24, r16
    287e:	09 95       	icall
    2880:	89 2b       	or	r24, r25
    2882:	31 f4       	brne	.+12     	; 0x2890 <fputc+0x48>
    2884:	8e 81       	ldd	r24, Y+6	; 0x06
    2886:	9f 81       	ldd	r25, Y+7	; 0x07
    2888:	01 96       	adiw	r24, 0x01	; 1
    288a:	9f 83       	std	Y+7, r25	; 0x07
    288c:	8e 83       	std	Y+6, r24	; 0x06
    288e:	02 c0       	rjmp	.+4      	; 0x2894 <fputc+0x4c>
    2890:	0f ef       	ldi	r16, 0xFF	; 255
    2892:	1f ef       	ldi	r17, 0xFF	; 255
    2894:	c8 01       	movw	r24, r16
    2896:	df 91       	pop	r29
    2898:	cf 91       	pop	r28
    289a:	1f 91       	pop	r17
    289c:	0f 91       	pop	r16
    289e:	08 95       	ret

000028a0 <__ultoa_invert>:
    28a0:	fa 01       	movw	r30, r20
    28a2:	aa 27       	eor	r26, r26
    28a4:	28 30       	cpi	r18, 0x08	; 8
    28a6:	51 f1       	breq	.+84     	; 0x28fc <__ultoa_invert+0x5c>
    28a8:	20 31       	cpi	r18, 0x10	; 16
    28aa:	81 f1       	breq	.+96     	; 0x290c <__ultoa_invert+0x6c>
    28ac:	e8 94       	clt
    28ae:	6f 93       	push	r22
    28b0:	6e 7f       	andi	r22, 0xFE	; 254
    28b2:	6e 5f       	subi	r22, 0xFE	; 254
    28b4:	7f 4f       	sbci	r23, 0xFF	; 255
    28b6:	8f 4f       	sbci	r24, 0xFF	; 255
    28b8:	9f 4f       	sbci	r25, 0xFF	; 255
    28ba:	af 4f       	sbci	r26, 0xFF	; 255
    28bc:	b1 e0       	ldi	r27, 0x01	; 1
    28be:	3e d0       	rcall	.+124    	; 0x293c <__ultoa_invert+0x9c>
    28c0:	b4 e0       	ldi	r27, 0x04	; 4
    28c2:	3c d0       	rcall	.+120    	; 0x293c <__ultoa_invert+0x9c>
    28c4:	67 0f       	add	r22, r23
    28c6:	78 1f       	adc	r23, r24
    28c8:	89 1f       	adc	r24, r25
    28ca:	9a 1f       	adc	r25, r26
    28cc:	a1 1d       	adc	r26, r1
    28ce:	68 0f       	add	r22, r24
    28d0:	79 1f       	adc	r23, r25
    28d2:	8a 1f       	adc	r24, r26
    28d4:	91 1d       	adc	r25, r1
    28d6:	a1 1d       	adc	r26, r1
    28d8:	6a 0f       	add	r22, r26
    28da:	71 1d       	adc	r23, r1
    28dc:	81 1d       	adc	r24, r1
    28de:	91 1d       	adc	r25, r1
    28e0:	a1 1d       	adc	r26, r1
    28e2:	20 d0       	rcall	.+64     	; 0x2924 <__ultoa_invert+0x84>
    28e4:	09 f4       	brne	.+2      	; 0x28e8 <__ultoa_invert+0x48>
    28e6:	68 94       	set
    28e8:	3f 91       	pop	r19
    28ea:	2a e0       	ldi	r18, 0x0A	; 10
    28ec:	26 9f       	mul	r18, r22
    28ee:	11 24       	eor	r1, r1
    28f0:	30 19       	sub	r19, r0
    28f2:	30 5d       	subi	r19, 0xD0	; 208
    28f4:	31 93       	st	Z+, r19
    28f6:	de f6       	brtc	.-74     	; 0x28ae <__ultoa_invert+0xe>
    28f8:	cf 01       	movw	r24, r30
    28fa:	08 95       	ret
    28fc:	46 2f       	mov	r20, r22
    28fe:	47 70       	andi	r20, 0x07	; 7
    2900:	40 5d       	subi	r20, 0xD0	; 208
    2902:	41 93       	st	Z+, r20
    2904:	b3 e0       	ldi	r27, 0x03	; 3
    2906:	0f d0       	rcall	.+30     	; 0x2926 <__ultoa_invert+0x86>
    2908:	c9 f7       	brne	.-14     	; 0x28fc <__ultoa_invert+0x5c>
    290a:	f6 cf       	rjmp	.-20     	; 0x28f8 <__ultoa_invert+0x58>
    290c:	46 2f       	mov	r20, r22
    290e:	4f 70       	andi	r20, 0x0F	; 15
    2910:	40 5d       	subi	r20, 0xD0	; 208
    2912:	4a 33       	cpi	r20, 0x3A	; 58
    2914:	18 f0       	brcs	.+6      	; 0x291c <__ultoa_invert+0x7c>
    2916:	49 5d       	subi	r20, 0xD9	; 217
    2918:	31 fd       	sbrc	r19, 1
    291a:	40 52       	subi	r20, 0x20	; 32
    291c:	41 93       	st	Z+, r20
    291e:	02 d0       	rcall	.+4      	; 0x2924 <__ultoa_invert+0x84>
    2920:	a9 f7       	brne	.-22     	; 0x290c <__ultoa_invert+0x6c>
    2922:	ea cf       	rjmp	.-44     	; 0x28f8 <__ultoa_invert+0x58>
    2924:	b4 e0       	ldi	r27, 0x04	; 4
    2926:	a6 95       	lsr	r26
    2928:	97 95       	ror	r25
    292a:	87 95       	ror	r24
    292c:	77 95       	ror	r23
    292e:	67 95       	ror	r22
    2930:	ba 95       	dec	r27
    2932:	c9 f7       	brne	.-14     	; 0x2926 <__ultoa_invert+0x86>
    2934:	00 97       	sbiw	r24, 0x00	; 0
    2936:	61 05       	cpc	r22, r1
    2938:	71 05       	cpc	r23, r1
    293a:	08 95       	ret
    293c:	9b 01       	movw	r18, r22
    293e:	ac 01       	movw	r20, r24
    2940:	0a 2e       	mov	r0, r26
    2942:	06 94       	lsr	r0
    2944:	57 95       	ror	r21
    2946:	47 95       	ror	r20
    2948:	37 95       	ror	r19
    294a:	27 95       	ror	r18
    294c:	ba 95       	dec	r27
    294e:	c9 f7       	brne	.-14     	; 0x2942 <__ultoa_invert+0xa2>
    2950:	62 0f       	add	r22, r18
    2952:	73 1f       	adc	r23, r19
    2954:	84 1f       	adc	r24, r20
    2956:	95 1f       	adc	r25, r21
    2958:	a0 1d       	adc	r26, r0
    295a:	08 95       	ret

0000295c <_exit>:
    295c:	f8 94       	cli

0000295e <__stop_program>:
    295e:	ff cf       	rjmp	.-2      	; 0x295e <__stop_program>
