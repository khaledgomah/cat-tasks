
ping_pong.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003aca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000012a  00800060  00003aca  00003b5e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080018a  0080018a  00003c88  2**0
                  ALLOC
  3 .stab         00002ed4  00000000  00000000  00003c88  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000fa7  00000000  00000000  00006b5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  00007b03  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d3  00000000  00000000  00007c83  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000200f  00000000  00000000  00007e56  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001170  00000000  00000000  00009e65  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001001  00000000  00000000  0000afd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000bfd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c1  00000000  00000000  0000c178  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008ae  00000000  00000000  0000c439  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000cce7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 e5 19 	jmp	0x33ca	; 0x33ca <__vector_1>
       8:	0c 94 38 1a 	jmp	0x3470	; 0x3470 <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ec       	ldi	r30, 0xCA	; 202
      68:	fa e3       	ldi	r31, 0x3A	; 58
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 38       	cpi	r26, 0x8A	; 138
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e8       	ldi	r26, 0x8A	; 138
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 38       	cpi	r26, 0x8C	; 140
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 89 12 	call	0x2512	; 0x2512 <main>
      8a:	0c 94 63 1d 	jmp	0x3ac6	; 0x3ac6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 8b 1a 	jmp	0x3516	; 0x3516 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ad e7       	ldi	r26, 0x7D	; 125
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a7 1a 	jmp	0x354e	; 0x354e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 97 1a 	jmp	0x352e	; 0x352e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 b3 1a 	jmp	0x3566	; 0x3566 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 97 1a 	jmp	0x352e	; 0x352e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 b3 1a 	jmp	0x3566	; 0x3566 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 8b 1a 	jmp	0x3516	; 0x3516 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8d e7       	ldi	r24, 0x7D	; 125
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a7 1a 	jmp	0x354e	; 0x354e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 97 1a 	jmp	0x352e	; 0x352e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 b3 1a 	jmp	0x3566	; 0x3566 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 97 1a 	jmp	0x352e	; 0x352e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 b3 1a 	jmp	0x3566	; 0x3566 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 97 1a 	jmp	0x352e	; 0x352e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 b3 1a 	jmp	0x3566	; 0x3566 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 9b 1a 	jmp	0x3536	; 0x3536 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 b7 1a 	jmp	0x356e	; 0x356e <__epilogue_restores__+0x20>

000007fa <__floatunsisf>:
     7fa:	a8 e0       	ldi	r26, 0x08	; 8
     7fc:	b0 e0       	ldi	r27, 0x00	; 0
     7fe:	e3 e0       	ldi	r30, 0x03	; 3
     800:	f4 e0       	ldi	r31, 0x04	; 4
     802:	0c 94 93 1a 	jmp	0x3526	; 0x3526 <__prologue_saves__+0x10>
     806:	7b 01       	movw	r14, r22
     808:	8c 01       	movw	r16, r24
     80a:	61 15       	cp	r22, r1
     80c:	71 05       	cpc	r23, r1
     80e:	81 05       	cpc	r24, r1
     810:	91 05       	cpc	r25, r1
     812:	19 f4       	brne	.+6      	; 0x81a <__floatunsisf+0x20>
     814:	82 e0       	ldi	r24, 0x02	; 2
     816:	89 83       	std	Y+1, r24	; 0x01
     818:	60 c0       	rjmp	.+192    	; 0x8da <__stack+0x7b>
     81a:	83 e0       	ldi	r24, 0x03	; 3
     81c:	89 83       	std	Y+1, r24	; 0x01
     81e:	8e e1       	ldi	r24, 0x1E	; 30
     820:	c8 2e       	mov	r12, r24
     822:	d1 2c       	mov	r13, r1
     824:	dc 82       	std	Y+4, r13	; 0x04
     826:	cb 82       	std	Y+3, r12	; 0x03
     828:	ed 82       	std	Y+5, r14	; 0x05
     82a:	fe 82       	std	Y+6, r15	; 0x06
     82c:	0f 83       	std	Y+7, r16	; 0x07
     82e:	18 87       	std	Y+8, r17	; 0x08
     830:	c8 01       	movw	r24, r16
     832:	b7 01       	movw	r22, r14
     834:	0e 94 76 04 	call	0x8ec	; 0x8ec <__clzsi2>
     838:	fc 01       	movw	r30, r24
     83a:	31 97       	sbiw	r30, 0x01	; 1
     83c:	f7 ff       	sbrs	r31, 7
     83e:	3b c0       	rjmp	.+118    	; 0x8b6 <__stack+0x57>
     840:	22 27       	eor	r18, r18
     842:	33 27       	eor	r19, r19
     844:	2e 1b       	sub	r18, r30
     846:	3f 0b       	sbc	r19, r31
     848:	57 01       	movw	r10, r14
     84a:	68 01       	movw	r12, r16
     84c:	02 2e       	mov	r0, r18
     84e:	04 c0       	rjmp	.+8      	; 0x858 <__floatunsisf+0x5e>
     850:	d6 94       	lsr	r13
     852:	c7 94       	ror	r12
     854:	b7 94       	ror	r11
     856:	a7 94       	ror	r10
     858:	0a 94       	dec	r0
     85a:	d2 f7       	brpl	.-12     	; 0x850 <__floatunsisf+0x56>
     85c:	40 e0       	ldi	r20, 0x00	; 0
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	a0 e0       	ldi	r26, 0x00	; 0
     86a:	b0 e0       	ldi	r27, 0x00	; 0
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	88 0f       	add	r24, r24
     870:	99 1f       	adc	r25, r25
     872:	aa 1f       	adc	r26, r26
     874:	bb 1f       	adc	r27, r27
     876:	2a 95       	dec	r18
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	01 97       	sbiw	r24, 0x01	; 1
     87c:	a1 09       	sbc	r26, r1
     87e:	b1 09       	sbc	r27, r1
     880:	8e 21       	and	r24, r14
     882:	9f 21       	and	r25, r15
     884:	a0 23       	and	r26, r16
     886:	b1 23       	and	r27, r17
     888:	00 97       	sbiw	r24, 0x00	; 0
     88a:	a1 05       	cpc	r26, r1
     88c:	b1 05       	cpc	r27, r1
     88e:	21 f0       	breq	.+8      	; 0x898 <__stack+0x39>
     890:	41 e0       	ldi	r20, 0x01	; 1
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	4a 29       	or	r20, r10
     89a:	5b 29       	or	r21, r11
     89c:	6c 29       	or	r22, r12
     89e:	7d 29       	or	r23, r13
     8a0:	4d 83       	std	Y+5, r20	; 0x05
     8a2:	5e 83       	std	Y+6, r21	; 0x06
     8a4:	6f 83       	std	Y+7, r22	; 0x07
     8a6:	78 87       	std	Y+8, r23	; 0x08
     8a8:	8e e1       	ldi	r24, 0x1E	; 30
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	8e 1b       	sub	r24, r30
     8ae:	9f 0b       	sbc	r25, r31
     8b0:	9c 83       	std	Y+4, r25	; 0x04
     8b2:	8b 83       	std	Y+3, r24	; 0x03
     8b4:	12 c0       	rjmp	.+36     	; 0x8da <__stack+0x7b>
     8b6:	30 97       	sbiw	r30, 0x00	; 0
     8b8:	81 f0       	breq	.+32     	; 0x8da <__stack+0x7b>
     8ba:	0e 2e       	mov	r0, r30
     8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <__stack+0x67>
     8be:	ee 0c       	add	r14, r14
     8c0:	ff 1c       	adc	r15, r15
     8c2:	00 1f       	adc	r16, r16
     8c4:	11 1f       	adc	r17, r17
     8c6:	0a 94       	dec	r0
     8c8:	d2 f7       	brpl	.-12     	; 0x8be <__stack+0x5f>
     8ca:	ed 82       	std	Y+5, r14	; 0x05
     8cc:	fe 82       	std	Y+6, r15	; 0x06
     8ce:	0f 83       	std	Y+7, r16	; 0x07
     8d0:	18 87       	std	Y+8, r17	; 0x08
     8d2:	ce 1a       	sub	r12, r30
     8d4:	df 0a       	sbc	r13, r31
     8d6:	dc 82       	std	Y+4, r13	; 0x04
     8d8:	cb 82       	std	Y+3, r12	; 0x03
     8da:	1a 82       	std	Y+2, r1	; 0x02
     8dc:	ce 01       	movw	r24, r28
     8de:	01 96       	adiw	r24, 0x01	; 1
     8e0:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     8e4:	28 96       	adiw	r28, 0x08	; 8
     8e6:	ea e0       	ldi	r30, 0x0A	; 10
     8e8:	0c 94 af 1a 	jmp	0x355e	; 0x355e <__epilogue_restores__+0x10>

000008ec <__clzsi2>:
     8ec:	ef 92       	push	r14
     8ee:	ff 92       	push	r15
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
     8f4:	7b 01       	movw	r14, r22
     8f6:	8c 01       	movw	r16, r24
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	e8 16       	cp	r14, r24
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	f8 06       	cpc	r15, r24
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	08 07       	cpc	r16, r24
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	18 07       	cpc	r17, r24
     908:	88 f4       	brcc	.+34     	; 0x92c <__clzsi2+0x40>
     90a:	8f ef       	ldi	r24, 0xFF	; 255
     90c:	e8 16       	cp	r14, r24
     90e:	f1 04       	cpc	r15, r1
     910:	01 05       	cpc	r16, r1
     912:	11 05       	cpc	r17, r1
     914:	31 f0       	breq	.+12     	; 0x922 <__clzsi2+0x36>
     916:	28 f0       	brcs	.+10     	; 0x922 <__clzsi2+0x36>
     918:	88 e0       	ldi	r24, 0x08	; 8
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	a0 e0       	ldi	r26, 0x00	; 0
     91e:	b0 e0       	ldi	r27, 0x00	; 0
     920:	17 c0       	rjmp	.+46     	; 0x950 <__clzsi2+0x64>
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	a0 e0       	ldi	r26, 0x00	; 0
     928:	b0 e0       	ldi	r27, 0x00	; 0
     92a:	12 c0       	rjmp	.+36     	; 0x950 <__clzsi2+0x64>
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	e8 16       	cp	r14, r24
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	f8 06       	cpc	r15, r24
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	08 07       	cpc	r16, r24
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	18 07       	cpc	r17, r24
     93c:	28 f0       	brcs	.+10     	; 0x948 <__clzsi2+0x5c>
     93e:	88 e1       	ldi	r24, 0x18	; 24
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	04 c0       	rjmp	.+8      	; 0x950 <__clzsi2+0x64>
     948:	80 e1       	ldi	r24, 0x10	; 16
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	a0 e0       	ldi	r26, 0x00	; 0
     94e:	b0 e0       	ldi	r27, 0x00	; 0
     950:	20 e2       	ldi	r18, 0x20	; 32
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	28 1b       	sub	r18, r24
     95a:	39 0b       	sbc	r19, r25
     95c:	4a 0b       	sbc	r20, r26
     95e:	5b 0b       	sbc	r21, r27
     960:	04 c0       	rjmp	.+8      	; 0x96a <__clzsi2+0x7e>
     962:	16 95       	lsr	r17
     964:	07 95       	ror	r16
     966:	f7 94       	ror	r15
     968:	e7 94       	ror	r14
     96a:	8a 95       	dec	r24
     96c:	d2 f7       	brpl	.-12     	; 0x962 <__clzsi2+0x76>
     96e:	f7 01       	movw	r30, r14
     970:	eb 57       	subi	r30, 0x7B	; 123
     972:	ff 4f       	sbci	r31, 0xFF	; 255
     974:	80 81       	ld	r24, Z
     976:	28 1b       	sub	r18, r24
     978:	31 09       	sbc	r19, r1
     97a:	41 09       	sbc	r20, r1
     97c:	51 09       	sbc	r21, r1
     97e:	c9 01       	movw	r24, r18
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	08 95       	ret

0000098a <__pack_f>:
     98a:	df 92       	push	r13
     98c:	ef 92       	push	r14
     98e:	ff 92       	push	r15
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	fc 01       	movw	r30, r24
     996:	e4 80       	ldd	r14, Z+4	; 0x04
     998:	f5 80       	ldd	r15, Z+5	; 0x05
     99a:	06 81       	ldd	r16, Z+6	; 0x06
     99c:	17 81       	ldd	r17, Z+7	; 0x07
     99e:	d1 80       	ldd	r13, Z+1	; 0x01
     9a0:	80 81       	ld	r24, Z
     9a2:	82 30       	cpi	r24, 0x02	; 2
     9a4:	48 f4       	brcc	.+18     	; 0x9b8 <__pack_f+0x2e>
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	a0 e1       	ldi	r26, 0x10	; 16
     9ac:	b0 e0       	ldi	r27, 0x00	; 0
     9ae:	e8 2a       	or	r14, r24
     9b0:	f9 2a       	or	r15, r25
     9b2:	0a 2b       	or	r16, r26
     9b4:	1b 2b       	or	r17, r27
     9b6:	a5 c0       	rjmp	.+330    	; 0xb02 <__pack_f+0x178>
     9b8:	84 30       	cpi	r24, 0x04	; 4
     9ba:	09 f4       	brne	.+2      	; 0x9be <__pack_f+0x34>
     9bc:	9f c0       	rjmp	.+318    	; 0xafc <__pack_f+0x172>
     9be:	82 30       	cpi	r24, 0x02	; 2
     9c0:	21 f4       	brne	.+8      	; 0x9ca <__pack_f+0x40>
     9c2:	ee 24       	eor	r14, r14
     9c4:	ff 24       	eor	r15, r15
     9c6:	87 01       	movw	r16, r14
     9c8:	05 c0       	rjmp	.+10     	; 0x9d4 <__pack_f+0x4a>
     9ca:	e1 14       	cp	r14, r1
     9cc:	f1 04       	cpc	r15, r1
     9ce:	01 05       	cpc	r16, r1
     9d0:	11 05       	cpc	r17, r1
     9d2:	19 f4       	brne	.+6      	; 0x9da <__pack_f+0x50>
     9d4:	e0 e0       	ldi	r30, 0x00	; 0
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	96 c0       	rjmp	.+300    	; 0xb06 <__pack_f+0x17c>
     9da:	62 81       	ldd	r22, Z+2	; 0x02
     9dc:	73 81       	ldd	r23, Z+3	; 0x03
     9de:	9f ef       	ldi	r25, 0xFF	; 255
     9e0:	62 38       	cpi	r22, 0x82	; 130
     9e2:	79 07       	cpc	r23, r25
     9e4:	0c f0       	brlt	.+2      	; 0x9e8 <__pack_f+0x5e>
     9e6:	5b c0       	rjmp	.+182    	; 0xa9e <__pack_f+0x114>
     9e8:	22 e8       	ldi	r18, 0x82	; 130
     9ea:	3f ef       	ldi	r19, 0xFF	; 255
     9ec:	26 1b       	sub	r18, r22
     9ee:	37 0b       	sbc	r19, r23
     9f0:	2a 31       	cpi	r18, 0x1A	; 26
     9f2:	31 05       	cpc	r19, r1
     9f4:	2c f0       	brlt	.+10     	; 0xa00 <__pack_f+0x76>
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	2a c0       	rjmp	.+84     	; 0xa54 <__pack_f+0xca>
     a00:	b8 01       	movw	r22, r16
     a02:	a7 01       	movw	r20, r14
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__pack_f+0x86>
     a08:	76 95       	lsr	r23
     a0a:	67 95       	ror	r22
     a0c:	57 95       	ror	r21
     a0e:	47 95       	ror	r20
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__pack_f+0x7e>
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	a0 e0       	ldi	r26, 0x00	; 0
     a1a:	b0 e0       	ldi	r27, 0x00	; 0
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <__pack_f+0x9c>
     a1e:	88 0f       	add	r24, r24
     a20:	99 1f       	adc	r25, r25
     a22:	aa 1f       	adc	r26, r26
     a24:	bb 1f       	adc	r27, r27
     a26:	2a 95       	dec	r18
     a28:	d2 f7       	brpl	.-12     	; 0xa1e <__pack_f+0x94>
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	a1 09       	sbc	r26, r1
     a2e:	b1 09       	sbc	r27, r1
     a30:	8e 21       	and	r24, r14
     a32:	9f 21       	and	r25, r15
     a34:	a0 23       	and	r26, r16
     a36:	b1 23       	and	r27, r17
     a38:	00 97       	sbiw	r24, 0x00	; 0
     a3a:	a1 05       	cpc	r26, r1
     a3c:	b1 05       	cpc	r27, r1
     a3e:	21 f0       	breq	.+8      	; 0xa48 <__pack_f+0xbe>
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	9a 01       	movw	r18, r20
     a4a:	ab 01       	movw	r20, r22
     a4c:	28 2b       	or	r18, r24
     a4e:	39 2b       	or	r19, r25
     a50:	4a 2b       	or	r20, r26
     a52:	5b 2b       	or	r21, r27
     a54:	da 01       	movw	r26, r20
     a56:	c9 01       	movw	r24, r18
     a58:	8f 77       	andi	r24, 0x7F	; 127
     a5a:	90 70       	andi	r25, 0x00	; 0
     a5c:	a0 70       	andi	r26, 0x00	; 0
     a5e:	b0 70       	andi	r27, 0x00	; 0
     a60:	80 34       	cpi	r24, 0x40	; 64
     a62:	91 05       	cpc	r25, r1
     a64:	a1 05       	cpc	r26, r1
     a66:	b1 05       	cpc	r27, r1
     a68:	39 f4       	brne	.+14     	; 0xa78 <__pack_f+0xee>
     a6a:	27 ff       	sbrs	r18, 7
     a6c:	09 c0       	rjmp	.+18     	; 0xa80 <__pack_f+0xf6>
     a6e:	20 5c       	subi	r18, 0xC0	; 192
     a70:	3f 4f       	sbci	r19, 0xFF	; 255
     a72:	4f 4f       	sbci	r20, 0xFF	; 255
     a74:	5f 4f       	sbci	r21, 0xFF	; 255
     a76:	04 c0       	rjmp	.+8      	; 0xa80 <__pack_f+0xf6>
     a78:	21 5c       	subi	r18, 0xC1	; 193
     a7a:	3f 4f       	sbci	r19, 0xFF	; 255
     a7c:	4f 4f       	sbci	r20, 0xFF	; 255
     a7e:	5f 4f       	sbci	r21, 0xFF	; 255
     a80:	e0 e0       	ldi	r30, 0x00	; 0
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	20 30       	cpi	r18, 0x00	; 0
     a86:	a0 e0       	ldi	r26, 0x00	; 0
     a88:	3a 07       	cpc	r19, r26
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	4a 07       	cpc	r20, r26
     a8e:	a0 e4       	ldi	r26, 0x40	; 64
     a90:	5a 07       	cpc	r21, r26
     a92:	10 f0       	brcs	.+4      	; 0xa98 <__pack_f+0x10e>
     a94:	e1 e0       	ldi	r30, 0x01	; 1
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	79 01       	movw	r14, r18
     a9a:	8a 01       	movw	r16, r20
     a9c:	27 c0       	rjmp	.+78     	; 0xaec <__pack_f+0x162>
     a9e:	60 38       	cpi	r22, 0x80	; 128
     aa0:	71 05       	cpc	r23, r1
     aa2:	64 f5       	brge	.+88     	; 0xafc <__pack_f+0x172>
     aa4:	fb 01       	movw	r30, r22
     aa6:	e1 58       	subi	r30, 0x81	; 129
     aa8:	ff 4f       	sbci	r31, 0xFF	; 255
     aaa:	d8 01       	movw	r26, r16
     aac:	c7 01       	movw	r24, r14
     aae:	8f 77       	andi	r24, 0x7F	; 127
     ab0:	90 70       	andi	r25, 0x00	; 0
     ab2:	a0 70       	andi	r26, 0x00	; 0
     ab4:	b0 70       	andi	r27, 0x00	; 0
     ab6:	80 34       	cpi	r24, 0x40	; 64
     ab8:	91 05       	cpc	r25, r1
     aba:	a1 05       	cpc	r26, r1
     abc:	b1 05       	cpc	r27, r1
     abe:	39 f4       	brne	.+14     	; 0xace <__pack_f+0x144>
     ac0:	e7 fe       	sbrs	r14, 7
     ac2:	0d c0       	rjmp	.+26     	; 0xade <__pack_f+0x154>
     ac4:	80 e4       	ldi	r24, 0x40	; 64
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	a0 e0       	ldi	r26, 0x00	; 0
     aca:	b0 e0       	ldi	r27, 0x00	; 0
     acc:	04 c0       	rjmp	.+8      	; 0xad6 <__pack_f+0x14c>
     ace:	8f e3       	ldi	r24, 0x3F	; 63
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	a0 e0       	ldi	r26, 0x00	; 0
     ad4:	b0 e0       	ldi	r27, 0x00	; 0
     ad6:	e8 0e       	add	r14, r24
     ad8:	f9 1e       	adc	r15, r25
     ada:	0a 1f       	adc	r16, r26
     adc:	1b 1f       	adc	r17, r27
     ade:	17 ff       	sbrs	r17, 7
     ae0:	05 c0       	rjmp	.+10     	; 0xaec <__pack_f+0x162>
     ae2:	16 95       	lsr	r17
     ae4:	07 95       	ror	r16
     ae6:	f7 94       	ror	r15
     ae8:	e7 94       	ror	r14
     aea:	31 96       	adiw	r30, 0x01	; 1
     aec:	87 e0       	ldi	r24, 0x07	; 7
     aee:	16 95       	lsr	r17
     af0:	07 95       	ror	r16
     af2:	f7 94       	ror	r15
     af4:	e7 94       	ror	r14
     af6:	8a 95       	dec	r24
     af8:	d1 f7       	brne	.-12     	; 0xaee <__pack_f+0x164>
     afa:	05 c0       	rjmp	.+10     	; 0xb06 <__pack_f+0x17c>
     afc:	ee 24       	eor	r14, r14
     afe:	ff 24       	eor	r15, r15
     b00:	87 01       	movw	r16, r14
     b02:	ef ef       	ldi	r30, 0xFF	; 255
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	6e 2f       	mov	r22, r30
     b08:	67 95       	ror	r22
     b0a:	66 27       	eor	r22, r22
     b0c:	67 95       	ror	r22
     b0e:	90 2f       	mov	r25, r16
     b10:	9f 77       	andi	r25, 0x7F	; 127
     b12:	d7 94       	ror	r13
     b14:	dd 24       	eor	r13, r13
     b16:	d7 94       	ror	r13
     b18:	8e 2f       	mov	r24, r30
     b1a:	86 95       	lsr	r24
     b1c:	49 2f       	mov	r20, r25
     b1e:	46 2b       	or	r20, r22
     b20:	58 2f       	mov	r21, r24
     b22:	5d 29       	or	r21, r13
     b24:	b7 01       	movw	r22, r14
     b26:	ca 01       	movw	r24, r20
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	ff 90       	pop	r15
     b2e:	ef 90       	pop	r14
     b30:	df 90       	pop	r13
     b32:	08 95       	ret

00000b34 <__unpack_f>:
     b34:	fc 01       	movw	r30, r24
     b36:	db 01       	movw	r26, r22
     b38:	40 81       	ld	r20, Z
     b3a:	51 81       	ldd	r21, Z+1	; 0x01
     b3c:	22 81       	ldd	r18, Z+2	; 0x02
     b3e:	62 2f       	mov	r22, r18
     b40:	6f 77       	andi	r22, 0x7F	; 127
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	22 1f       	adc	r18, r18
     b46:	22 27       	eor	r18, r18
     b48:	22 1f       	adc	r18, r18
     b4a:	93 81       	ldd	r25, Z+3	; 0x03
     b4c:	89 2f       	mov	r24, r25
     b4e:	88 0f       	add	r24, r24
     b50:	82 2b       	or	r24, r18
     b52:	28 2f       	mov	r18, r24
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	99 1f       	adc	r25, r25
     b58:	99 27       	eor	r25, r25
     b5a:	99 1f       	adc	r25, r25
     b5c:	11 96       	adiw	r26, 0x01	; 1
     b5e:	9c 93       	st	X, r25
     b60:	11 97       	sbiw	r26, 0x01	; 1
     b62:	21 15       	cp	r18, r1
     b64:	31 05       	cpc	r19, r1
     b66:	a9 f5       	brne	.+106    	; 0xbd2 <__unpack_f+0x9e>
     b68:	41 15       	cp	r20, r1
     b6a:	51 05       	cpc	r21, r1
     b6c:	61 05       	cpc	r22, r1
     b6e:	71 05       	cpc	r23, r1
     b70:	11 f4       	brne	.+4      	; 0xb76 <__unpack_f+0x42>
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	37 c0       	rjmp	.+110    	; 0xbe4 <__unpack_f+0xb0>
     b76:	82 e8       	ldi	r24, 0x82	; 130
     b78:	9f ef       	ldi	r25, 0xFF	; 255
     b7a:	13 96       	adiw	r26, 0x03	; 3
     b7c:	9c 93       	st	X, r25
     b7e:	8e 93       	st	-X, r24
     b80:	12 97       	sbiw	r26, 0x02	; 2
     b82:	9a 01       	movw	r18, r20
     b84:	ab 01       	movw	r20, r22
     b86:	67 e0       	ldi	r22, 0x07	; 7
     b88:	22 0f       	add	r18, r18
     b8a:	33 1f       	adc	r19, r19
     b8c:	44 1f       	adc	r20, r20
     b8e:	55 1f       	adc	r21, r21
     b90:	6a 95       	dec	r22
     b92:	d1 f7       	brne	.-12     	; 0xb88 <__unpack_f+0x54>
     b94:	83 e0       	ldi	r24, 0x03	; 3
     b96:	8c 93       	st	X, r24
     b98:	0d c0       	rjmp	.+26     	; 0xbb4 <__unpack_f+0x80>
     b9a:	22 0f       	add	r18, r18
     b9c:	33 1f       	adc	r19, r19
     b9e:	44 1f       	adc	r20, r20
     ba0:	55 1f       	adc	r21, r21
     ba2:	12 96       	adiw	r26, 0x02	; 2
     ba4:	8d 91       	ld	r24, X+
     ba6:	9c 91       	ld	r25, X
     ba8:	13 97       	sbiw	r26, 0x03	; 3
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	13 96       	adiw	r26, 0x03	; 3
     bae:	9c 93       	st	X, r25
     bb0:	8e 93       	st	-X, r24
     bb2:	12 97       	sbiw	r26, 0x02	; 2
     bb4:	20 30       	cpi	r18, 0x00	; 0
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	38 07       	cpc	r19, r24
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	48 07       	cpc	r20, r24
     bbe:	80 e4       	ldi	r24, 0x40	; 64
     bc0:	58 07       	cpc	r21, r24
     bc2:	58 f3       	brcs	.-42     	; 0xb9a <__unpack_f+0x66>
     bc4:	14 96       	adiw	r26, 0x04	; 4
     bc6:	2d 93       	st	X+, r18
     bc8:	3d 93       	st	X+, r19
     bca:	4d 93       	st	X+, r20
     bcc:	5c 93       	st	X, r21
     bce:	17 97       	sbiw	r26, 0x07	; 7
     bd0:	08 95       	ret
     bd2:	2f 3f       	cpi	r18, 0xFF	; 255
     bd4:	31 05       	cpc	r19, r1
     bd6:	79 f4       	brne	.+30     	; 0xbf6 <__unpack_f+0xc2>
     bd8:	41 15       	cp	r20, r1
     bda:	51 05       	cpc	r21, r1
     bdc:	61 05       	cpc	r22, r1
     bde:	71 05       	cpc	r23, r1
     be0:	19 f4       	brne	.+6      	; 0xbe8 <__unpack_f+0xb4>
     be2:	84 e0       	ldi	r24, 0x04	; 4
     be4:	8c 93       	st	X, r24
     be6:	08 95       	ret
     be8:	64 ff       	sbrs	r22, 4
     bea:	03 c0       	rjmp	.+6      	; 0xbf2 <__unpack_f+0xbe>
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	8c 93       	st	X, r24
     bf0:	12 c0       	rjmp	.+36     	; 0xc16 <__unpack_f+0xe2>
     bf2:	1c 92       	st	X, r1
     bf4:	10 c0       	rjmp	.+32     	; 0xc16 <__unpack_f+0xe2>
     bf6:	2f 57       	subi	r18, 0x7F	; 127
     bf8:	30 40       	sbci	r19, 0x00	; 0
     bfa:	13 96       	adiw	r26, 0x03	; 3
     bfc:	3c 93       	st	X, r19
     bfe:	2e 93       	st	-X, r18
     c00:	12 97       	sbiw	r26, 0x02	; 2
     c02:	83 e0       	ldi	r24, 0x03	; 3
     c04:	8c 93       	st	X, r24
     c06:	87 e0       	ldi	r24, 0x07	; 7
     c08:	44 0f       	add	r20, r20
     c0a:	55 1f       	adc	r21, r21
     c0c:	66 1f       	adc	r22, r22
     c0e:	77 1f       	adc	r23, r23
     c10:	8a 95       	dec	r24
     c12:	d1 f7       	brne	.-12     	; 0xc08 <__unpack_f+0xd4>
     c14:	70 64       	ori	r23, 0x40	; 64
     c16:	14 96       	adiw	r26, 0x04	; 4
     c18:	4d 93       	st	X+, r20
     c1a:	5d 93       	st	X+, r21
     c1c:	6d 93       	st	X+, r22
     c1e:	7c 93       	st	X, r23
     c20:	17 97       	sbiw	r26, 0x07	; 7
     c22:	08 95       	ret

00000c24 <__fpcmp_parts_f>:
     c24:	1f 93       	push	r17
     c26:	dc 01       	movw	r26, r24
     c28:	fb 01       	movw	r30, r22
     c2a:	9c 91       	ld	r25, X
     c2c:	92 30       	cpi	r25, 0x02	; 2
     c2e:	08 f4       	brcc	.+2      	; 0xc32 <__fpcmp_parts_f+0xe>
     c30:	47 c0       	rjmp	.+142    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c32:	80 81       	ld	r24, Z
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	08 f4       	brcc	.+2      	; 0xc3a <__fpcmp_parts_f+0x16>
     c38:	43 c0       	rjmp	.+134    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c3a:	94 30       	cpi	r25, 0x04	; 4
     c3c:	51 f4       	brne	.+20     	; 0xc52 <__fpcmp_parts_f+0x2e>
     c3e:	11 96       	adiw	r26, 0x01	; 1
     c40:	1c 91       	ld	r17, X
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	99 f5       	brne	.+102    	; 0xcac <__fpcmp_parts_f+0x88>
     c46:	81 81       	ldd	r24, Z+1	; 0x01
     c48:	68 2f       	mov	r22, r24
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	61 1b       	sub	r22, r17
     c4e:	71 09       	sbc	r23, r1
     c50:	3f c0       	rjmp	.+126    	; 0xcd0 <__fpcmp_parts_f+0xac>
     c52:	84 30       	cpi	r24, 0x04	; 4
     c54:	21 f0       	breq	.+8      	; 0xc5e <__fpcmp_parts_f+0x3a>
     c56:	92 30       	cpi	r25, 0x02	; 2
     c58:	31 f4       	brne	.+12     	; 0xc66 <__fpcmp_parts_f+0x42>
     c5a:	82 30       	cpi	r24, 0x02	; 2
     c5c:	b9 f1       	breq	.+110    	; 0xccc <__fpcmp_parts_f+0xa8>
     c5e:	81 81       	ldd	r24, Z+1	; 0x01
     c60:	88 23       	and	r24, r24
     c62:	89 f1       	breq	.+98     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     c64:	2d c0       	rjmp	.+90     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c66:	11 96       	adiw	r26, 0x01	; 1
     c68:	1c 91       	ld	r17, X
     c6a:	11 97       	sbiw	r26, 0x01	; 1
     c6c:	82 30       	cpi	r24, 0x02	; 2
     c6e:	f1 f0       	breq	.+60     	; 0xcac <__fpcmp_parts_f+0x88>
     c70:	81 81       	ldd	r24, Z+1	; 0x01
     c72:	18 17       	cp	r17, r24
     c74:	d9 f4       	brne	.+54     	; 0xcac <__fpcmp_parts_f+0x88>
     c76:	12 96       	adiw	r26, 0x02	; 2
     c78:	2d 91       	ld	r18, X+
     c7a:	3c 91       	ld	r19, X
     c7c:	13 97       	sbiw	r26, 0x03	; 3
     c7e:	82 81       	ldd	r24, Z+2	; 0x02
     c80:	93 81       	ldd	r25, Z+3	; 0x03
     c82:	82 17       	cp	r24, r18
     c84:	93 07       	cpc	r25, r19
     c86:	94 f0       	brlt	.+36     	; 0xcac <__fpcmp_parts_f+0x88>
     c88:	28 17       	cp	r18, r24
     c8a:	39 07       	cpc	r19, r25
     c8c:	bc f0       	brlt	.+46     	; 0xcbc <__fpcmp_parts_f+0x98>
     c8e:	14 96       	adiw	r26, 0x04	; 4
     c90:	8d 91       	ld	r24, X+
     c92:	9d 91       	ld	r25, X+
     c94:	0d 90       	ld	r0, X+
     c96:	bc 91       	ld	r27, X
     c98:	a0 2d       	mov	r26, r0
     c9a:	24 81       	ldd	r18, Z+4	; 0x04
     c9c:	35 81       	ldd	r19, Z+5	; 0x05
     c9e:	46 81       	ldd	r20, Z+6	; 0x06
     ca0:	57 81       	ldd	r21, Z+7	; 0x07
     ca2:	28 17       	cp	r18, r24
     ca4:	39 07       	cpc	r19, r25
     ca6:	4a 07       	cpc	r20, r26
     ca8:	5b 07       	cpc	r21, r27
     caa:	18 f4       	brcc	.+6      	; 0xcb2 <__fpcmp_parts_f+0x8e>
     cac:	11 23       	and	r17, r17
     cae:	41 f0       	breq	.+16     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     cb0:	0a c0       	rjmp	.+20     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cb2:	82 17       	cp	r24, r18
     cb4:	93 07       	cpc	r25, r19
     cb6:	a4 07       	cpc	r26, r20
     cb8:	b5 07       	cpc	r27, r21
     cba:	40 f4       	brcc	.+16     	; 0xccc <__fpcmp_parts_f+0xa8>
     cbc:	11 23       	and	r17, r17
     cbe:	19 f0       	breq	.+6      	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cc0:	61 e0       	ldi	r22, 0x01	; 1
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	05 c0       	rjmp	.+10     	; 0xcd0 <__fpcmp_parts_f+0xac>
     cc6:	6f ef       	ldi	r22, 0xFF	; 255
     cc8:	7f ef       	ldi	r23, 0xFF	; 255
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <__fpcmp_parts_f+0xac>
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	cb 01       	movw	r24, r22
     cd2:	1f 91       	pop	r17
     cd4:	08 95       	ret

00000cd6 <disableGIE>:

#include  "EXINT_priv.h"


void disableGIE(void)
{
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
	SREG &=~(HIGH<<SREG_INT);//clear bit
     cde:	af e5       	ldi	r26, 0x5F	; 95
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	ef e5       	ldi	r30, 0x5F	; 95
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	8f 77       	andi	r24, 0x7F	; 127
     cea:	8c 93       	st	X, r24
}
     cec:	cf 91       	pop	r28
     cee:	df 91       	pop	r29
     cf0:	08 95       	ret

00000cf2 <enableGIE>:

void enableGIE(void)
{
     cf2:	df 93       	push	r29
     cf4:	cf 93       	push	r28
     cf6:	cd b7       	in	r28, 0x3d	; 61
     cf8:	de b7       	in	r29, 0x3e	; 62
	SREG |=(HIGH<<SREG_INT);//set bit
     cfa:	af e5       	ldi	r26, 0x5F	; 95
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	ef e5       	ldi	r30, 0x5F	; 95
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	80 68       	ori	r24, 0x80	; 128
     d06:	8c 93       	st	X, r24
}
     d08:	cf 91       	pop	r28
     d0a:	df 91       	pop	r29
     d0c:	08 95       	ret

00000d0e <risingAdge>:


void risingAdge(u8 interruptNum)
{
     d0e:	df 93       	push	r29
     d10:	cf 93       	push	r28
     d12:	0f 92       	push	r0
     d14:	cd b7       	in	r28, 0x3d	; 61
     d16:	de b7       	in	r29, 0x3e	; 62
     d18:	89 83       	std	Y+1, r24	; 0x01
	if (interruptNum == INT0)
     d1a:	89 81       	ldd	r24, Y+1	; 0x01
     d1c:	8a 30       	cpi	r24, 0x0A	; 10
     d1e:	79 f4       	brne	.+30     	; 0xd3e <risingAdge+0x30>
	{
		MCUCR |=(HIGH<<MCUCR_ISC00);
     d20:	a5 e5       	ldi	r26, 0x55	; 85
     d22:	b0 e0       	ldi	r27, 0x00	; 0
     d24:	e5 e5       	ldi	r30, 0x55	; 85
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	80 81       	ld	r24, Z
     d2a:	81 60       	ori	r24, 0x01	; 1
     d2c:	8c 93       	st	X, r24
		MCUCR |=(HIGH<<MCUCR_ISC01);
     d2e:	a5 e5       	ldi	r26, 0x55	; 85
     d30:	b0 e0       	ldi	r27, 0x00	; 0
     d32:	e5 e5       	ldi	r30, 0x55	; 85
     d34:	f0 e0       	ldi	r31, 0x00	; 0
     d36:	80 81       	ld	r24, Z
     d38:	82 60       	ori	r24, 0x02	; 2
     d3a:	8c 93       	st	X, r24
     d3c:	1c c0       	rjmp	.+56     	; 0xd76 <risingAdge+0x68>
	}
	else if(interruptNum == INT1)
     d3e:	89 81       	ldd	r24, Y+1	; 0x01
     d40:	84 31       	cpi	r24, 0x14	; 20
     d42:	79 f4       	brne	.+30     	; 0xd62 <risingAdge+0x54>
	{
		MCUCR |=(HIGH<<MCUCR_ISC10);
     d44:	a5 e5       	ldi	r26, 0x55	; 85
     d46:	b0 e0       	ldi	r27, 0x00	; 0
     d48:	e5 e5       	ldi	r30, 0x55	; 85
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	80 81       	ld	r24, Z
     d4e:	84 60       	ori	r24, 0x04	; 4
     d50:	8c 93       	st	X, r24
		MCUCR |=(HIGH<<MCUCR_ISC11);
     d52:	a5 e5       	ldi	r26, 0x55	; 85
     d54:	b0 e0       	ldi	r27, 0x00	; 0
     d56:	e5 e5       	ldi	r30, 0x55	; 85
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	80 81       	ld	r24, Z
     d5c:	88 60       	ori	r24, 0x08	; 8
     d5e:	8c 93       	st	X, r24
     d60:	0a c0       	rjmp	.+20     	; 0xd76 <risingAdge+0x68>
	}
	else if(interruptNum == INT2)
     d62:	89 81       	ldd	r24, Y+1	; 0x01
     d64:	8e 31       	cpi	r24, 0x1E	; 30
     d66:	39 f4       	brne	.+14     	; 0xd76 <risingAdge+0x68>
	{
		MCUCSR |=(HIGH<<MCUCSR_ISC2);
     d68:	a4 e5       	ldi	r26, 0x54	; 84
     d6a:	b0 e0       	ldi	r27, 0x00	; 0
     d6c:	e4 e5       	ldi	r30, 0x54	; 84
     d6e:	f0 e0       	ldi	r31, 0x00	; 0
     d70:	80 81       	ld	r24, Z
     d72:	80 64       	ori	r24, 0x40	; 64
     d74:	8c 93       	st	X, r24
	}
}
     d76:	0f 90       	pop	r0
     d78:	cf 91       	pop	r28
     d7a:	df 91       	pop	r29
     d7c:	08 95       	ret

00000d7e <changeLevel>:

void changeLevel(u8 interruptNum)
{
     d7e:	df 93       	push	r29
     d80:	cf 93       	push	r28
     d82:	0f 92       	push	r0
     d84:	cd b7       	in	r28, 0x3d	; 61
     d86:	de b7       	in	r29, 0x3e	; 62
     d88:	89 83       	std	Y+1, r24	; 0x01
	if (interruptNum == INT0)
     d8a:	89 81       	ldd	r24, Y+1	; 0x01
     d8c:	8a 30       	cpi	r24, 0x0A	; 10
     d8e:	79 f4       	brne	.+30     	; 0xdae <changeLevel+0x30>
	{
		MCUCR |=(HIGH<<MCUCR_ISC00);
     d90:	a5 e5       	ldi	r26, 0x55	; 85
     d92:	b0 e0       	ldi	r27, 0x00	; 0
     d94:	e5 e5       	ldi	r30, 0x55	; 85
     d96:	f0 e0       	ldi	r31, 0x00	; 0
     d98:	80 81       	ld	r24, Z
     d9a:	81 60       	ori	r24, 0x01	; 1
     d9c:	8c 93       	st	X, r24
		MCUCR &=~(HIGH<<MCUCR_ISC01);
     d9e:	a5 e5       	ldi	r26, 0x55	; 85
     da0:	b0 e0       	ldi	r27, 0x00	; 0
     da2:	e5 e5       	ldi	r30, 0x55	; 85
     da4:	f0 e0       	ldi	r31, 0x00	; 0
     da6:	80 81       	ld	r24, Z
     da8:	8d 7f       	andi	r24, 0xFD	; 253
     daa:	8c 93       	st	X, r24
     dac:	11 c0       	rjmp	.+34     	; 0xdd0 <changeLevel+0x52>
	}
	else if(interruptNum == INT1)
     dae:	89 81       	ldd	r24, Y+1	; 0x01
     db0:	84 31       	cpi	r24, 0x14	; 20
     db2:	71 f4       	brne	.+28     	; 0xdd0 <changeLevel+0x52>
	{
		MCUCR |=(HIGH<<MCUCR_ISC10);
     db4:	a5 e5       	ldi	r26, 0x55	; 85
     db6:	b0 e0       	ldi	r27, 0x00	; 0
     db8:	e5 e5       	ldi	r30, 0x55	; 85
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	80 81       	ld	r24, Z
     dbe:	84 60       	ori	r24, 0x04	; 4
     dc0:	8c 93       	st	X, r24
		MCUCR &=~(HIGH<<MCUCR_ISC11);
     dc2:	a5 e5       	ldi	r26, 0x55	; 85
     dc4:	b0 e0       	ldi	r27, 0x00	; 0
     dc6:	e5 e5       	ldi	r30, 0x55	; 85
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	80 81       	ld	r24, Z
     dcc:	87 7f       	andi	r24, 0xF7	; 247
     dce:	8c 93       	st	X, r24
	}

}
     dd0:	0f 90       	pop	r0
     dd2:	cf 91       	pop	r28
     dd4:	df 91       	pop	r29
     dd6:	08 95       	ret

00000dd8 <fallingAdge>:
void fallingAdge(u8 interruptNum)
{
     dd8:	df 93       	push	r29
     dda:	cf 93       	push	r28
     ddc:	0f 92       	push	r0
     dde:	cd b7       	in	r28, 0x3d	; 61
     de0:	de b7       	in	r29, 0x3e	; 62
     de2:	89 83       	std	Y+1, r24	; 0x01
	if (interruptNum == INT0)
     de4:	89 81       	ldd	r24, Y+1	; 0x01
     de6:	8a 30       	cpi	r24, 0x0A	; 10
     de8:	79 f4       	brne	.+30     	; 0xe08 <fallingAdge+0x30>
		{
			MCUCR &=~(HIGH<<MCUCR_ISC00);
     dea:	a5 e5       	ldi	r26, 0x55	; 85
     dec:	b0 e0       	ldi	r27, 0x00	; 0
     dee:	e5 e5       	ldi	r30, 0x55	; 85
     df0:	f0 e0       	ldi	r31, 0x00	; 0
     df2:	80 81       	ld	r24, Z
     df4:	8e 7f       	andi	r24, 0xFE	; 254
     df6:	8c 93       	st	X, r24
			MCUCR |=(HIGH<<MCUCR_ISC01);
     df8:	a5 e5       	ldi	r26, 0x55	; 85
     dfa:	b0 e0       	ldi	r27, 0x00	; 0
     dfc:	e5 e5       	ldi	r30, 0x55	; 85
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	80 81       	ld	r24, Z
     e02:	82 60       	ori	r24, 0x02	; 2
     e04:	8c 93       	st	X, r24
     e06:	1c c0       	rjmp	.+56     	; 0xe40 <fallingAdge+0x68>
		}
		else if(interruptNum == INT1)
     e08:	89 81       	ldd	r24, Y+1	; 0x01
     e0a:	84 31       	cpi	r24, 0x14	; 20
     e0c:	79 f4       	brne	.+30     	; 0xe2c <fallingAdge+0x54>
		{
			MCUCR &=~(HIGH<<MCUCR_ISC10);
     e0e:	a5 e5       	ldi	r26, 0x55	; 85
     e10:	b0 e0       	ldi	r27, 0x00	; 0
     e12:	e5 e5       	ldi	r30, 0x55	; 85
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	80 81       	ld	r24, Z
     e18:	8b 7f       	andi	r24, 0xFB	; 251
     e1a:	8c 93       	st	X, r24
			MCUCR |=(HIGH<<MCUCR_ISC11);
     e1c:	a5 e5       	ldi	r26, 0x55	; 85
     e1e:	b0 e0       	ldi	r27, 0x00	; 0
     e20:	e5 e5       	ldi	r30, 0x55	; 85
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	80 81       	ld	r24, Z
     e26:	88 60       	ori	r24, 0x08	; 8
     e28:	8c 93       	st	X, r24
     e2a:	0a c0       	rjmp	.+20     	; 0xe40 <fallingAdge+0x68>
		}
		else if(interruptNum == INT2)
     e2c:	89 81       	ldd	r24, Y+1	; 0x01
     e2e:	8e 31       	cpi	r24, 0x1E	; 30
     e30:	39 f4       	brne	.+14     	; 0xe40 <fallingAdge+0x68>
		{
			MCUCSR &=~(HIGH<<MCUCSR_ISC2);
     e32:	a4 e5       	ldi	r26, 0x54	; 84
     e34:	b0 e0       	ldi	r27, 0x00	; 0
     e36:	e4 e5       	ldi	r30, 0x54	; 84
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	80 81       	ld	r24, Z
     e3c:	8f 7b       	andi	r24, 0xBF	; 191
     e3e:	8c 93       	st	X, r24
		}
}
     e40:	0f 90       	pop	r0
     e42:	cf 91       	pop	r28
     e44:	df 91       	pop	r29
     e46:	08 95       	ret

00000e48 <enableINT>:

void enableINT(u8 interruptNum)
{
     e48:	df 93       	push	r29
     e4a:	cf 93       	push	r28
     e4c:	00 d0       	rcall	.+0      	; 0xe4e <enableINT+0x6>
     e4e:	0f 92       	push	r0
     e50:	cd b7       	in	r28, 0x3d	; 61
     e52:	de b7       	in	r29, 0x3e	; 62
     e54:	89 83       	std	Y+1, r24	; 0x01
	//set bit
	switch (interruptNum) {
     e56:	89 81       	ldd	r24, Y+1	; 0x01
     e58:	28 2f       	mov	r18, r24
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	3b 83       	std	Y+3, r19	; 0x03
     e5e:	2a 83       	std	Y+2, r18	; 0x02
     e60:	8a 81       	ldd	r24, Y+2	; 0x02
     e62:	9b 81       	ldd	r25, Y+3	; 0x03
     e64:	84 31       	cpi	r24, 0x14	; 20
     e66:	91 05       	cpc	r25, r1
     e68:	91 f0       	breq	.+36     	; 0xe8e <enableINT+0x46>
     e6a:	2a 81       	ldd	r18, Y+2	; 0x02
     e6c:	3b 81       	ldd	r19, Y+3	; 0x03
     e6e:	2e 31       	cpi	r18, 0x1E	; 30
     e70:	31 05       	cpc	r19, r1
     e72:	a9 f0       	breq	.+42     	; 0xe9e <enableINT+0x56>
     e74:	8a 81       	ldd	r24, Y+2	; 0x02
     e76:	9b 81       	ldd	r25, Y+3	; 0x03
     e78:	8a 30       	cpi	r24, 0x0A	; 10
     e7a:	91 05       	cpc	r25, r1
     e7c:	b9 f4       	brne	.+46     	; 0xeac <enableINT+0x64>
		case INT0:
			GICR |=(HIGH<<GICR_INT0);
     e7e:	ab e5       	ldi	r26, 0x5B	; 91
     e80:	b0 e0       	ldi	r27, 0x00	; 0
     e82:	eb e5       	ldi	r30, 0x5B	; 91
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	80 81       	ld	r24, Z
     e88:	80 64       	ori	r24, 0x40	; 64
     e8a:	8c 93       	st	X, r24
     e8c:	0f c0       	rjmp	.+30     	; 0xeac <enableINT+0x64>

			break;
		case INT1:
			GICR |=(HIGH<<GICR_INT1);
     e8e:	ab e5       	ldi	r26, 0x5B	; 91
     e90:	b0 e0       	ldi	r27, 0x00	; 0
     e92:	eb e5       	ldi	r30, 0x5B	; 91
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	80 81       	ld	r24, Z
     e98:	80 68       	ori	r24, 0x80	; 128
     e9a:	8c 93       	st	X, r24
     e9c:	07 c0       	rjmp	.+14     	; 0xeac <enableINT+0x64>

			break;
		case INT2:
			GICR |=(HIGH<<GICR_INT2);
     e9e:	ab e5       	ldi	r26, 0x5B	; 91
     ea0:	b0 e0       	ldi	r27, 0x00	; 0
     ea2:	eb e5       	ldi	r30, 0x5B	; 91
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	80 81       	ld	r24, Z
     ea8:	80 62       	ori	r24, 0x20	; 32
     eaa:	8c 93       	st	X, r24

			break;
		default:
			break;
	}
}
     eac:	0f 90       	pop	r0
     eae:	0f 90       	pop	r0
     eb0:	0f 90       	pop	r0
     eb2:	cf 91       	pop	r28
     eb4:	df 91       	pop	r29
     eb6:	08 95       	ret

00000eb8 <disableINT>:
void disableINT(u8 interruptNum)
{
     eb8:	df 93       	push	r29
     eba:	cf 93       	push	r28
     ebc:	00 d0       	rcall	.+0      	; 0xebe <disableINT+0x6>
     ebe:	0f 92       	push	r0
     ec0:	cd b7       	in	r28, 0x3d	; 61
     ec2:	de b7       	in	r29, 0x3e	; 62
     ec4:	89 83       	std	Y+1, r24	; 0x01
	//clear bit
	switch (interruptNum) {
     ec6:	89 81       	ldd	r24, Y+1	; 0x01
     ec8:	28 2f       	mov	r18, r24
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	3b 83       	std	Y+3, r19	; 0x03
     ece:	2a 83       	std	Y+2, r18	; 0x02
     ed0:	8a 81       	ldd	r24, Y+2	; 0x02
     ed2:	9b 81       	ldd	r25, Y+3	; 0x03
     ed4:	84 31       	cpi	r24, 0x14	; 20
     ed6:	91 05       	cpc	r25, r1
     ed8:	91 f0       	breq	.+36     	; 0xefe <disableINT+0x46>
     eda:	2a 81       	ldd	r18, Y+2	; 0x02
     edc:	3b 81       	ldd	r19, Y+3	; 0x03
     ede:	2e 31       	cpi	r18, 0x1E	; 30
     ee0:	31 05       	cpc	r19, r1
     ee2:	a9 f0       	breq	.+42     	; 0xf0e <disableINT+0x56>
     ee4:	8a 81       	ldd	r24, Y+2	; 0x02
     ee6:	9b 81       	ldd	r25, Y+3	; 0x03
     ee8:	8a 30       	cpi	r24, 0x0A	; 10
     eea:	91 05       	cpc	r25, r1
     eec:	b9 f4       	brne	.+46     	; 0xf1c <disableINT+0x64>
		case INT0:
			GICR &=~(HIGH<<GICR_INT0);
     eee:	ab e5       	ldi	r26, 0x5B	; 91
     ef0:	b0 e0       	ldi	r27, 0x00	; 0
     ef2:	eb e5       	ldi	r30, 0x5B	; 91
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	80 81       	ld	r24, Z
     ef8:	8f 7b       	andi	r24, 0xBF	; 191
     efa:	8c 93       	st	X, r24
     efc:	0f c0       	rjmp	.+30     	; 0xf1c <disableINT+0x64>

			break;
		case INT1:
			GICR &=~(HIGH<<GICR_INT1);
     efe:	ab e5       	ldi	r26, 0x5B	; 91
     f00:	b0 e0       	ldi	r27, 0x00	; 0
     f02:	eb e5       	ldi	r30, 0x5B	; 91
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 81       	ld	r24, Z
     f08:	8f 77       	andi	r24, 0x7F	; 127
     f0a:	8c 93       	st	X, r24
     f0c:	07 c0       	rjmp	.+14     	; 0xf1c <disableINT+0x64>

			break;
		case INT2:
			GICR &=~(HIGH<<GICR_INT2);
     f0e:	ab e5       	ldi	r26, 0x5B	; 91
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	eb e5       	ldi	r30, 0x5B	; 91
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	8f 7d       	andi	r24, 0xDF	; 223
     f1a:	8c 93       	st	X, r24

			break;
		default:
			break;
	}
}
     f1c:	0f 90       	pop	r0
     f1e:	0f 90       	pop	r0
     f20:	0f 90       	pop	r0
     f22:	cf 91       	pop	r28
     f24:	df 91       	pop	r29
     f26:	08 95       	ret

00000f28 <DIO_enuInit>:
#include  "STD_TYPES.h"
#include  "errorState.h"
#include  "DIO_config.h"
#include  "DIO_priv.h"

ES_t DIO_enuInit(void) {
     f28:	df 93       	push	r29
     f2a:	cf 93       	push	r28
     f2c:	0f 92       	push	r0
     f2e:	cd b7       	in	r28, 0x3d	; 61
     f30:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOTOK;
     f32:	19 82       	std	Y+1, r1	; 0x01
	DDRA = CONC(PA_PIN0_DIR, PA_PIN1_DIR, PA_PIN2_DIR, PA_PIN3_DIR, PA_PIN4_DIR,
     f34:	ea e3       	ldi	r30, 0x3A	; 58
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	8f ef       	ldi	r24, 0xFF	; 255
     f3a:	80 83       	st	Z, r24
	PA_PIN5_DIR, PA_PIN6_DIR, PA_PIN7_DIR);
	DDRB = CONC(PB_PIN0_DIR, PB_PIN1_DIR, PB_PIN2_DIR, PB_PIN3_DIR, PB_PIN4_DIR,
     f3c:	e7 e3       	ldi	r30, 0x37	; 55
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	83 e5       	ldi	r24, 0x53	; 83
     f42:	80 83       	st	Z, r24
	PB_PIN5_DIR, PB_PIN6_DIR, PB_PIN7_DIR);
	DDRC = CONC(PC_PIN0_DIR, PC_PIN1_DIR, PC_PIN2_DIR, PC_PIN3_DIR, PC_PIN4_DIR,
     f44:	e4 e3       	ldi	r30, 0x34	; 52
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	8f ef       	ldi	r24, 0xFF	; 255
     f4a:	80 83       	st	Z, r24
	PC_PIN5_DIR, PC_PIN6_DIR, PC_PIN7_DIR);
	DDRD = CONC(PD_PIN0_DIR, PD_PIN1_DIR, PD_PIN2_DIR, PD_PIN3_DIR, PD_PIN4_DIR,
     f4c:	e1 e3       	ldi	r30, 0x31	; 49
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	83 e5       	ldi	r24, 0x53	; 83
     f52:	80 83       	st	Z, r24
	PD_PIN5_DIR, PD_PIN6_DIR, PD_PIN7_DIR);
	PORTA = CONC(PA_PIN0_VAL, PA_PIN1_VAL, PA_PIN2_VAL, PA_PIN3_VAL,
     f54:	eb e3       	ldi	r30, 0x3B	; 59
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	85 e6       	ldi	r24, 0x65	; 101
     f5a:	80 83       	st	Z, r24
	PA_PIN4_VAL, PA_PIN5_VAL, PA_PIN6_VAL, PA_PIN7_VAL);
	PORTB = CONC(PB_PIN0_VAL, PB_PIN1_VAL, PB_PIN2_VAL, PB_PIN3_VAL,
     f5c:	e8 e3       	ldi	r30, 0x38	; 56
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	85 e6       	ldi	r24, 0x65	; 101
     f62:	80 83       	st	Z, r24
	PB_PIN4_VAL, PB_PIN5_VAL, PB_PIN6_VAL, PB_PIN7_VAL);
	PORTC = CONC(PC_PIN0_VAL, PC_PIN1_VAL, PC_PIN2_VAL, PC_PIN3_VAL,
     f64:	e5 e3       	ldi	r30, 0x35	; 53
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	10 82       	st	Z, r1
	PC_PIN4_VAL, PC_PIN5_VAL, PC_PIN6_VAL, PC_PIN7_VAL);
	PORTD = CONC(PD_PIN0_VAL, PD_PIN1_VAL, PD_PIN2_VAL, PD_PIN3_VAL,
     f6a:	e2 e3       	ldi	r30, 0x32	; 50
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	85 e6       	ldi	r24, 0x65	; 101
     f70:	80 83       	st	Z, r24
	PD_PIN4_VAL, PD_PIN5_VAL, PD_PIN6_VAL, PD_PIN7_VAL);
	 Local_enuErrorState = ES_OK;
     f72:	81 e0       	ldi	r24, 0x01	; 1
     f74:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
     f76:	89 81       	ldd	r24, Y+1	; 0x01
}
     f78:	0f 90       	pop	r0
     f7a:	cf 91       	pop	r28
     f7c:	df 91       	pop	r29
     f7e:	08 95       	ret

00000f80 <DIO_enuSetPortDirection>:

ES_t DIO_enuSetPortDirection(u8 Copy_u8PortID, u8 Copy_u8Value) {
     f80:	df 93       	push	r29
     f82:	cf 93       	push	r28
     f84:	00 d0       	rcall	.+0      	; 0xf86 <DIO_enuSetPortDirection+0x6>
     f86:	00 d0       	rcall	.+0      	; 0xf88 <DIO_enuSetPortDirection+0x8>
     f88:	0f 92       	push	r0
     f8a:	cd b7       	in	r28, 0x3d	; 61
     f8c:	de b7       	in	r29, 0x3e	; 62
     f8e:	8a 83       	std	Y+2, r24	; 0x02
     f90:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOTOK;
     f92:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8PortID <= DIO_PORTD) {
     f94:	8a 81       	ldd	r24, Y+2	; 0x02
     f96:	84 30       	cpi	r24, 0x04	; 4
     f98:	a8 f5       	brcc	.+106    	; 0x1004 <DIO_enuSetPortDirection+0x84>
		switch (Copy_u8PortID) {
     f9a:	8a 81       	ldd	r24, Y+2	; 0x02
     f9c:	28 2f       	mov	r18, r24
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	3d 83       	std	Y+5, r19	; 0x05
     fa2:	2c 83       	std	Y+4, r18	; 0x04
     fa4:	8c 81       	ldd	r24, Y+4	; 0x04
     fa6:	9d 81       	ldd	r25, Y+5	; 0x05
     fa8:	81 30       	cpi	r24, 0x01	; 1
     faa:	91 05       	cpc	r25, r1
     fac:	d1 f0       	breq	.+52     	; 0xfe2 <DIO_enuSetPortDirection+0x62>
     fae:	2c 81       	ldd	r18, Y+4	; 0x04
     fb0:	3d 81       	ldd	r19, Y+5	; 0x05
     fb2:	22 30       	cpi	r18, 0x02	; 2
     fb4:	31 05       	cpc	r19, r1
     fb6:	2c f4       	brge	.+10     	; 0xfc2 <DIO_enuSetPortDirection+0x42>
     fb8:	8c 81       	ldd	r24, Y+4	; 0x04
     fba:	9d 81       	ldd	r25, Y+5	; 0x05
     fbc:	00 97       	sbiw	r24, 0x00	; 0
     fbe:	61 f0       	breq	.+24     	; 0xfd8 <DIO_enuSetPortDirection+0x58>
     fc0:	1e c0       	rjmp	.+60     	; 0xffe <DIO_enuSetPortDirection+0x7e>
     fc2:	2c 81       	ldd	r18, Y+4	; 0x04
     fc4:	3d 81       	ldd	r19, Y+5	; 0x05
     fc6:	22 30       	cpi	r18, 0x02	; 2
     fc8:	31 05       	cpc	r19, r1
     fca:	81 f0       	breq	.+32     	; 0xfec <DIO_enuSetPortDirection+0x6c>
     fcc:	8c 81       	ldd	r24, Y+4	; 0x04
     fce:	9d 81       	ldd	r25, Y+5	; 0x05
     fd0:	83 30       	cpi	r24, 0x03	; 3
     fd2:	91 05       	cpc	r25, r1
     fd4:	81 f0       	breq	.+32     	; 0xff6 <DIO_enuSetPortDirection+0x76>
     fd6:	13 c0       	rjmp	.+38     	; 0xffe <DIO_enuSetPortDirection+0x7e>
			case DIO_PORTA:
			DDRA = Copy_u8Value;
     fd8:	ea e3       	ldi	r30, 0x3A	; 58
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	8b 81       	ldd	r24, Y+3	; 0x03
     fde:	80 83       	st	Z, r24
     fe0:	0e c0       	rjmp	.+28     	; 0xffe <DIO_enuSetPortDirection+0x7e>
			break;
			case DIO_PORTB:
			DDRB = Copy_u8Value;
     fe2:	e7 e3       	ldi	r30, 0x37	; 55
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	8b 81       	ldd	r24, Y+3	; 0x03
     fe8:	80 83       	st	Z, r24
     fea:	09 c0       	rjmp	.+18     	; 0xffe <DIO_enuSetPortDirection+0x7e>
			break;
			case DIO_PORTC:
			DDRC = Copy_u8Value;
     fec:	e4 e3       	ldi	r30, 0x34	; 52
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	8b 81       	ldd	r24, Y+3	; 0x03
     ff2:	80 83       	st	Z, r24
     ff4:	04 c0       	rjmp	.+8      	; 0xffe <DIO_enuSetPortDirection+0x7e>
			break;
			case DIO_PORTD:
			DDRD = Copy_u8Value;
     ff6:	e1 e3       	ldi	r30, 0x31	; 49
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	8b 81       	ldd	r24, Y+3	; 0x03
     ffc:	80 83       	st	Z, r24
			break;
		}
		Local_enuErrorState = ES_OK;
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	89 83       	std	Y+1, r24	; 0x01
    1002:	02 c0       	rjmp	.+4      	; 0x1008 <DIO_enuSetPortDirection+0x88>
		} else {
		Local_enuErrorState = ES_OUT_OF_RANGE;
    1004:	82 e0       	ldi	r24, 0x02	; 2
    1006:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1008:	89 81       	ldd	r24, Y+1	; 0x01
}
    100a:	0f 90       	pop	r0
    100c:	0f 90       	pop	r0
    100e:	0f 90       	pop	r0
    1010:	0f 90       	pop	r0
    1012:	0f 90       	pop	r0
    1014:	cf 91       	pop	r28
    1016:	df 91       	pop	r29
    1018:	08 95       	ret

0000101a <DIO_enuSetPortValue>:

ES_t DIO_enuSetPortValue(u8 Copy_u8PortID, u8 Copy_u8Value) {
    101a:	df 93       	push	r29
    101c:	cf 93       	push	r28
    101e:	00 d0       	rcall	.+0      	; 0x1020 <DIO_enuSetPortValue+0x6>
    1020:	00 d0       	rcall	.+0      	; 0x1022 <DIO_enuSetPortValue+0x8>
    1022:	0f 92       	push	r0
    1024:	cd b7       	in	r28, 0x3d	; 61
    1026:	de b7       	in	r29, 0x3e	; 62
    1028:	8a 83       	std	Y+2, r24	; 0x02
    102a:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOTOK;
    102c:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8PortID <= DIO_PORTD) {
    102e:	8a 81       	ldd	r24, Y+2	; 0x02
    1030:	84 30       	cpi	r24, 0x04	; 4
    1032:	a8 f5       	brcc	.+106    	; 0x109e <DIO_enuSetPortValue+0x84>
		switch (Copy_u8PortID) {
    1034:	8a 81       	ldd	r24, Y+2	; 0x02
    1036:	28 2f       	mov	r18, r24
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	3d 83       	std	Y+5, r19	; 0x05
    103c:	2c 83       	std	Y+4, r18	; 0x04
    103e:	8c 81       	ldd	r24, Y+4	; 0x04
    1040:	9d 81       	ldd	r25, Y+5	; 0x05
    1042:	81 30       	cpi	r24, 0x01	; 1
    1044:	91 05       	cpc	r25, r1
    1046:	d1 f0       	breq	.+52     	; 0x107c <DIO_enuSetPortValue+0x62>
    1048:	2c 81       	ldd	r18, Y+4	; 0x04
    104a:	3d 81       	ldd	r19, Y+5	; 0x05
    104c:	22 30       	cpi	r18, 0x02	; 2
    104e:	31 05       	cpc	r19, r1
    1050:	2c f4       	brge	.+10     	; 0x105c <DIO_enuSetPortValue+0x42>
    1052:	8c 81       	ldd	r24, Y+4	; 0x04
    1054:	9d 81       	ldd	r25, Y+5	; 0x05
    1056:	00 97       	sbiw	r24, 0x00	; 0
    1058:	61 f0       	breq	.+24     	; 0x1072 <DIO_enuSetPortValue+0x58>
    105a:	1e c0       	rjmp	.+60     	; 0x1098 <DIO_enuSetPortValue+0x7e>
    105c:	2c 81       	ldd	r18, Y+4	; 0x04
    105e:	3d 81       	ldd	r19, Y+5	; 0x05
    1060:	22 30       	cpi	r18, 0x02	; 2
    1062:	31 05       	cpc	r19, r1
    1064:	81 f0       	breq	.+32     	; 0x1086 <DIO_enuSetPortValue+0x6c>
    1066:	8c 81       	ldd	r24, Y+4	; 0x04
    1068:	9d 81       	ldd	r25, Y+5	; 0x05
    106a:	83 30       	cpi	r24, 0x03	; 3
    106c:	91 05       	cpc	r25, r1
    106e:	81 f0       	breq	.+32     	; 0x1090 <DIO_enuSetPortValue+0x76>
    1070:	13 c0       	rjmp	.+38     	; 0x1098 <DIO_enuSetPortValue+0x7e>
			case DIO_PORTA:
			PORTA = Copy_u8Value;
    1072:	eb e3       	ldi	r30, 0x3B	; 59
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	8b 81       	ldd	r24, Y+3	; 0x03
    1078:	80 83       	st	Z, r24
    107a:	0e c0       	rjmp	.+28     	; 0x1098 <DIO_enuSetPortValue+0x7e>
			break;
			case DIO_PORTB:
			PORTB = Copy_u8Value;
    107c:	e8 e3       	ldi	r30, 0x38	; 56
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	8b 81       	ldd	r24, Y+3	; 0x03
    1082:	80 83       	st	Z, r24
    1084:	09 c0       	rjmp	.+18     	; 0x1098 <DIO_enuSetPortValue+0x7e>
			break;
			case DIO_PORTC:
			PORTC = Copy_u8Value;
    1086:	e5 e3       	ldi	r30, 0x35	; 53
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	8b 81       	ldd	r24, Y+3	; 0x03
    108c:	80 83       	st	Z, r24
    108e:	04 c0       	rjmp	.+8      	; 0x1098 <DIO_enuSetPortValue+0x7e>
			break;
			case DIO_PORTD:
			PORTD = Copy_u8Value;
    1090:	e2 e3       	ldi	r30, 0x32	; 50
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	8b 81       	ldd	r24, Y+3	; 0x03
    1096:	80 83       	st	Z, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    1098:	81 e0       	ldi	r24, 0x01	; 1
    109a:	89 83       	std	Y+1, r24	; 0x01
    109c:	02 c0       	rjmp	.+4      	; 0x10a2 <DIO_enuSetPortValue+0x88>
		} else {
		Local_enuErrorState = ES_OUT_OF_RANGE;
    109e:	82 e0       	ldi	r24, 0x02	; 2
    10a0:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    10a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    10a4:	0f 90       	pop	r0
    10a6:	0f 90       	pop	r0
    10a8:	0f 90       	pop	r0
    10aa:	0f 90       	pop	r0
    10ac:	0f 90       	pop	r0
    10ae:	cf 91       	pop	r28
    10b0:	df 91       	pop	r29
    10b2:	08 95       	ret

000010b4 <DIO_enuTogPort>:

ES_t DIO_enuTogPort(u8 Copy_u8PortID) {
    10b4:	df 93       	push	r29
    10b6:	cf 93       	push	r28
    10b8:	00 d0       	rcall	.+0      	; 0x10ba <DIO_enuTogPort+0x6>
    10ba:	00 d0       	rcall	.+0      	; 0x10bc <DIO_enuTogPort+0x8>
    10bc:	cd b7       	in	r28, 0x3d	; 61
    10be:	de b7       	in	r29, 0x3e	; 62
    10c0:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOTOK;
    10c2:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8PortID <= DIO_PORTD) {
    10c4:	8a 81       	ldd	r24, Y+2	; 0x02
    10c6:	84 30       	cpi	r24, 0x04	; 4
    10c8:	08 f0       	brcs	.+2      	; 0x10cc <DIO_enuTogPort+0x18>
    10ca:	41 c0       	rjmp	.+130    	; 0x114e <DIO_enuTogPort+0x9a>
		switch (Copy_u8PortID) {
    10cc:	8a 81       	ldd	r24, Y+2	; 0x02
    10ce:	28 2f       	mov	r18, r24
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	3c 83       	std	Y+4, r19	; 0x04
    10d4:	2b 83       	std	Y+3, r18	; 0x03
    10d6:	8b 81       	ldd	r24, Y+3	; 0x03
    10d8:	9c 81       	ldd	r25, Y+4	; 0x04
    10da:	81 30       	cpi	r24, 0x01	; 1
    10dc:	91 05       	cpc	r25, r1
    10de:	e9 f0       	breq	.+58     	; 0x111a <DIO_enuTogPort+0x66>
    10e0:	2b 81       	ldd	r18, Y+3	; 0x03
    10e2:	3c 81       	ldd	r19, Y+4	; 0x04
    10e4:	22 30       	cpi	r18, 0x02	; 2
    10e6:	31 05       	cpc	r19, r1
    10e8:	2c f4       	brge	.+10     	; 0x10f4 <DIO_enuTogPort+0x40>
    10ea:	8b 81       	ldd	r24, Y+3	; 0x03
    10ec:	9c 81       	ldd	r25, Y+4	; 0x04
    10ee:	00 97       	sbiw	r24, 0x00	; 0
    10f0:	61 f0       	breq	.+24     	; 0x110a <DIO_enuTogPort+0x56>
    10f2:	2a c0       	rjmp	.+84     	; 0x1148 <DIO_enuTogPort+0x94>
    10f4:	2b 81       	ldd	r18, Y+3	; 0x03
    10f6:	3c 81       	ldd	r19, Y+4	; 0x04
    10f8:	22 30       	cpi	r18, 0x02	; 2
    10fa:	31 05       	cpc	r19, r1
    10fc:	b1 f0       	breq	.+44     	; 0x112a <DIO_enuTogPort+0x76>
    10fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1100:	9c 81       	ldd	r25, Y+4	; 0x04
    1102:	83 30       	cpi	r24, 0x03	; 3
    1104:	91 05       	cpc	r25, r1
    1106:	c9 f0       	breq	.+50     	; 0x113a <DIO_enuTogPort+0x86>
    1108:	1f c0       	rjmp	.+62     	; 0x1148 <DIO_enuTogPort+0x94>
			case DIO_PORTA:
			PORTA = ~PORTA;
    110a:	ab e3       	ldi	r26, 0x3B	; 59
    110c:	b0 e0       	ldi	r27, 0x00	; 0
    110e:	eb e3       	ldi	r30, 0x3B	; 59
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	80 81       	ld	r24, Z
    1114:	80 95       	com	r24
    1116:	8c 93       	st	X, r24
    1118:	17 c0       	rjmp	.+46     	; 0x1148 <DIO_enuTogPort+0x94>
			break;
			case DIO_PORTB:
			PORTB = ~PORTB;
    111a:	a8 e3       	ldi	r26, 0x38	; 56
    111c:	b0 e0       	ldi	r27, 0x00	; 0
    111e:	e8 e3       	ldi	r30, 0x38	; 56
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	80 81       	ld	r24, Z
    1124:	80 95       	com	r24
    1126:	8c 93       	st	X, r24
    1128:	0f c0       	rjmp	.+30     	; 0x1148 <DIO_enuTogPort+0x94>
			break;
			case DIO_PORTC:
			PORTC = ~PORTC;
    112a:	a5 e3       	ldi	r26, 0x35	; 53
    112c:	b0 e0       	ldi	r27, 0x00	; 0
    112e:	e5 e3       	ldi	r30, 0x35	; 53
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	80 81       	ld	r24, Z
    1134:	80 95       	com	r24
    1136:	8c 93       	st	X, r24
    1138:	07 c0       	rjmp	.+14     	; 0x1148 <DIO_enuTogPort+0x94>
			break;
			case DIO_PORTD:
			PORTD = ~PORTD;
    113a:	a2 e3       	ldi	r26, 0x32	; 50
    113c:	b0 e0       	ldi	r27, 0x00	; 0
    113e:	e2 e3       	ldi	r30, 0x32	; 50
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	80 81       	ld	r24, Z
    1144:	80 95       	com	r24
    1146:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    1148:	81 e0       	ldi	r24, 0x01	; 1
    114a:	89 83       	std	Y+1, r24	; 0x01
    114c:	02 c0       	rjmp	.+4      	; 0x1152 <DIO_enuTogPort+0x9e>
		} else {
		Local_enuErrorState = ES_OUT_OF_RANGE;
    114e:	82 e0       	ldi	r24, 0x02	; 2
    1150:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    1152:	89 81       	ldd	r24, Y+1	; 0x01
}
    1154:	0f 90       	pop	r0
    1156:	0f 90       	pop	r0
    1158:	0f 90       	pop	r0
    115a:	0f 90       	pop	r0
    115c:	cf 91       	pop	r28
    115e:	df 91       	pop	r29
    1160:	08 95       	ret

00001162 <DIO_enuGetPortValue>:

ES_t DIO_enuGetPortValue(u8 Copy_u8PortID, u8* Copy_pu8Value) {
    1162:	df 93       	push	r29
    1164:	cf 93       	push	r28
    1166:	00 d0       	rcall	.+0      	; 0x1168 <DIO_enuGetPortValue+0x6>
    1168:	00 d0       	rcall	.+0      	; 0x116a <DIO_enuGetPortValue+0x8>
    116a:	00 d0       	rcall	.+0      	; 0x116c <DIO_enuGetPortValue+0xa>
    116c:	cd b7       	in	r28, 0x3d	; 61
    116e:	de b7       	in	r29, 0x3e	; 62
    1170:	8a 83       	std	Y+2, r24	; 0x02
    1172:	7c 83       	std	Y+4, r23	; 0x04
    1174:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOTOK;
    1176:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_pu8Value != NULL) {
    1178:	8b 81       	ldd	r24, Y+3	; 0x03
    117a:	9c 81       	ldd	r25, Y+4	; 0x04
    117c:	00 97       	sbiw	r24, 0x00	; 0
    117e:	09 f4       	brne	.+2      	; 0x1182 <DIO_enuGetPortValue+0x20>
    1180:	43 c0       	rjmp	.+134    	; 0x1208 <DIO_enuGetPortValue+0xa6>
		if (Copy_u8PortID <= DIO_PORTD) {
    1182:	8a 81       	ldd	r24, Y+2	; 0x02
    1184:	84 30       	cpi	r24, 0x04	; 4
    1186:	e8 f5       	brcc	.+122    	; 0x1202 <DIO_enuGetPortValue+0xa0>
			switch (Copy_u8PortID) {
    1188:	8a 81       	ldd	r24, Y+2	; 0x02
    118a:	28 2f       	mov	r18, r24
    118c:	30 e0       	ldi	r19, 0x00	; 0
    118e:	3e 83       	std	Y+6, r19	; 0x06
    1190:	2d 83       	std	Y+5, r18	; 0x05
    1192:	8d 81       	ldd	r24, Y+5	; 0x05
    1194:	9e 81       	ldd	r25, Y+6	; 0x06
    1196:	81 30       	cpi	r24, 0x01	; 1
    1198:	91 05       	cpc	r25, r1
    119a:	e1 f0       	breq	.+56     	; 0x11d4 <DIO_enuGetPortValue+0x72>
    119c:	2d 81       	ldd	r18, Y+5	; 0x05
    119e:	3e 81       	ldd	r19, Y+6	; 0x06
    11a0:	22 30       	cpi	r18, 0x02	; 2
    11a2:	31 05       	cpc	r19, r1
    11a4:	2c f4       	brge	.+10     	; 0x11b0 <DIO_enuGetPortValue+0x4e>
    11a6:	8d 81       	ldd	r24, Y+5	; 0x05
    11a8:	9e 81       	ldd	r25, Y+6	; 0x06
    11aa:	00 97       	sbiw	r24, 0x00	; 0
    11ac:	61 f0       	breq	.+24     	; 0x11c6 <DIO_enuGetPortValue+0x64>
    11ae:	26 c0       	rjmp	.+76     	; 0x11fc <DIO_enuGetPortValue+0x9a>
    11b0:	2d 81       	ldd	r18, Y+5	; 0x05
    11b2:	3e 81       	ldd	r19, Y+6	; 0x06
    11b4:	22 30       	cpi	r18, 0x02	; 2
    11b6:	31 05       	cpc	r19, r1
    11b8:	a1 f0       	breq	.+40     	; 0x11e2 <DIO_enuGetPortValue+0x80>
    11ba:	8d 81       	ldd	r24, Y+5	; 0x05
    11bc:	9e 81       	ldd	r25, Y+6	; 0x06
    11be:	83 30       	cpi	r24, 0x03	; 3
    11c0:	91 05       	cpc	r25, r1
    11c2:	b1 f0       	breq	.+44     	; 0x11f0 <DIO_enuGetPortValue+0x8e>
    11c4:	1b c0       	rjmp	.+54     	; 0x11fc <DIO_enuGetPortValue+0x9a>
				case DIO_PORTA:
				*Copy_pu8Value = PINA;
    11c6:	e9 e3       	ldi	r30, 0x39	; 57
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	80 81       	ld	r24, Z
    11cc:	eb 81       	ldd	r30, Y+3	; 0x03
    11ce:	fc 81       	ldd	r31, Y+4	; 0x04
    11d0:	80 83       	st	Z, r24
    11d2:	14 c0       	rjmp	.+40     	; 0x11fc <DIO_enuGetPortValue+0x9a>
				break;
				case DIO_PORTB:
				*Copy_pu8Value = PINB;
    11d4:	e6 e3       	ldi	r30, 0x36	; 54
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	80 81       	ld	r24, Z
    11da:	eb 81       	ldd	r30, Y+3	; 0x03
    11dc:	fc 81       	ldd	r31, Y+4	; 0x04
    11de:	80 83       	st	Z, r24
    11e0:	0d c0       	rjmp	.+26     	; 0x11fc <DIO_enuGetPortValue+0x9a>
				break;
				case DIO_PORTC:
				*Copy_pu8Value = PINC;
    11e2:	e3 e3       	ldi	r30, 0x33	; 51
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	80 81       	ld	r24, Z
    11e8:	eb 81       	ldd	r30, Y+3	; 0x03
    11ea:	fc 81       	ldd	r31, Y+4	; 0x04
    11ec:	80 83       	st	Z, r24
    11ee:	06 c0       	rjmp	.+12     	; 0x11fc <DIO_enuGetPortValue+0x9a>
				break;
				case DIO_PORTD:
				*Copy_pu8Value = PIND;
    11f0:	e0 e3       	ldi	r30, 0x30	; 48
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	80 81       	ld	r24, Z
    11f6:	eb 81       	ldd	r30, Y+3	; 0x03
    11f8:	fc 81       	ldd	r31, Y+4	; 0x04
    11fa:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorState = ES_OK;
    11fc:	81 e0       	ldi	r24, 0x01	; 1
    11fe:	89 83       	std	Y+1, r24	; 0x01
    1200:	05 c0       	rjmp	.+10     	; 0x120c <DIO_enuGetPortValue+0xaa>

			} else {
			Local_enuErrorState = ES_OUT_OF_RANGE;
    1202:	82 e0       	ldi	r24, 0x02	; 2
    1204:	89 83       	std	Y+1, r24	; 0x01
    1206:	02 c0       	rjmp	.+4      	; 0x120c <DIO_enuGetPortValue+0xaa>
		}
		} else {
		Local_enuErrorState = ES_NULL_POINTER;
    1208:	83 e0       	ldi	r24, 0x03	; 3
    120a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    120c:	89 81       	ldd	r24, Y+1	; 0x01
}
    120e:	26 96       	adiw	r28, 0x06	; 6
    1210:	0f b6       	in	r0, 0x3f	; 63
    1212:	f8 94       	cli
    1214:	de bf       	out	0x3e, r29	; 62
    1216:	0f be       	out	0x3f, r0	; 63
    1218:	cd bf       	out	0x3d, r28	; 61
    121a:	cf 91       	pop	r28
    121c:	df 91       	pop	r29
    121e:	08 95       	ret

00001220 <DIO_enuGetPinValue>:

ES_t DIO_enuGetPinValue(u8 Copy_u8PortID, u8 Copy_u8PinID, u8* Copy_pu8Value) {
    1220:	df 93       	push	r29
    1222:	cf 93       	push	r28
    1224:	cd b7       	in	r28, 0x3d	; 61
    1226:	de b7       	in	r29, 0x3e	; 62
    1228:	27 97       	sbiw	r28, 0x07	; 7
    122a:	0f b6       	in	r0, 0x3f	; 63
    122c:	f8 94       	cli
    122e:	de bf       	out	0x3e, r29	; 62
    1230:	0f be       	out	0x3f, r0	; 63
    1232:	cd bf       	out	0x3d, r28	; 61
    1234:	8a 83       	std	Y+2, r24	; 0x02
    1236:	6b 83       	std	Y+3, r22	; 0x03
    1238:	5d 83       	std	Y+5, r21	; 0x05
    123a:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOTOK;
    123c:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_pu8Value != NULL) {
    123e:	8c 81       	ldd	r24, Y+4	; 0x04
    1240:	9d 81       	ldd	r25, Y+5	; 0x05
    1242:	00 97       	sbiw	r24, 0x00	; 0
    1244:	09 f4       	brne	.+2      	; 0x1248 <DIO_enuGetPinValue+0x28>
    1246:	7e c0       	rjmp	.+252    	; 0x1344 <DIO_enuGetPinValue+0x124>
		if (Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7) {
    1248:	8a 81       	ldd	r24, Y+2	; 0x02
    124a:	84 30       	cpi	r24, 0x04	; 4
    124c:	08 f0       	brcs	.+2      	; 0x1250 <DIO_enuGetPinValue+0x30>
    124e:	77 c0       	rjmp	.+238    	; 0x133e <DIO_enuGetPinValue+0x11e>
    1250:	8b 81       	ldd	r24, Y+3	; 0x03
    1252:	88 30       	cpi	r24, 0x08	; 8
    1254:	08 f0       	brcs	.+2      	; 0x1258 <DIO_enuGetPinValue+0x38>
    1256:	73 c0       	rjmp	.+230    	; 0x133e <DIO_enuGetPinValue+0x11e>
			switch (Copy_u8PortID) {
    1258:	8a 81       	ldd	r24, Y+2	; 0x02
    125a:	28 2f       	mov	r18, r24
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	3f 83       	std	Y+7, r19	; 0x07
    1260:	2e 83       	std	Y+6, r18	; 0x06
    1262:	4e 81       	ldd	r20, Y+6	; 0x06
    1264:	5f 81       	ldd	r21, Y+7	; 0x07
    1266:	41 30       	cpi	r20, 0x01	; 1
    1268:	51 05       	cpc	r21, r1
    126a:	59 f1       	breq	.+86     	; 0x12c2 <DIO_enuGetPinValue+0xa2>
    126c:	8e 81       	ldd	r24, Y+6	; 0x06
    126e:	9f 81       	ldd	r25, Y+7	; 0x07
    1270:	82 30       	cpi	r24, 0x02	; 2
    1272:	91 05       	cpc	r25, r1
    1274:	34 f4       	brge	.+12     	; 0x1282 <DIO_enuGetPinValue+0x62>
    1276:	2e 81       	ldd	r18, Y+6	; 0x06
    1278:	3f 81       	ldd	r19, Y+7	; 0x07
    127a:	21 15       	cp	r18, r1
    127c:	31 05       	cpc	r19, r1
    127e:	69 f0       	breq	.+26     	; 0x129a <DIO_enuGetPinValue+0x7a>
    1280:	5b c0       	rjmp	.+182    	; 0x1338 <DIO_enuGetPinValue+0x118>
    1282:	4e 81       	ldd	r20, Y+6	; 0x06
    1284:	5f 81       	ldd	r21, Y+7	; 0x07
    1286:	42 30       	cpi	r20, 0x02	; 2
    1288:	51 05       	cpc	r21, r1
    128a:	79 f1       	breq	.+94     	; 0x12ea <DIO_enuGetPinValue+0xca>
    128c:	8e 81       	ldd	r24, Y+6	; 0x06
    128e:	9f 81       	ldd	r25, Y+7	; 0x07
    1290:	83 30       	cpi	r24, 0x03	; 3
    1292:	91 05       	cpc	r25, r1
    1294:	09 f4       	brne	.+2      	; 0x1298 <DIO_enuGetPinValue+0x78>
    1296:	3d c0       	rjmp	.+122    	; 0x1312 <DIO_enuGetPinValue+0xf2>
    1298:	4f c0       	rjmp	.+158    	; 0x1338 <DIO_enuGetPinValue+0x118>
				case DIO_PORTA:
				*Copy_pu8Value = ((PINA >> Copy_u8PinID) & DIO_MASK_BIT);
    129a:	e9 e3       	ldi	r30, 0x39	; 57
    129c:	f0 e0       	ldi	r31, 0x00	; 0
    129e:	80 81       	ld	r24, Z
    12a0:	28 2f       	mov	r18, r24
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	8b 81       	ldd	r24, Y+3	; 0x03
    12a6:	88 2f       	mov	r24, r24
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	a9 01       	movw	r20, r18
    12ac:	02 c0       	rjmp	.+4      	; 0x12b2 <DIO_enuGetPinValue+0x92>
    12ae:	55 95       	asr	r21
    12b0:	47 95       	ror	r20
    12b2:	8a 95       	dec	r24
    12b4:	e2 f7       	brpl	.-8      	; 0x12ae <DIO_enuGetPinValue+0x8e>
    12b6:	ca 01       	movw	r24, r20
    12b8:	81 70       	andi	r24, 0x01	; 1
    12ba:	ec 81       	ldd	r30, Y+4	; 0x04
    12bc:	fd 81       	ldd	r31, Y+5	; 0x05
    12be:	80 83       	st	Z, r24
    12c0:	3b c0       	rjmp	.+118    	; 0x1338 <DIO_enuGetPinValue+0x118>
				break;
				case DIO_PORTB:
				*Copy_pu8Value = ((PINB >> Copy_u8PinID) & DIO_MASK_BIT);
    12c2:	e6 e3       	ldi	r30, 0x36	; 54
    12c4:	f0 e0       	ldi	r31, 0x00	; 0
    12c6:	80 81       	ld	r24, Z
    12c8:	28 2f       	mov	r18, r24
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	8b 81       	ldd	r24, Y+3	; 0x03
    12ce:	88 2f       	mov	r24, r24
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	a9 01       	movw	r20, r18
    12d4:	02 c0       	rjmp	.+4      	; 0x12da <DIO_enuGetPinValue+0xba>
    12d6:	55 95       	asr	r21
    12d8:	47 95       	ror	r20
    12da:	8a 95       	dec	r24
    12dc:	e2 f7       	brpl	.-8      	; 0x12d6 <DIO_enuGetPinValue+0xb6>
    12de:	ca 01       	movw	r24, r20
    12e0:	81 70       	andi	r24, 0x01	; 1
    12e2:	ec 81       	ldd	r30, Y+4	; 0x04
    12e4:	fd 81       	ldd	r31, Y+5	; 0x05
    12e6:	80 83       	st	Z, r24
    12e8:	27 c0       	rjmp	.+78     	; 0x1338 <DIO_enuGetPinValue+0x118>
				break;
				case DIO_PORTC:
				*Copy_pu8Value = ((PINC >> Copy_u8PinID) & DIO_MASK_BIT);
    12ea:	e3 e3       	ldi	r30, 0x33	; 51
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	80 81       	ld	r24, Z
    12f0:	28 2f       	mov	r18, r24
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	8b 81       	ldd	r24, Y+3	; 0x03
    12f6:	88 2f       	mov	r24, r24
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	a9 01       	movw	r20, r18
    12fc:	02 c0       	rjmp	.+4      	; 0x1302 <DIO_enuGetPinValue+0xe2>
    12fe:	55 95       	asr	r21
    1300:	47 95       	ror	r20
    1302:	8a 95       	dec	r24
    1304:	e2 f7       	brpl	.-8      	; 0x12fe <DIO_enuGetPinValue+0xde>
    1306:	ca 01       	movw	r24, r20
    1308:	81 70       	andi	r24, 0x01	; 1
    130a:	ec 81       	ldd	r30, Y+4	; 0x04
    130c:	fd 81       	ldd	r31, Y+5	; 0x05
    130e:	80 83       	st	Z, r24
    1310:	13 c0       	rjmp	.+38     	; 0x1338 <DIO_enuGetPinValue+0x118>
				break;
				case DIO_PORTD:
				*Copy_pu8Value = ((PIND >> Copy_u8PinID) & DIO_MASK_BIT);
    1312:	e0 e3       	ldi	r30, 0x30	; 48
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	80 81       	ld	r24, Z
    1318:	28 2f       	mov	r18, r24
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	8b 81       	ldd	r24, Y+3	; 0x03
    131e:	88 2f       	mov	r24, r24
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	a9 01       	movw	r20, r18
    1324:	02 c0       	rjmp	.+4      	; 0x132a <DIO_enuGetPinValue+0x10a>
    1326:	55 95       	asr	r21
    1328:	47 95       	ror	r20
    132a:	8a 95       	dec	r24
    132c:	e2 f7       	brpl	.-8      	; 0x1326 <DIO_enuGetPinValue+0x106>
    132e:	ca 01       	movw	r24, r20
    1330:	81 70       	andi	r24, 0x01	; 1
    1332:	ec 81       	ldd	r30, Y+4	; 0x04
    1334:	fd 81       	ldd	r31, Y+5	; 0x05
    1336:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorState = ES_OK;
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	89 83       	std	Y+1, r24	; 0x01
    133c:	05 c0       	rjmp	.+10     	; 0x1348 <DIO_enuGetPinValue+0x128>
			} else {
			Local_enuErrorState = ES_OUT_OF_RANGE;
    133e:	82 e0       	ldi	r24, 0x02	; 2
    1340:	89 83       	std	Y+1, r24	; 0x01
    1342:	02 c0       	rjmp	.+4      	; 0x1348 <DIO_enuGetPinValue+0x128>
		}
		} else {
		Local_enuErrorState = ES_NULL_POINTER;
    1344:	83 e0       	ldi	r24, 0x03	; 3
    1346:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    1348:	89 81       	ldd	r24, Y+1	; 0x01
}
    134a:	27 96       	adiw	r28, 0x07	; 7
    134c:	0f b6       	in	r0, 0x3f	; 63
    134e:	f8 94       	cli
    1350:	de bf       	out	0x3e, r29	; 62
    1352:	0f be       	out	0x3f, r0	; 63
    1354:	cd bf       	out	0x3d, r28	; 61
    1356:	cf 91       	pop	r28
    1358:	df 91       	pop	r29
    135a:	08 95       	ret

0000135c <DIO_enuTogPit>:

ES_t DIO_enuTogPit(u8 Copy_u8PortID, u8 Copy_u8PinID) {
    135c:	df 93       	push	r29
    135e:	cf 93       	push	r28
    1360:	00 d0       	rcall	.+0      	; 0x1362 <DIO_enuTogPit+0x6>
    1362:	00 d0       	rcall	.+0      	; 0x1364 <DIO_enuTogPit+0x8>
    1364:	0f 92       	push	r0
    1366:	cd b7       	in	r28, 0x3d	; 61
    1368:	de b7       	in	r29, 0x3e	; 62
    136a:	8a 83       	std	Y+2, r24	; 0x02
    136c:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOTOK;
    136e:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7) {
    1370:	8a 81       	ldd	r24, Y+2	; 0x02
    1372:	84 30       	cpi	r24, 0x04	; 4
    1374:	08 f0       	brcs	.+2      	; 0x1378 <DIO_enuTogPit+0x1c>
    1376:	77 c0       	rjmp	.+238    	; 0x1466 <DIO_enuTogPit+0x10a>
    1378:	8b 81       	ldd	r24, Y+3	; 0x03
    137a:	88 30       	cpi	r24, 0x08	; 8
    137c:	08 f0       	brcs	.+2      	; 0x1380 <DIO_enuTogPit+0x24>
    137e:	73 c0       	rjmp	.+230    	; 0x1466 <DIO_enuTogPit+0x10a>
		Local_enuErrorState = ES_OK;
    1380:	81 e0       	ldi	r24, 0x01	; 1
    1382:	89 83       	std	Y+1, r24	; 0x01

		Local_enuErrorState = ES_OK;
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	89 83       	std	Y+1, r24	; 0x01
		switch (Copy_u8PortID) {
    1388:	8a 81       	ldd	r24, Y+2	; 0x02
    138a:	28 2f       	mov	r18, r24
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	3d 83       	std	Y+5, r19	; 0x05
    1390:	2c 83       	std	Y+4, r18	; 0x04
    1392:	8c 81       	ldd	r24, Y+4	; 0x04
    1394:	9d 81       	ldd	r25, Y+5	; 0x05
    1396:	81 30       	cpi	r24, 0x01	; 1
    1398:	91 05       	cpc	r25, r1
    139a:	49 f1       	breq	.+82     	; 0x13ee <DIO_enuTogPit+0x92>
    139c:	2c 81       	ldd	r18, Y+4	; 0x04
    139e:	3d 81       	ldd	r19, Y+5	; 0x05
    13a0:	22 30       	cpi	r18, 0x02	; 2
    13a2:	31 05       	cpc	r19, r1
    13a4:	2c f4       	brge	.+10     	; 0x13b0 <DIO_enuTogPit+0x54>
    13a6:	8c 81       	ldd	r24, Y+4	; 0x04
    13a8:	9d 81       	ldd	r25, Y+5	; 0x05
    13aa:	00 97       	sbiw	r24, 0x00	; 0
    13ac:	61 f0       	breq	.+24     	; 0x13c6 <DIO_enuTogPit+0x6a>
    13ae:	5d c0       	rjmp	.+186    	; 0x146a <DIO_enuTogPit+0x10e>
    13b0:	2c 81       	ldd	r18, Y+4	; 0x04
    13b2:	3d 81       	ldd	r19, Y+5	; 0x05
    13b4:	22 30       	cpi	r18, 0x02	; 2
    13b6:	31 05       	cpc	r19, r1
    13b8:	71 f1       	breq	.+92     	; 0x1416 <DIO_enuTogPit+0xba>
    13ba:	8c 81       	ldd	r24, Y+4	; 0x04
    13bc:	9d 81       	ldd	r25, Y+5	; 0x05
    13be:	83 30       	cpi	r24, 0x03	; 3
    13c0:	91 05       	cpc	r25, r1
    13c2:	e9 f1       	breq	.+122    	; 0x143e <DIO_enuTogPit+0xe2>
    13c4:	52 c0       	rjmp	.+164    	; 0x146a <DIO_enuTogPit+0x10e>
			case DIO_PORTA:
			PORTA ^= (DIO_MASK_BIT << Copy_u8PinID);
    13c6:	ab e3       	ldi	r26, 0x3B	; 59
    13c8:	b0 e0       	ldi	r27, 0x00	; 0
    13ca:	eb e3       	ldi	r30, 0x3B	; 59
    13cc:	f0 e0       	ldi	r31, 0x00	; 0
    13ce:	80 81       	ld	r24, Z
    13d0:	48 2f       	mov	r20, r24
    13d2:	8b 81       	ldd	r24, Y+3	; 0x03
    13d4:	28 2f       	mov	r18, r24
    13d6:	30 e0       	ldi	r19, 0x00	; 0
    13d8:	81 e0       	ldi	r24, 0x01	; 1
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	02 2e       	mov	r0, r18
    13de:	02 c0       	rjmp	.+4      	; 0x13e4 <DIO_enuTogPit+0x88>
    13e0:	88 0f       	add	r24, r24
    13e2:	99 1f       	adc	r25, r25
    13e4:	0a 94       	dec	r0
    13e6:	e2 f7       	brpl	.-8      	; 0x13e0 <DIO_enuTogPit+0x84>
    13e8:	84 27       	eor	r24, r20
    13ea:	8c 93       	st	X, r24
    13ec:	3e c0       	rjmp	.+124    	; 0x146a <DIO_enuTogPit+0x10e>
			break;
			case DIO_PORTB:
			PORTB ^= (DIO_MASK_BIT << Copy_u8PinID);
    13ee:	a8 e3       	ldi	r26, 0x38	; 56
    13f0:	b0 e0       	ldi	r27, 0x00	; 0
    13f2:	e8 e3       	ldi	r30, 0x38	; 56
    13f4:	f0 e0       	ldi	r31, 0x00	; 0
    13f6:	80 81       	ld	r24, Z
    13f8:	48 2f       	mov	r20, r24
    13fa:	8b 81       	ldd	r24, Y+3	; 0x03
    13fc:	28 2f       	mov	r18, r24
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	81 e0       	ldi	r24, 0x01	; 1
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	02 2e       	mov	r0, r18
    1406:	02 c0       	rjmp	.+4      	; 0x140c <DIO_enuTogPit+0xb0>
    1408:	88 0f       	add	r24, r24
    140a:	99 1f       	adc	r25, r25
    140c:	0a 94       	dec	r0
    140e:	e2 f7       	brpl	.-8      	; 0x1408 <DIO_enuTogPit+0xac>
    1410:	84 27       	eor	r24, r20
    1412:	8c 93       	st	X, r24
    1414:	2a c0       	rjmp	.+84     	; 0x146a <DIO_enuTogPit+0x10e>
			break;
			case DIO_PORTC:
			PORTC ^= (DIO_MASK_BIT << Copy_u8PinID);
    1416:	a5 e3       	ldi	r26, 0x35	; 53
    1418:	b0 e0       	ldi	r27, 0x00	; 0
    141a:	e5 e3       	ldi	r30, 0x35	; 53
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	80 81       	ld	r24, Z
    1420:	48 2f       	mov	r20, r24
    1422:	8b 81       	ldd	r24, Y+3	; 0x03
    1424:	28 2f       	mov	r18, r24
    1426:	30 e0       	ldi	r19, 0x00	; 0
    1428:	81 e0       	ldi	r24, 0x01	; 1
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	02 2e       	mov	r0, r18
    142e:	02 c0       	rjmp	.+4      	; 0x1434 <DIO_enuTogPit+0xd8>
    1430:	88 0f       	add	r24, r24
    1432:	99 1f       	adc	r25, r25
    1434:	0a 94       	dec	r0
    1436:	e2 f7       	brpl	.-8      	; 0x1430 <DIO_enuTogPit+0xd4>
    1438:	84 27       	eor	r24, r20
    143a:	8c 93       	st	X, r24
    143c:	16 c0       	rjmp	.+44     	; 0x146a <DIO_enuTogPit+0x10e>
			break;
			case DIO_PORTD:
			PORTD ^= (DIO_MASK_BIT << Copy_u8PinID);
    143e:	a2 e3       	ldi	r26, 0x32	; 50
    1440:	b0 e0       	ldi	r27, 0x00	; 0
    1442:	e2 e3       	ldi	r30, 0x32	; 50
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	80 81       	ld	r24, Z
    1448:	48 2f       	mov	r20, r24
    144a:	8b 81       	ldd	r24, Y+3	; 0x03
    144c:	28 2f       	mov	r18, r24
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	81 e0       	ldi	r24, 0x01	; 1
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	02 2e       	mov	r0, r18
    1456:	02 c0       	rjmp	.+4      	; 0x145c <DIO_enuTogPit+0x100>
    1458:	88 0f       	add	r24, r24
    145a:	99 1f       	adc	r25, r25
    145c:	0a 94       	dec	r0
    145e:	e2 f7       	brpl	.-8      	; 0x1458 <DIO_enuTogPit+0xfc>
    1460:	84 27       	eor	r24, r20
    1462:	8c 93       	st	X, r24
    1464:	02 c0       	rjmp	.+4      	; 0x146a <DIO_enuTogPit+0x10e>
			break;
		}

		} else {
		Local_enuErrorState = ES_OUT_OF_RANGE;
    1466:	82 e0       	ldi	r24, 0x02	; 2
    1468:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    146a:	89 81       	ldd	r24, Y+1	; 0x01
}
    146c:	0f 90       	pop	r0
    146e:	0f 90       	pop	r0
    1470:	0f 90       	pop	r0
    1472:	0f 90       	pop	r0
    1474:	0f 90       	pop	r0
    1476:	cf 91       	pop	r28
    1478:	df 91       	pop	r29
    147a:	08 95       	ret

0000147c <DIO_enuSetPinDirection>:

ES_t DIO_enuSetPinDirection(u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8Value) {
    147c:	df 93       	push	r29
    147e:	cf 93       	push	r28
    1480:	00 d0       	rcall	.+0      	; 0x1482 <DIO_enuSetPinDirection+0x6>
    1482:	00 d0       	rcall	.+0      	; 0x1484 <DIO_enuSetPinDirection+0x8>
    1484:	00 d0       	rcall	.+0      	; 0x1486 <DIO_enuSetPinDirection+0xa>
    1486:	cd b7       	in	r28, 0x3d	; 61
    1488:	de b7       	in	r29, 0x3e	; 62
    148a:	8a 83       	std	Y+2, r24	; 0x02
    148c:	6b 83       	std	Y+3, r22	; 0x03
    148e:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOTOK;
    1490:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7
    1492:	8a 81       	ldd	r24, Y+2	; 0x02
    1494:	84 30       	cpi	r24, 0x04	; 4
    1496:	08 f0       	brcs	.+2      	; 0x149a <DIO_enuSetPinDirection+0x1e>
    1498:	d1 c0       	rjmp	.+418    	; 0x163c <DIO_enuSetPinDirection+0x1c0>
    149a:	8b 81       	ldd	r24, Y+3	; 0x03
    149c:	88 30       	cpi	r24, 0x08	; 8
    149e:	08 f0       	brcs	.+2      	; 0x14a2 <DIO_enuSetPinDirection+0x26>
    14a0:	cd c0       	rjmp	.+410    	; 0x163c <DIO_enuSetPinDirection+0x1c0>
    14a2:	8c 81       	ldd	r24, Y+4	; 0x04
    14a4:	82 30       	cpi	r24, 0x02	; 2
    14a6:	08 f0       	brcs	.+2      	; 0x14aa <DIO_enuSetPinDirection+0x2e>
    14a8:	c9 c0       	rjmp	.+402    	; 0x163c <DIO_enuSetPinDirection+0x1c0>
	&& Copy_u8Value <= OUTPUT) {
		switch (Copy_u8PortID) {
    14aa:	8a 81       	ldd	r24, Y+2	; 0x02
    14ac:	28 2f       	mov	r18, r24
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	3e 83       	std	Y+6, r19	; 0x06
    14b2:	2d 83       	std	Y+5, r18	; 0x05
    14b4:	6d 81       	ldd	r22, Y+5	; 0x05
    14b6:	7e 81       	ldd	r23, Y+6	; 0x06
    14b8:	61 30       	cpi	r22, 0x01	; 1
    14ba:	71 05       	cpc	r23, r1
    14bc:	09 f4       	brne	.+2      	; 0x14c0 <DIO_enuSetPinDirection+0x44>
    14be:	41 c0       	rjmp	.+130    	; 0x1542 <DIO_enuSetPinDirection+0xc6>
    14c0:	8d 81       	ldd	r24, Y+5	; 0x05
    14c2:	9e 81       	ldd	r25, Y+6	; 0x06
    14c4:	82 30       	cpi	r24, 0x02	; 2
    14c6:	91 05       	cpc	r25, r1
    14c8:	34 f4       	brge	.+12     	; 0x14d6 <DIO_enuSetPinDirection+0x5a>
    14ca:	2d 81       	ldd	r18, Y+5	; 0x05
    14cc:	3e 81       	ldd	r19, Y+6	; 0x06
    14ce:	21 15       	cp	r18, r1
    14d0:	31 05       	cpc	r19, r1
    14d2:	71 f0       	breq	.+28     	; 0x14f0 <DIO_enuSetPinDirection+0x74>
    14d4:	b0 c0       	rjmp	.+352    	; 0x1636 <DIO_enuSetPinDirection+0x1ba>
    14d6:	6d 81       	ldd	r22, Y+5	; 0x05
    14d8:	7e 81       	ldd	r23, Y+6	; 0x06
    14da:	62 30       	cpi	r22, 0x02	; 2
    14dc:	71 05       	cpc	r23, r1
    14de:	09 f4       	brne	.+2      	; 0x14e2 <DIO_enuSetPinDirection+0x66>
    14e0:	59 c0       	rjmp	.+178    	; 0x1594 <DIO_enuSetPinDirection+0x118>
    14e2:	8d 81       	ldd	r24, Y+5	; 0x05
    14e4:	9e 81       	ldd	r25, Y+6	; 0x06
    14e6:	83 30       	cpi	r24, 0x03	; 3
    14e8:	91 05       	cpc	r25, r1
    14ea:	09 f4       	brne	.+2      	; 0x14ee <DIO_enuSetPinDirection+0x72>
    14ec:	7c c0       	rjmp	.+248    	; 0x15e6 <DIO_enuSetPinDirection+0x16a>
    14ee:	a3 c0       	rjmp	.+326    	; 0x1636 <DIO_enuSetPinDirection+0x1ba>
			case DIO_PORTA:
			DDRA &= ~(DIO_MASK_BIT << Copy_u8PinID);
    14f0:	aa e3       	ldi	r26, 0x3A	; 58
    14f2:	b0 e0       	ldi	r27, 0x00	; 0
    14f4:	ea e3       	ldi	r30, 0x3A	; 58
    14f6:	f0 e0       	ldi	r31, 0x00	; 0
    14f8:	80 81       	ld	r24, Z
    14fa:	48 2f       	mov	r20, r24
    14fc:	8b 81       	ldd	r24, Y+3	; 0x03
    14fe:	28 2f       	mov	r18, r24
    1500:	30 e0       	ldi	r19, 0x00	; 0
    1502:	81 e0       	ldi	r24, 0x01	; 1
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	02 c0       	rjmp	.+4      	; 0x150c <DIO_enuSetPinDirection+0x90>
    1508:	88 0f       	add	r24, r24
    150a:	99 1f       	adc	r25, r25
    150c:	2a 95       	dec	r18
    150e:	e2 f7       	brpl	.-8      	; 0x1508 <DIO_enuSetPinDirection+0x8c>
    1510:	80 95       	com	r24
    1512:	84 23       	and	r24, r20
    1514:	8c 93       	st	X, r24
			DDRA |= (Copy_u8Value << Copy_u8PinID);
    1516:	aa e3       	ldi	r26, 0x3A	; 58
    1518:	b0 e0       	ldi	r27, 0x00	; 0
    151a:	ea e3       	ldi	r30, 0x3A	; 58
    151c:	f0 e0       	ldi	r31, 0x00	; 0
    151e:	80 81       	ld	r24, Z
    1520:	48 2f       	mov	r20, r24
    1522:	8c 81       	ldd	r24, Y+4	; 0x04
    1524:	28 2f       	mov	r18, r24
    1526:	30 e0       	ldi	r19, 0x00	; 0
    1528:	8b 81       	ldd	r24, Y+3	; 0x03
    152a:	88 2f       	mov	r24, r24
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	b9 01       	movw	r22, r18
    1530:	02 c0       	rjmp	.+4      	; 0x1536 <DIO_enuSetPinDirection+0xba>
    1532:	66 0f       	add	r22, r22
    1534:	77 1f       	adc	r23, r23
    1536:	8a 95       	dec	r24
    1538:	e2 f7       	brpl	.-8      	; 0x1532 <DIO_enuSetPinDirection+0xb6>
    153a:	cb 01       	movw	r24, r22
    153c:	84 2b       	or	r24, r20
    153e:	8c 93       	st	X, r24
    1540:	7a c0       	rjmp	.+244    	; 0x1636 <DIO_enuSetPinDirection+0x1ba>
			break;
			case DIO_PORTB:
			DDRB &= ~(DIO_MASK_BIT << Copy_u8PinID);
    1542:	a7 e3       	ldi	r26, 0x37	; 55
    1544:	b0 e0       	ldi	r27, 0x00	; 0
    1546:	e7 e3       	ldi	r30, 0x37	; 55
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	80 81       	ld	r24, Z
    154c:	48 2f       	mov	r20, r24
    154e:	8b 81       	ldd	r24, Y+3	; 0x03
    1550:	28 2f       	mov	r18, r24
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	81 e0       	ldi	r24, 0x01	; 1
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	02 c0       	rjmp	.+4      	; 0x155e <DIO_enuSetPinDirection+0xe2>
    155a:	88 0f       	add	r24, r24
    155c:	99 1f       	adc	r25, r25
    155e:	2a 95       	dec	r18
    1560:	e2 f7       	brpl	.-8      	; 0x155a <DIO_enuSetPinDirection+0xde>
    1562:	80 95       	com	r24
    1564:	84 23       	and	r24, r20
    1566:	8c 93       	st	X, r24
			DDRB |= (Copy_u8Value << Copy_u8PinID);
    1568:	a7 e3       	ldi	r26, 0x37	; 55
    156a:	b0 e0       	ldi	r27, 0x00	; 0
    156c:	e7 e3       	ldi	r30, 0x37	; 55
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	80 81       	ld	r24, Z
    1572:	48 2f       	mov	r20, r24
    1574:	8c 81       	ldd	r24, Y+4	; 0x04
    1576:	28 2f       	mov	r18, r24
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	8b 81       	ldd	r24, Y+3	; 0x03
    157c:	88 2f       	mov	r24, r24
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	b9 01       	movw	r22, r18
    1582:	02 c0       	rjmp	.+4      	; 0x1588 <DIO_enuSetPinDirection+0x10c>
    1584:	66 0f       	add	r22, r22
    1586:	77 1f       	adc	r23, r23
    1588:	8a 95       	dec	r24
    158a:	e2 f7       	brpl	.-8      	; 0x1584 <DIO_enuSetPinDirection+0x108>
    158c:	cb 01       	movw	r24, r22
    158e:	84 2b       	or	r24, r20
    1590:	8c 93       	st	X, r24
    1592:	51 c0       	rjmp	.+162    	; 0x1636 <DIO_enuSetPinDirection+0x1ba>
			break;
			case DIO_PORTC:
			DDRC &= ~(DIO_MASK_BIT << Copy_u8PinID);
    1594:	a4 e3       	ldi	r26, 0x34	; 52
    1596:	b0 e0       	ldi	r27, 0x00	; 0
    1598:	e4 e3       	ldi	r30, 0x34	; 52
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	80 81       	ld	r24, Z
    159e:	48 2f       	mov	r20, r24
    15a0:	8b 81       	ldd	r24, Y+3	; 0x03
    15a2:	28 2f       	mov	r18, r24
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	81 e0       	ldi	r24, 0x01	; 1
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	02 c0       	rjmp	.+4      	; 0x15b0 <DIO_enuSetPinDirection+0x134>
    15ac:	88 0f       	add	r24, r24
    15ae:	99 1f       	adc	r25, r25
    15b0:	2a 95       	dec	r18
    15b2:	e2 f7       	brpl	.-8      	; 0x15ac <DIO_enuSetPinDirection+0x130>
    15b4:	80 95       	com	r24
    15b6:	84 23       	and	r24, r20
    15b8:	8c 93       	st	X, r24
			DDRC |= (Copy_u8Value << Copy_u8PinID);
    15ba:	a4 e3       	ldi	r26, 0x34	; 52
    15bc:	b0 e0       	ldi	r27, 0x00	; 0
    15be:	e4 e3       	ldi	r30, 0x34	; 52
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	80 81       	ld	r24, Z
    15c4:	48 2f       	mov	r20, r24
    15c6:	8c 81       	ldd	r24, Y+4	; 0x04
    15c8:	28 2f       	mov	r18, r24
    15ca:	30 e0       	ldi	r19, 0x00	; 0
    15cc:	8b 81       	ldd	r24, Y+3	; 0x03
    15ce:	88 2f       	mov	r24, r24
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	b9 01       	movw	r22, r18
    15d4:	02 c0       	rjmp	.+4      	; 0x15da <DIO_enuSetPinDirection+0x15e>
    15d6:	66 0f       	add	r22, r22
    15d8:	77 1f       	adc	r23, r23
    15da:	8a 95       	dec	r24
    15dc:	e2 f7       	brpl	.-8      	; 0x15d6 <DIO_enuSetPinDirection+0x15a>
    15de:	cb 01       	movw	r24, r22
    15e0:	84 2b       	or	r24, r20
    15e2:	8c 93       	st	X, r24
    15e4:	28 c0       	rjmp	.+80     	; 0x1636 <DIO_enuSetPinDirection+0x1ba>
			break;
			case DIO_PORTD:
			DDRD &= ~(DIO_MASK_BIT << Copy_u8PinID);
    15e6:	a1 e3       	ldi	r26, 0x31	; 49
    15e8:	b0 e0       	ldi	r27, 0x00	; 0
    15ea:	e1 e3       	ldi	r30, 0x31	; 49
    15ec:	f0 e0       	ldi	r31, 0x00	; 0
    15ee:	80 81       	ld	r24, Z
    15f0:	48 2f       	mov	r20, r24
    15f2:	8b 81       	ldd	r24, Y+3	; 0x03
    15f4:	28 2f       	mov	r18, r24
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	81 e0       	ldi	r24, 0x01	; 1
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	02 c0       	rjmp	.+4      	; 0x1602 <DIO_enuSetPinDirection+0x186>
    15fe:	88 0f       	add	r24, r24
    1600:	99 1f       	adc	r25, r25
    1602:	2a 95       	dec	r18
    1604:	e2 f7       	brpl	.-8      	; 0x15fe <DIO_enuSetPinDirection+0x182>
    1606:	80 95       	com	r24
    1608:	84 23       	and	r24, r20
    160a:	8c 93       	st	X, r24
			DDRD |= (Copy_u8Value << Copy_u8PinID);
    160c:	a1 e3       	ldi	r26, 0x31	; 49
    160e:	b0 e0       	ldi	r27, 0x00	; 0
    1610:	e1 e3       	ldi	r30, 0x31	; 49
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	80 81       	ld	r24, Z
    1616:	48 2f       	mov	r20, r24
    1618:	8c 81       	ldd	r24, Y+4	; 0x04
    161a:	28 2f       	mov	r18, r24
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	8b 81       	ldd	r24, Y+3	; 0x03
    1620:	88 2f       	mov	r24, r24
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	b9 01       	movw	r22, r18
    1626:	02 c0       	rjmp	.+4      	; 0x162c <DIO_enuSetPinDirection+0x1b0>
    1628:	66 0f       	add	r22, r22
    162a:	77 1f       	adc	r23, r23
    162c:	8a 95       	dec	r24
    162e:	e2 f7       	brpl	.-8      	; 0x1628 <DIO_enuSetPinDirection+0x1ac>
    1630:	cb 01       	movw	r24, r22
    1632:	84 2b       	or	r24, r20
    1634:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    1636:	81 e0       	ldi	r24, 0x01	; 1
    1638:	89 83       	std	Y+1, r24	; 0x01
    163a:	02 c0       	rjmp	.+4      	; 0x1640 <DIO_enuSetPinDirection+0x1c4>

		} else {
		Local_enuErrorState = ES_OUT_OF_RANGE;
    163c:	82 e0       	ldi	r24, 0x02	; 2
    163e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    1640:	89 81       	ldd	r24, Y+1	; 0x01
}
    1642:	26 96       	adiw	r28, 0x06	; 6
    1644:	0f b6       	in	r0, 0x3f	; 63
    1646:	f8 94       	cli
    1648:	de bf       	out	0x3e, r29	; 62
    164a:	0f be       	out	0x3f, r0	; 63
    164c:	cd bf       	out	0x3d, r28	; 61
    164e:	cf 91       	pop	r28
    1650:	df 91       	pop	r29
    1652:	08 95       	ret

00001654 <DIO_enuSetPintValue>:
ES_t DIO_enuSetPintValue(u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8Value) {
    1654:	df 93       	push	r29
    1656:	cf 93       	push	r28
    1658:	00 d0       	rcall	.+0      	; 0x165a <DIO_enuSetPintValue+0x6>
    165a:	00 d0       	rcall	.+0      	; 0x165c <DIO_enuSetPintValue+0x8>
    165c:	00 d0       	rcall	.+0      	; 0x165e <DIO_enuSetPintValue+0xa>
    165e:	cd b7       	in	r28, 0x3d	; 61
    1660:	de b7       	in	r29, 0x3e	; 62
    1662:	8a 83       	std	Y+2, r24	; 0x02
    1664:	6b 83       	std	Y+3, r22	; 0x03
    1666:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOTOK;
    1668:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7
    166a:	8a 81       	ldd	r24, Y+2	; 0x02
    166c:	84 30       	cpi	r24, 0x04	; 4
    166e:	08 f0       	brcs	.+2      	; 0x1672 <DIO_enuSetPintValue+0x1e>
    1670:	d1 c0       	rjmp	.+418    	; 0x1814 <DIO_enuSetPintValue+0x1c0>
    1672:	8b 81       	ldd	r24, Y+3	; 0x03
    1674:	88 30       	cpi	r24, 0x08	; 8
    1676:	08 f0       	brcs	.+2      	; 0x167a <DIO_enuSetPintValue+0x26>
    1678:	cd c0       	rjmp	.+410    	; 0x1814 <DIO_enuSetPintValue+0x1c0>
    167a:	8c 81       	ldd	r24, Y+4	; 0x04
    167c:	82 30       	cpi	r24, 0x02	; 2
    167e:	08 f0       	brcs	.+2      	; 0x1682 <DIO_enuSetPintValue+0x2e>
    1680:	c9 c0       	rjmp	.+402    	; 0x1814 <DIO_enuSetPintValue+0x1c0>
	&& Copy_u8Value <= OUTPUT) {

		switch (Copy_u8PortID) {
    1682:	8a 81       	ldd	r24, Y+2	; 0x02
    1684:	28 2f       	mov	r18, r24
    1686:	30 e0       	ldi	r19, 0x00	; 0
    1688:	3e 83       	std	Y+6, r19	; 0x06
    168a:	2d 83       	std	Y+5, r18	; 0x05
    168c:	6d 81       	ldd	r22, Y+5	; 0x05
    168e:	7e 81       	ldd	r23, Y+6	; 0x06
    1690:	61 30       	cpi	r22, 0x01	; 1
    1692:	71 05       	cpc	r23, r1
    1694:	09 f4       	brne	.+2      	; 0x1698 <DIO_enuSetPintValue+0x44>
    1696:	41 c0       	rjmp	.+130    	; 0x171a <DIO_enuSetPintValue+0xc6>
    1698:	8d 81       	ldd	r24, Y+5	; 0x05
    169a:	9e 81       	ldd	r25, Y+6	; 0x06
    169c:	82 30       	cpi	r24, 0x02	; 2
    169e:	91 05       	cpc	r25, r1
    16a0:	34 f4       	brge	.+12     	; 0x16ae <DIO_enuSetPintValue+0x5a>
    16a2:	2d 81       	ldd	r18, Y+5	; 0x05
    16a4:	3e 81       	ldd	r19, Y+6	; 0x06
    16a6:	21 15       	cp	r18, r1
    16a8:	31 05       	cpc	r19, r1
    16aa:	71 f0       	breq	.+28     	; 0x16c8 <DIO_enuSetPintValue+0x74>
    16ac:	b0 c0       	rjmp	.+352    	; 0x180e <DIO_enuSetPintValue+0x1ba>
    16ae:	6d 81       	ldd	r22, Y+5	; 0x05
    16b0:	7e 81       	ldd	r23, Y+6	; 0x06
    16b2:	62 30       	cpi	r22, 0x02	; 2
    16b4:	71 05       	cpc	r23, r1
    16b6:	09 f4       	brne	.+2      	; 0x16ba <DIO_enuSetPintValue+0x66>
    16b8:	59 c0       	rjmp	.+178    	; 0x176c <DIO_enuSetPintValue+0x118>
    16ba:	8d 81       	ldd	r24, Y+5	; 0x05
    16bc:	9e 81       	ldd	r25, Y+6	; 0x06
    16be:	83 30       	cpi	r24, 0x03	; 3
    16c0:	91 05       	cpc	r25, r1
    16c2:	09 f4       	brne	.+2      	; 0x16c6 <DIO_enuSetPintValue+0x72>
    16c4:	7c c0       	rjmp	.+248    	; 0x17be <DIO_enuSetPintValue+0x16a>
    16c6:	a3 c0       	rjmp	.+326    	; 0x180e <DIO_enuSetPintValue+0x1ba>
			case DIO_PORTA:
			PORTA &= ~(DIO_MASK_BIT << Copy_u8PinID);
    16c8:	ab e3       	ldi	r26, 0x3B	; 59
    16ca:	b0 e0       	ldi	r27, 0x00	; 0
    16cc:	eb e3       	ldi	r30, 0x3B	; 59
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	80 81       	ld	r24, Z
    16d2:	48 2f       	mov	r20, r24
    16d4:	8b 81       	ldd	r24, Y+3	; 0x03
    16d6:	28 2f       	mov	r18, r24
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	81 e0       	ldi	r24, 0x01	; 1
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	02 c0       	rjmp	.+4      	; 0x16e4 <DIO_enuSetPintValue+0x90>
    16e0:	88 0f       	add	r24, r24
    16e2:	99 1f       	adc	r25, r25
    16e4:	2a 95       	dec	r18
    16e6:	e2 f7       	brpl	.-8      	; 0x16e0 <DIO_enuSetPintValue+0x8c>
    16e8:	80 95       	com	r24
    16ea:	84 23       	and	r24, r20
    16ec:	8c 93       	st	X, r24
			PORTA |= (Copy_u8Value << Copy_u8PinID);
    16ee:	ab e3       	ldi	r26, 0x3B	; 59
    16f0:	b0 e0       	ldi	r27, 0x00	; 0
    16f2:	eb e3       	ldi	r30, 0x3B	; 59
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	80 81       	ld	r24, Z
    16f8:	48 2f       	mov	r20, r24
    16fa:	8c 81       	ldd	r24, Y+4	; 0x04
    16fc:	28 2f       	mov	r18, r24
    16fe:	30 e0       	ldi	r19, 0x00	; 0
    1700:	8b 81       	ldd	r24, Y+3	; 0x03
    1702:	88 2f       	mov	r24, r24
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	b9 01       	movw	r22, r18
    1708:	02 c0       	rjmp	.+4      	; 0x170e <DIO_enuSetPintValue+0xba>
    170a:	66 0f       	add	r22, r22
    170c:	77 1f       	adc	r23, r23
    170e:	8a 95       	dec	r24
    1710:	e2 f7       	brpl	.-8      	; 0x170a <DIO_enuSetPintValue+0xb6>
    1712:	cb 01       	movw	r24, r22
    1714:	84 2b       	or	r24, r20
    1716:	8c 93       	st	X, r24
    1718:	7a c0       	rjmp	.+244    	; 0x180e <DIO_enuSetPintValue+0x1ba>
			break;
			case DIO_PORTB:
			PORTB &= ~(DIO_MASK_BIT << Copy_u8PinID);
    171a:	a8 e3       	ldi	r26, 0x38	; 56
    171c:	b0 e0       	ldi	r27, 0x00	; 0
    171e:	e8 e3       	ldi	r30, 0x38	; 56
    1720:	f0 e0       	ldi	r31, 0x00	; 0
    1722:	80 81       	ld	r24, Z
    1724:	48 2f       	mov	r20, r24
    1726:	8b 81       	ldd	r24, Y+3	; 0x03
    1728:	28 2f       	mov	r18, r24
    172a:	30 e0       	ldi	r19, 0x00	; 0
    172c:	81 e0       	ldi	r24, 0x01	; 1
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	02 c0       	rjmp	.+4      	; 0x1736 <DIO_enuSetPintValue+0xe2>
    1732:	88 0f       	add	r24, r24
    1734:	99 1f       	adc	r25, r25
    1736:	2a 95       	dec	r18
    1738:	e2 f7       	brpl	.-8      	; 0x1732 <DIO_enuSetPintValue+0xde>
    173a:	80 95       	com	r24
    173c:	84 23       	and	r24, r20
    173e:	8c 93       	st	X, r24
			PORTB |= (Copy_u8Value << Copy_u8PinID);
    1740:	a8 e3       	ldi	r26, 0x38	; 56
    1742:	b0 e0       	ldi	r27, 0x00	; 0
    1744:	e8 e3       	ldi	r30, 0x38	; 56
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	80 81       	ld	r24, Z
    174a:	48 2f       	mov	r20, r24
    174c:	8c 81       	ldd	r24, Y+4	; 0x04
    174e:	28 2f       	mov	r18, r24
    1750:	30 e0       	ldi	r19, 0x00	; 0
    1752:	8b 81       	ldd	r24, Y+3	; 0x03
    1754:	88 2f       	mov	r24, r24
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	b9 01       	movw	r22, r18
    175a:	02 c0       	rjmp	.+4      	; 0x1760 <DIO_enuSetPintValue+0x10c>
    175c:	66 0f       	add	r22, r22
    175e:	77 1f       	adc	r23, r23
    1760:	8a 95       	dec	r24
    1762:	e2 f7       	brpl	.-8      	; 0x175c <DIO_enuSetPintValue+0x108>
    1764:	cb 01       	movw	r24, r22
    1766:	84 2b       	or	r24, r20
    1768:	8c 93       	st	X, r24
    176a:	51 c0       	rjmp	.+162    	; 0x180e <DIO_enuSetPintValue+0x1ba>
			break;
			case DIO_PORTC:
			PORTC &= ~(DIO_MASK_BIT << Copy_u8PinID);
    176c:	a5 e3       	ldi	r26, 0x35	; 53
    176e:	b0 e0       	ldi	r27, 0x00	; 0
    1770:	e5 e3       	ldi	r30, 0x35	; 53
    1772:	f0 e0       	ldi	r31, 0x00	; 0
    1774:	80 81       	ld	r24, Z
    1776:	48 2f       	mov	r20, r24
    1778:	8b 81       	ldd	r24, Y+3	; 0x03
    177a:	28 2f       	mov	r18, r24
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	81 e0       	ldi	r24, 0x01	; 1
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	02 c0       	rjmp	.+4      	; 0x1788 <DIO_enuSetPintValue+0x134>
    1784:	88 0f       	add	r24, r24
    1786:	99 1f       	adc	r25, r25
    1788:	2a 95       	dec	r18
    178a:	e2 f7       	brpl	.-8      	; 0x1784 <DIO_enuSetPintValue+0x130>
    178c:	80 95       	com	r24
    178e:	84 23       	and	r24, r20
    1790:	8c 93       	st	X, r24
			PORTC |= (Copy_u8Value << Copy_u8PinID);
    1792:	a5 e3       	ldi	r26, 0x35	; 53
    1794:	b0 e0       	ldi	r27, 0x00	; 0
    1796:	e5 e3       	ldi	r30, 0x35	; 53
    1798:	f0 e0       	ldi	r31, 0x00	; 0
    179a:	80 81       	ld	r24, Z
    179c:	48 2f       	mov	r20, r24
    179e:	8c 81       	ldd	r24, Y+4	; 0x04
    17a0:	28 2f       	mov	r18, r24
    17a2:	30 e0       	ldi	r19, 0x00	; 0
    17a4:	8b 81       	ldd	r24, Y+3	; 0x03
    17a6:	88 2f       	mov	r24, r24
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	b9 01       	movw	r22, r18
    17ac:	02 c0       	rjmp	.+4      	; 0x17b2 <DIO_enuSetPintValue+0x15e>
    17ae:	66 0f       	add	r22, r22
    17b0:	77 1f       	adc	r23, r23
    17b2:	8a 95       	dec	r24
    17b4:	e2 f7       	brpl	.-8      	; 0x17ae <DIO_enuSetPintValue+0x15a>
    17b6:	cb 01       	movw	r24, r22
    17b8:	84 2b       	or	r24, r20
    17ba:	8c 93       	st	X, r24
    17bc:	28 c0       	rjmp	.+80     	; 0x180e <DIO_enuSetPintValue+0x1ba>
			break;
			case DIO_PORTD:
			PORTD &= ~(DIO_MASK_BIT << Copy_u8PinID);
    17be:	a2 e3       	ldi	r26, 0x32	; 50
    17c0:	b0 e0       	ldi	r27, 0x00	; 0
    17c2:	e2 e3       	ldi	r30, 0x32	; 50
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	80 81       	ld	r24, Z
    17c8:	48 2f       	mov	r20, r24
    17ca:	8b 81       	ldd	r24, Y+3	; 0x03
    17cc:	28 2f       	mov	r18, r24
    17ce:	30 e0       	ldi	r19, 0x00	; 0
    17d0:	81 e0       	ldi	r24, 0x01	; 1
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	02 c0       	rjmp	.+4      	; 0x17da <DIO_enuSetPintValue+0x186>
    17d6:	88 0f       	add	r24, r24
    17d8:	99 1f       	adc	r25, r25
    17da:	2a 95       	dec	r18
    17dc:	e2 f7       	brpl	.-8      	; 0x17d6 <DIO_enuSetPintValue+0x182>
    17de:	80 95       	com	r24
    17e0:	84 23       	and	r24, r20
    17e2:	8c 93       	st	X, r24
			PORTD |= (Copy_u8Value << Copy_u8PinID);
    17e4:	a2 e3       	ldi	r26, 0x32	; 50
    17e6:	b0 e0       	ldi	r27, 0x00	; 0
    17e8:	e2 e3       	ldi	r30, 0x32	; 50
    17ea:	f0 e0       	ldi	r31, 0x00	; 0
    17ec:	80 81       	ld	r24, Z
    17ee:	48 2f       	mov	r20, r24
    17f0:	8c 81       	ldd	r24, Y+4	; 0x04
    17f2:	28 2f       	mov	r18, r24
    17f4:	30 e0       	ldi	r19, 0x00	; 0
    17f6:	8b 81       	ldd	r24, Y+3	; 0x03
    17f8:	88 2f       	mov	r24, r24
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	b9 01       	movw	r22, r18
    17fe:	02 c0       	rjmp	.+4      	; 0x1804 <DIO_enuSetPintValue+0x1b0>
    1800:	66 0f       	add	r22, r22
    1802:	77 1f       	adc	r23, r23
    1804:	8a 95       	dec	r24
    1806:	e2 f7       	brpl	.-8      	; 0x1800 <DIO_enuSetPintValue+0x1ac>
    1808:	cb 01       	movw	r24, r22
    180a:	84 2b       	or	r24, r20
    180c:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    180e:	81 e0       	ldi	r24, 0x01	; 1
    1810:	89 83       	std	Y+1, r24	; 0x01
    1812:	02 c0       	rjmp	.+4      	; 0x1818 <DIO_enuSetPintValue+0x1c4>
		} else {
		Local_enuErrorState = ES_OUT_OF_RANGE;
    1814:	82 e0       	ldi	r24, 0x02	; 2
    1816:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    1818:	89 81       	ldd	r24, Y+1	; 0x01
}
    181a:	26 96       	adiw	r28, 0x06	; 6
    181c:	0f b6       	in	r0, 0x3f	; 63
    181e:	f8 94       	cli
    1820:	de bf       	out	0x3e, r29	; 62
    1822:	0f be       	out	0x3f, r0	; 63
    1824:	cd bf       	out	0x3d, r28	; 61
    1826:	cf 91       	pop	r28
    1828:	df 91       	pop	r29
    182a:	08 95       	ret

0000182c <LCD_enuInit>:

#include <util/delay.h>

static u8 LCD_u8PosCounter = 0;

ES_t LCD_enuInit(void) {
    182c:	0f 93       	push	r16
    182e:	1f 93       	push	r17
    1830:	df 93       	push	r29
    1832:	cf 93       	push	r28
    1834:	cd b7       	in	r28, 0x3d	; 61
    1836:	de b7       	in	r29, 0x3e	; 62
    1838:	c8 54       	subi	r28, 0x48	; 72
    183a:	d0 40       	sbci	r29, 0x00	; 0
    183c:	0f b6       	in	r0, 0x3f	; 63
    183e:	f8 94       	cli
    1840:	de bf       	out	0x3e, r29	; 62
    1842:	0f be       	out	0x3f, r0	; 63
    1844:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState = ES_NOTOK;
    1846:	fe 01       	movw	r30, r28
    1848:	e9 5b       	subi	r30, 0xB9	; 185
    184a:	ff 4f       	sbci	r31, 0xFF	; 255
    184c:	10 82       	st	Z, r1

	Local_enuErrorState = DIO_enuSetPinDirection(RS_PORT, RS_PIN, DIO_u8OUTPUT);
    184e:	80 e0       	ldi	r24, 0x00	; 0
    1850:	60 e0       	ldi	r22, 0x00	; 0
    1852:	41 e0       	ldi	r20, 0x01	; 1
    1854:	0e 94 3e 0a 	call	0x147c	; 0x147c <DIO_enuSetPinDirection>
    1858:	fe 01       	movw	r30, r28
    185a:	e9 5b       	subi	r30, 0xB9	; 185
    185c:	ff 4f       	sbci	r31, 0xFF	; 255
    185e:	80 83       	st	Z, r24
	if (Local_enuErrorState != ES_OK)
    1860:	fe 01       	movw	r30, r28
    1862:	e9 5b       	subi	r30, 0xB9	; 185
    1864:	ff 4f       	sbci	r31, 0xFF	; 255
    1866:	80 81       	ld	r24, Z
    1868:	81 30       	cpi	r24, 0x01	; 1
    186a:	41 f0       	breq	.+16     	; 0x187c <LCD_enuInit+0x50>
		return Local_enuErrorState;
    186c:	fe 01       	movw	r30, r28
    186e:	e9 5b       	subi	r30, 0xB9	; 185
    1870:	ff 4f       	sbci	r31, 0xFF	; 255
    1872:	80 81       	ld	r24, Z
    1874:	29 96       	adiw	r28, 0x09	; 9
    1876:	8f af       	std	Y+63, r24	; 0x3f
    1878:	29 97       	sbiw	r28, 0x09	; 9
    187a:	93 c3       	rjmp	.+1830   	; 0x1fa2 <LCD_enuInit+0x776>

	Local_enuErrorState = DIO_enuSetPinDirection(RW_PORT, RW_PIN, DIO_u8OUTPUT);
    187c:	80 e0       	ldi	r24, 0x00	; 0
    187e:	61 e0       	ldi	r22, 0x01	; 1
    1880:	41 e0       	ldi	r20, 0x01	; 1
    1882:	0e 94 3e 0a 	call	0x147c	; 0x147c <DIO_enuSetPinDirection>
    1886:	fe 01       	movw	r30, r28
    1888:	e9 5b       	subi	r30, 0xB9	; 185
    188a:	ff 4f       	sbci	r31, 0xFF	; 255
    188c:	80 83       	st	Z, r24
	if (Local_enuErrorState != ES_OK)
    188e:	fe 01       	movw	r30, r28
    1890:	e9 5b       	subi	r30, 0xB9	; 185
    1892:	ff 4f       	sbci	r31, 0xFF	; 255
    1894:	80 81       	ld	r24, Z
    1896:	81 30       	cpi	r24, 0x01	; 1
    1898:	41 f0       	breq	.+16     	; 0x18aa <LCD_enuInit+0x7e>
		return Local_enuErrorState;
    189a:	fe 01       	movw	r30, r28
    189c:	e9 5b       	subi	r30, 0xB9	; 185
    189e:	ff 4f       	sbci	r31, 0xFF	; 255
    18a0:	80 81       	ld	r24, Z
    18a2:	29 96       	adiw	r28, 0x09	; 9
    18a4:	8f af       	std	Y+63, r24	; 0x3f
    18a6:	29 97       	sbiw	r28, 0x09	; 9
    18a8:	7c c3       	rjmp	.+1784   	; 0x1fa2 <LCD_enuInit+0x776>

	Local_enuErrorState = DIO_enuSetPinDirection(EN_PORT, EN_PIN, DIO_u8OUTPUT);
    18aa:	80 e0       	ldi	r24, 0x00	; 0
    18ac:	62 e0       	ldi	r22, 0x02	; 2
    18ae:	41 e0       	ldi	r20, 0x01	; 1
    18b0:	0e 94 3e 0a 	call	0x147c	; 0x147c <DIO_enuSetPinDirection>
    18b4:	fe 01       	movw	r30, r28
    18b6:	e9 5b       	subi	r30, 0xB9	; 185
    18b8:	ff 4f       	sbci	r31, 0xFF	; 255
    18ba:	80 83       	st	Z, r24
	if (Local_enuErrorState != ES_OK)
    18bc:	fe 01       	movw	r30, r28
    18be:	e9 5b       	subi	r30, 0xB9	; 185
    18c0:	ff 4f       	sbci	r31, 0xFF	; 255
    18c2:	80 81       	ld	r24, Z
    18c4:	81 30       	cpi	r24, 0x01	; 1
    18c6:	41 f0       	breq	.+16     	; 0x18d8 <LCD_enuInit+0xac>
		return Local_enuErrorState;
    18c8:	fe 01       	movw	r30, r28
    18ca:	e9 5b       	subi	r30, 0xB9	; 185
    18cc:	ff 4f       	sbci	r31, 0xFF	; 255
    18ce:	80 81       	ld	r24, Z
    18d0:	29 96       	adiw	r28, 0x09	; 9
    18d2:	8f af       	std	Y+63, r24	; 0x3f
    18d4:	29 97       	sbiw	r28, 0x09	; 9
    18d6:	65 c3       	rjmp	.+1738   	; 0x1fa2 <LCD_enuInit+0x776>

	Local_enuErrorState = DIO_enuSetPinDirection(D7_PORT, D7_PIN, DIO_u8OUTPUT);
    18d8:	81 e0       	ldi	r24, 0x01	; 1
    18da:	67 e0       	ldi	r22, 0x07	; 7
    18dc:	41 e0       	ldi	r20, 0x01	; 1
    18de:	0e 94 3e 0a 	call	0x147c	; 0x147c <DIO_enuSetPinDirection>
    18e2:	fe 01       	movw	r30, r28
    18e4:	e9 5b       	subi	r30, 0xB9	; 185
    18e6:	ff 4f       	sbci	r31, 0xFF	; 255
    18e8:	80 83       	st	Z, r24
	if (Local_enuErrorState != ES_OK)
    18ea:	fe 01       	movw	r30, r28
    18ec:	e9 5b       	subi	r30, 0xB9	; 185
    18ee:	ff 4f       	sbci	r31, 0xFF	; 255
    18f0:	80 81       	ld	r24, Z
    18f2:	81 30       	cpi	r24, 0x01	; 1
    18f4:	41 f0       	breq	.+16     	; 0x1906 <LCD_enuInit+0xda>
		return Local_enuErrorState;
    18f6:	fe 01       	movw	r30, r28
    18f8:	e9 5b       	subi	r30, 0xB9	; 185
    18fa:	ff 4f       	sbci	r31, 0xFF	; 255
    18fc:	80 81       	ld	r24, Z
    18fe:	29 96       	adiw	r28, 0x09	; 9
    1900:	8f af       	std	Y+63, r24	; 0x3f
    1902:	29 97       	sbiw	r28, 0x09	; 9
    1904:	4e c3       	rjmp	.+1692   	; 0x1fa2 <LCD_enuInit+0x776>

	Local_enuErrorState = DIO_enuSetPinDirection(D6_PORT, D6_PIN, DIO_u8OUTPUT);
    1906:	81 e0       	ldi	r24, 0x01	; 1
    1908:	66 e0       	ldi	r22, 0x06	; 6
    190a:	41 e0       	ldi	r20, 0x01	; 1
    190c:	0e 94 3e 0a 	call	0x147c	; 0x147c <DIO_enuSetPinDirection>
    1910:	fe 01       	movw	r30, r28
    1912:	e9 5b       	subi	r30, 0xB9	; 185
    1914:	ff 4f       	sbci	r31, 0xFF	; 255
    1916:	80 83       	st	Z, r24
	if (Local_enuErrorState != ES_OK)
    1918:	fe 01       	movw	r30, r28
    191a:	e9 5b       	subi	r30, 0xB9	; 185
    191c:	ff 4f       	sbci	r31, 0xFF	; 255
    191e:	80 81       	ld	r24, Z
    1920:	81 30       	cpi	r24, 0x01	; 1
    1922:	41 f0       	breq	.+16     	; 0x1934 <LCD_enuInit+0x108>
		return Local_enuErrorState;
    1924:	fe 01       	movw	r30, r28
    1926:	e9 5b       	subi	r30, 0xB9	; 185
    1928:	ff 4f       	sbci	r31, 0xFF	; 255
    192a:	80 81       	ld	r24, Z
    192c:	29 96       	adiw	r28, 0x09	; 9
    192e:	8f af       	std	Y+63, r24	; 0x3f
    1930:	29 97       	sbiw	r28, 0x09	; 9
    1932:	37 c3       	rjmp	.+1646   	; 0x1fa2 <LCD_enuInit+0x776>

	Local_enuErrorState = DIO_enuSetPinDirection(D5_PORT, D5_PIN, DIO_u8OUTPUT);
    1934:	81 e0       	ldi	r24, 0x01	; 1
    1936:	65 e0       	ldi	r22, 0x05	; 5
    1938:	41 e0       	ldi	r20, 0x01	; 1
    193a:	0e 94 3e 0a 	call	0x147c	; 0x147c <DIO_enuSetPinDirection>
    193e:	fe 01       	movw	r30, r28
    1940:	e9 5b       	subi	r30, 0xB9	; 185
    1942:	ff 4f       	sbci	r31, 0xFF	; 255
    1944:	80 83       	st	Z, r24
	if (Local_enuErrorState != ES_OK)
    1946:	fe 01       	movw	r30, r28
    1948:	e9 5b       	subi	r30, 0xB9	; 185
    194a:	ff 4f       	sbci	r31, 0xFF	; 255
    194c:	80 81       	ld	r24, Z
    194e:	81 30       	cpi	r24, 0x01	; 1
    1950:	41 f0       	breq	.+16     	; 0x1962 <LCD_enuInit+0x136>
		return Local_enuErrorState;
    1952:	fe 01       	movw	r30, r28
    1954:	e9 5b       	subi	r30, 0xB9	; 185
    1956:	ff 4f       	sbci	r31, 0xFF	; 255
    1958:	80 81       	ld	r24, Z
    195a:	29 96       	adiw	r28, 0x09	; 9
    195c:	8f af       	std	Y+63, r24	; 0x3f
    195e:	29 97       	sbiw	r28, 0x09	; 9
    1960:	20 c3       	rjmp	.+1600   	; 0x1fa2 <LCD_enuInit+0x776>
	Local_enuErrorState = DIO_enuSetPinDirection(D4_PORT, D4_PIN, DIO_u8OUTPUT);
    1962:	81 e0       	ldi	r24, 0x01	; 1
    1964:	64 e0       	ldi	r22, 0x04	; 4
    1966:	41 e0       	ldi	r20, 0x01	; 1
    1968:	0e 94 3e 0a 	call	0x147c	; 0x147c <DIO_enuSetPinDirection>
    196c:	fe 01       	movw	r30, r28
    196e:	e9 5b       	subi	r30, 0xB9	; 185
    1970:	ff 4f       	sbci	r31, 0xFF	; 255
    1972:	80 83       	st	Z, r24
	if (Local_enuErrorState != ES_OK)
    1974:	fe 01       	movw	r30, r28
    1976:	e9 5b       	subi	r30, 0xB9	; 185
    1978:	ff 4f       	sbci	r31, 0xFF	; 255
    197a:	80 81       	ld	r24, Z
    197c:	81 30       	cpi	r24, 0x01	; 1
    197e:	41 f0       	breq	.+16     	; 0x1990 <LCD_enuInit+0x164>
		return Local_enuErrorState;
    1980:	fe 01       	movw	r30, r28
    1982:	e9 5b       	subi	r30, 0xB9	; 185
    1984:	ff 4f       	sbci	r31, 0xFF	; 255
    1986:	80 81       	ld	r24, Z
    1988:	29 96       	adiw	r28, 0x09	; 9
    198a:	8f af       	std	Y+63, r24	; 0x3f
    198c:	29 97       	sbiw	r28, 0x09	; 9
    198e:	09 c3       	rjmp	.+1554   	; 0x1fa2 <LCD_enuInit+0x776>
    1990:	fe 01       	movw	r30, r28
    1992:	ed 5b       	subi	r30, 0xBD	; 189
    1994:	ff 4f       	sbci	r31, 0xFF	; 255
    1996:	80 e0       	ldi	r24, 0x00	; 0
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	ac e0       	ldi	r26, 0x0C	; 12
    199c:	b2 e4       	ldi	r27, 0x42	; 66
    199e:	80 83       	st	Z, r24
    19a0:	91 83       	std	Z+1, r25	; 0x01
    19a2:	a2 83       	std	Z+2, r26	; 0x02
    19a4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19a6:	8e 01       	movw	r16, r28
    19a8:	01 5c       	subi	r16, 0xC1	; 193
    19aa:	1f 4f       	sbci	r17, 0xFF	; 255
    19ac:	fe 01       	movw	r30, r28
    19ae:	ed 5b       	subi	r30, 0xBD	; 189
    19b0:	ff 4f       	sbci	r31, 0xFF	; 255
    19b2:	60 81       	ld	r22, Z
    19b4:	71 81       	ldd	r23, Z+1	; 0x01
    19b6:	82 81       	ldd	r24, Z+2	; 0x02
    19b8:	93 81       	ldd	r25, Z+3	; 0x03
    19ba:	20 e0       	ldi	r18, 0x00	; 0
    19bc:	30 e0       	ldi	r19, 0x00	; 0
    19be:	4a e7       	ldi	r20, 0x7A	; 122
    19c0:	53 e4       	ldi	r21, 0x43	; 67
    19c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19c6:	dc 01       	movw	r26, r24
    19c8:	cb 01       	movw	r24, r22
    19ca:	f8 01       	movw	r30, r16
    19cc:	80 83       	st	Z, r24
    19ce:	91 83       	std	Z+1, r25	; 0x01
    19d0:	a2 83       	std	Z+2, r26	; 0x02
    19d2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    19d4:	fe 01       	movw	r30, r28
    19d6:	ff 96       	adiw	r30, 0x3f	; 63
    19d8:	60 81       	ld	r22, Z
    19da:	71 81       	ldd	r23, Z+1	; 0x01
    19dc:	82 81       	ldd	r24, Z+2	; 0x02
    19de:	93 81       	ldd	r25, Z+3	; 0x03
    19e0:	20 e0       	ldi	r18, 0x00	; 0
    19e2:	30 e0       	ldi	r19, 0x00	; 0
    19e4:	40 e8       	ldi	r20, 0x80	; 128
    19e6:	5f e3       	ldi	r21, 0x3F	; 63
    19e8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19ec:	88 23       	and	r24, r24
    19ee:	2c f4       	brge	.+10     	; 0x19fa <LCD_enuInit+0x1ce>
		__ticks = 1;
    19f0:	81 e0       	ldi	r24, 0x01	; 1
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	9e af       	std	Y+62, r25	; 0x3e
    19f6:	8d af       	std	Y+61, r24	; 0x3d
    19f8:	46 c0       	rjmp	.+140    	; 0x1a86 <LCD_enuInit+0x25a>
	else if (__tmp > 65535)
    19fa:	fe 01       	movw	r30, r28
    19fc:	ff 96       	adiw	r30, 0x3f	; 63
    19fe:	60 81       	ld	r22, Z
    1a00:	71 81       	ldd	r23, Z+1	; 0x01
    1a02:	82 81       	ldd	r24, Z+2	; 0x02
    1a04:	93 81       	ldd	r25, Z+3	; 0x03
    1a06:	20 e0       	ldi	r18, 0x00	; 0
    1a08:	3f ef       	ldi	r19, 0xFF	; 255
    1a0a:	4f e7       	ldi	r20, 0x7F	; 127
    1a0c:	57 e4       	ldi	r21, 0x47	; 71
    1a0e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a12:	18 16       	cp	r1, r24
    1a14:	64 f5       	brge	.+88     	; 0x1a6e <LCD_enuInit+0x242>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a16:	fe 01       	movw	r30, r28
    1a18:	ed 5b       	subi	r30, 0xBD	; 189
    1a1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a1c:	60 81       	ld	r22, Z
    1a1e:	71 81       	ldd	r23, Z+1	; 0x01
    1a20:	82 81       	ldd	r24, Z+2	; 0x02
    1a22:	93 81       	ldd	r25, Z+3	; 0x03
    1a24:	20 e0       	ldi	r18, 0x00	; 0
    1a26:	30 e0       	ldi	r19, 0x00	; 0
    1a28:	40 e2       	ldi	r20, 0x20	; 32
    1a2a:	51 e4       	ldi	r21, 0x41	; 65
    1a2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a30:	dc 01       	movw	r26, r24
    1a32:	cb 01       	movw	r24, r22
    1a34:	bc 01       	movw	r22, r24
    1a36:	cd 01       	movw	r24, r26
    1a38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a3c:	dc 01       	movw	r26, r24
    1a3e:	cb 01       	movw	r24, r22
    1a40:	9e af       	std	Y+62, r25	; 0x3e
    1a42:	8d af       	std	Y+61, r24	; 0x3d
    1a44:	0f c0       	rjmp	.+30     	; 0x1a64 <LCD_enuInit+0x238>
    1a46:	89 e1       	ldi	r24, 0x19	; 25
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    1a4a:	9c af       	std	Y+60, r25	; 0x3c
    1a4c:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a4e:	8b ad       	ldd	r24, Y+59	; 0x3b
    1a50:	9c ad       	ldd	r25, Y+60	; 0x3c
    1a52:	01 97       	sbiw	r24, 0x01	; 1
    1a54:	f1 f7       	brne	.-4      	; 0x1a52 <LCD_enuInit+0x226>
    1a56:	9c af       	std	Y+60, r25	; 0x3c
    1a58:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a5a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a5c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a5e:	01 97       	sbiw	r24, 0x01	; 1
    1a60:	9e af       	std	Y+62, r25	; 0x3e
    1a62:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a64:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a66:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a68:	00 97       	sbiw	r24, 0x00	; 0
    1a6a:	69 f7       	brne	.-38     	; 0x1a46 <LCD_enuInit+0x21a>
    1a6c:	16 c0       	rjmp	.+44     	; 0x1a9a <LCD_enuInit+0x26e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a6e:	fe 01       	movw	r30, r28
    1a70:	ff 96       	adiw	r30, 0x3f	; 63
    1a72:	60 81       	ld	r22, Z
    1a74:	71 81       	ldd	r23, Z+1	; 0x01
    1a76:	82 81       	ldd	r24, Z+2	; 0x02
    1a78:	93 81       	ldd	r25, Z+3	; 0x03
    1a7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a7e:	dc 01       	movw	r26, r24
    1a80:	cb 01       	movw	r24, r22
    1a82:	9e af       	std	Y+62, r25	; 0x3e
    1a84:	8d af       	std	Y+61, r24	; 0x3d
    1a86:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a88:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a8a:	9a af       	std	Y+58, r25	; 0x3a
    1a8c:	89 af       	std	Y+57, r24	; 0x39
    1a8e:	89 ad       	ldd	r24, Y+57	; 0x39
    1a90:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a92:	01 97       	sbiw	r24, 0x01	; 1
    1a94:	f1 f7       	brne	.-4      	; 0x1a92 <LCD_enuInit+0x266>
    1a96:	9a af       	std	Y+58, r25	; 0x3a
    1a98:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(35);

#if LCD_MODE == EIGHT_BIT
	Local_enuErrorState = DIO_enuSetPinDirection(D3_PORT, D3_PIN, DIO_u8OUTPUT);
    1a9a:	81 e0       	ldi	r24, 0x01	; 1
    1a9c:	63 e0       	ldi	r22, 0x03	; 3
    1a9e:	41 e0       	ldi	r20, 0x01	; 1
    1aa0:	0e 94 3e 0a 	call	0x147c	; 0x147c <DIO_enuSetPinDirection>
    1aa4:	fe 01       	movw	r30, r28
    1aa6:	e9 5b       	subi	r30, 0xB9	; 185
    1aa8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aaa:	80 83       	st	Z, r24
	if (Local_enuErrorState != ES_OK)
    1aac:	fe 01       	movw	r30, r28
    1aae:	e9 5b       	subi	r30, 0xB9	; 185
    1ab0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab2:	80 81       	ld	r24, Z
    1ab4:	81 30       	cpi	r24, 0x01	; 1
    1ab6:	41 f0       	breq	.+16     	; 0x1ac8 <LCD_enuInit+0x29c>
		return Local_enuErrorState;
    1ab8:	fe 01       	movw	r30, r28
    1aba:	e9 5b       	subi	r30, 0xB9	; 185
    1abc:	ff 4f       	sbci	r31, 0xFF	; 255
    1abe:	80 81       	ld	r24, Z
    1ac0:	29 96       	adiw	r28, 0x09	; 9
    1ac2:	8f af       	std	Y+63, r24	; 0x3f
    1ac4:	29 97       	sbiw	r28, 0x09	; 9
    1ac6:	6d c2       	rjmp	.+1242   	; 0x1fa2 <LCD_enuInit+0x776>

	Local_enuErrorState = DIO_enuSetPinDirection(D2_PORT, D2_PIN, DIO_u8OUTPUT);
    1ac8:	81 e0       	ldi	r24, 0x01	; 1
    1aca:	62 e0       	ldi	r22, 0x02	; 2
    1acc:	41 e0       	ldi	r20, 0x01	; 1
    1ace:	0e 94 3e 0a 	call	0x147c	; 0x147c <DIO_enuSetPinDirection>
    1ad2:	fe 01       	movw	r30, r28
    1ad4:	e9 5b       	subi	r30, 0xB9	; 185
    1ad6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad8:	80 83       	st	Z, r24
	if (Local_enuErrorState != ES_OK)
    1ada:	fe 01       	movw	r30, r28
    1adc:	e9 5b       	subi	r30, 0xB9	; 185
    1ade:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae0:	80 81       	ld	r24, Z
    1ae2:	81 30       	cpi	r24, 0x01	; 1
    1ae4:	41 f0       	breq	.+16     	; 0x1af6 <LCD_enuInit+0x2ca>
		return Local_enuErrorState;
    1ae6:	fe 01       	movw	r30, r28
    1ae8:	e9 5b       	subi	r30, 0xB9	; 185
    1aea:	ff 4f       	sbci	r31, 0xFF	; 255
    1aec:	80 81       	ld	r24, Z
    1aee:	29 96       	adiw	r28, 0x09	; 9
    1af0:	8f af       	std	Y+63, r24	; 0x3f
    1af2:	29 97       	sbiw	r28, 0x09	; 9
    1af4:	56 c2       	rjmp	.+1196   	; 0x1fa2 <LCD_enuInit+0x776>

	Local_enuErrorState = DIO_enuSetPinDirection(D1_PORT, D1_PIN, DIO_u8OUTPUT);
    1af6:	81 e0       	ldi	r24, 0x01	; 1
    1af8:	61 e0       	ldi	r22, 0x01	; 1
    1afa:	41 e0       	ldi	r20, 0x01	; 1
    1afc:	0e 94 3e 0a 	call	0x147c	; 0x147c <DIO_enuSetPinDirection>
    1b00:	fe 01       	movw	r30, r28
    1b02:	e9 5b       	subi	r30, 0xB9	; 185
    1b04:	ff 4f       	sbci	r31, 0xFF	; 255
    1b06:	80 83       	st	Z, r24
	if (Local_enuErrorState != ES_OK)
    1b08:	fe 01       	movw	r30, r28
    1b0a:	e9 5b       	subi	r30, 0xB9	; 185
    1b0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b0e:	80 81       	ld	r24, Z
    1b10:	81 30       	cpi	r24, 0x01	; 1
    1b12:	41 f0       	breq	.+16     	; 0x1b24 <LCD_enuInit+0x2f8>
		return Local_enuErrorState;
    1b14:	fe 01       	movw	r30, r28
    1b16:	e9 5b       	subi	r30, 0xB9	; 185
    1b18:	ff 4f       	sbci	r31, 0xFF	; 255
    1b1a:	80 81       	ld	r24, Z
    1b1c:	29 96       	adiw	r28, 0x09	; 9
    1b1e:	8f af       	std	Y+63, r24	; 0x3f
    1b20:	29 97       	sbiw	r28, 0x09	; 9
    1b22:	3f c2       	rjmp	.+1150   	; 0x1fa2 <LCD_enuInit+0x776>

	Local_enuErrorState = DIO_enuSetPinDirection(D0_PORT, D0_PIN, DIO_u8OUTPUT);
    1b24:	81 e0       	ldi	r24, 0x01	; 1
    1b26:	60 e0       	ldi	r22, 0x00	; 0
    1b28:	41 e0       	ldi	r20, 0x01	; 1
    1b2a:	0e 94 3e 0a 	call	0x147c	; 0x147c <DIO_enuSetPinDirection>
    1b2e:	fe 01       	movw	r30, r28
    1b30:	e9 5b       	subi	r30, 0xB9	; 185
    1b32:	ff 4f       	sbci	r31, 0xFF	; 255
    1b34:	80 83       	st	Z, r24
	if (Local_enuErrorState != ES_OK)
    1b36:	fe 01       	movw	r30, r28
    1b38:	e9 5b       	subi	r30, 0xB9	; 185
    1b3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b3c:	80 81       	ld	r24, Z
    1b3e:	81 30       	cpi	r24, 0x01	; 1
    1b40:	41 f0       	breq	.+16     	; 0x1b52 <LCD_enuInit+0x326>
		return Local_enuErrorState;
    1b42:	fe 01       	movw	r30, r28
    1b44:	e9 5b       	subi	r30, 0xB9	; 185
    1b46:	ff 4f       	sbci	r31, 0xFF	; 255
    1b48:	80 81       	ld	r24, Z
    1b4a:	29 96       	adiw	r28, 0x09	; 9
    1b4c:	8f af       	std	Y+63, r24	; 0x3f
    1b4e:	29 97       	sbiw	r28, 0x09	; 9
    1b50:	28 c2       	rjmp	.+1104   	; 0x1fa2 <LCD_enuInit+0x776>

	Local_enuErrorState = LCD_inlenuSendCommand(0x38);
    1b52:	88 e3       	ldi	r24, 0x38	; 56
    1b54:	0e 94 79 11 	call	0x22f2	; 0x22f2 <LCD_inlenuSendCommand>
    1b58:	fe 01       	movw	r30, r28
    1b5a:	e9 5b       	subi	r30, 0xB9	; 185
    1b5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5e:	80 83       	st	Z, r24
	if (Local_enuErrorState != ES_OK)
    1b60:	fe 01       	movw	r30, r28
    1b62:	e9 5b       	subi	r30, 0xB9	; 185
    1b64:	ff 4f       	sbci	r31, 0xFF	; 255
    1b66:	80 81       	ld	r24, Z
    1b68:	81 30       	cpi	r24, 0x01	; 1
    1b6a:	41 f0       	breq	.+16     	; 0x1b7c <LCD_enuInit+0x350>
		return Local_enuErrorState;
    1b6c:	fe 01       	movw	r30, r28
    1b6e:	e9 5b       	subi	r30, 0xB9	; 185
    1b70:	ff 4f       	sbci	r31, 0xFF	; 255
    1b72:	80 81       	ld	r24, Z
    1b74:	29 96       	adiw	r28, 0x09	; 9
    1b76:	8f af       	std	Y+63, r24	; 0x3f
    1b78:	29 97       	sbiw	r28, 0x09	; 9
    1b7a:	13 c2       	rjmp	.+1062   	; 0x1fa2 <LCD_enuInit+0x776>
    1b7c:	80 e0       	ldi	r24, 0x00	; 0
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	a0 e8       	ldi	r26, 0x80	; 128
    1b82:	bf e3       	ldi	r27, 0x3F	; 63
    1b84:	8d ab       	std	Y+53, r24	; 0x35
    1b86:	9e ab       	std	Y+54, r25	; 0x36
    1b88:	af ab       	std	Y+55, r26	; 0x37
    1b8a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b8c:	6d a9       	ldd	r22, Y+53	; 0x35
    1b8e:	7e a9       	ldd	r23, Y+54	; 0x36
    1b90:	8f a9       	ldd	r24, Y+55	; 0x37
    1b92:	98 ad       	ldd	r25, Y+56	; 0x38
    1b94:	20 e0       	ldi	r18, 0x00	; 0
    1b96:	30 e0       	ldi	r19, 0x00	; 0
    1b98:	4a e7       	ldi	r20, 0x7A	; 122
    1b9a:	53 e4       	ldi	r21, 0x43	; 67
    1b9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ba0:	dc 01       	movw	r26, r24
    1ba2:	cb 01       	movw	r24, r22
    1ba4:	89 ab       	std	Y+49, r24	; 0x31
    1ba6:	9a ab       	std	Y+50, r25	; 0x32
    1ba8:	ab ab       	std	Y+51, r26	; 0x33
    1baa:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1bac:	69 a9       	ldd	r22, Y+49	; 0x31
    1bae:	7a a9       	ldd	r23, Y+50	; 0x32
    1bb0:	8b a9       	ldd	r24, Y+51	; 0x33
    1bb2:	9c a9       	ldd	r25, Y+52	; 0x34
    1bb4:	20 e0       	ldi	r18, 0x00	; 0
    1bb6:	30 e0       	ldi	r19, 0x00	; 0
    1bb8:	40 e8       	ldi	r20, 0x80	; 128
    1bba:	5f e3       	ldi	r21, 0x3F	; 63
    1bbc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bc0:	88 23       	and	r24, r24
    1bc2:	2c f4       	brge	.+10     	; 0x1bce <LCD_enuInit+0x3a2>
		__ticks = 1;
    1bc4:	81 e0       	ldi	r24, 0x01	; 1
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	98 ab       	std	Y+48, r25	; 0x30
    1bca:	8f a7       	std	Y+47, r24	; 0x2f
    1bcc:	3f c0       	rjmp	.+126    	; 0x1c4c <LCD_enuInit+0x420>
	else if (__tmp > 65535)
    1bce:	69 a9       	ldd	r22, Y+49	; 0x31
    1bd0:	7a a9       	ldd	r23, Y+50	; 0x32
    1bd2:	8b a9       	ldd	r24, Y+51	; 0x33
    1bd4:	9c a9       	ldd	r25, Y+52	; 0x34
    1bd6:	20 e0       	ldi	r18, 0x00	; 0
    1bd8:	3f ef       	ldi	r19, 0xFF	; 255
    1bda:	4f e7       	ldi	r20, 0x7F	; 127
    1bdc:	57 e4       	ldi	r21, 0x47	; 71
    1bde:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1be2:	18 16       	cp	r1, r24
    1be4:	4c f5       	brge	.+82     	; 0x1c38 <LCD_enuInit+0x40c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1be6:	6d a9       	ldd	r22, Y+53	; 0x35
    1be8:	7e a9       	ldd	r23, Y+54	; 0x36
    1bea:	8f a9       	ldd	r24, Y+55	; 0x37
    1bec:	98 ad       	ldd	r25, Y+56	; 0x38
    1bee:	20 e0       	ldi	r18, 0x00	; 0
    1bf0:	30 e0       	ldi	r19, 0x00	; 0
    1bf2:	40 e2       	ldi	r20, 0x20	; 32
    1bf4:	51 e4       	ldi	r21, 0x41	; 65
    1bf6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bfa:	dc 01       	movw	r26, r24
    1bfc:	cb 01       	movw	r24, r22
    1bfe:	bc 01       	movw	r22, r24
    1c00:	cd 01       	movw	r24, r26
    1c02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c06:	dc 01       	movw	r26, r24
    1c08:	cb 01       	movw	r24, r22
    1c0a:	98 ab       	std	Y+48, r25	; 0x30
    1c0c:	8f a7       	std	Y+47, r24	; 0x2f
    1c0e:	0f c0       	rjmp	.+30     	; 0x1c2e <LCD_enuInit+0x402>
    1c10:	89 e1       	ldi	r24, 0x19	; 25
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	9e a7       	std	Y+46, r25	; 0x2e
    1c16:	8d a7       	std	Y+45, r24	; 0x2d
    1c18:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c1a:	9e a5       	ldd	r25, Y+46	; 0x2e
    1c1c:	01 97       	sbiw	r24, 0x01	; 1
    1c1e:	f1 f7       	brne	.-4      	; 0x1c1c <LCD_enuInit+0x3f0>
    1c20:	9e a7       	std	Y+46, r25	; 0x2e
    1c22:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c24:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c26:	98 a9       	ldd	r25, Y+48	; 0x30
    1c28:	01 97       	sbiw	r24, 0x01	; 1
    1c2a:	98 ab       	std	Y+48, r25	; 0x30
    1c2c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c2e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c30:	98 a9       	ldd	r25, Y+48	; 0x30
    1c32:	00 97       	sbiw	r24, 0x00	; 0
    1c34:	69 f7       	brne	.-38     	; 0x1c10 <LCD_enuInit+0x3e4>
    1c36:	14 c0       	rjmp	.+40     	; 0x1c60 <LCD_enuInit+0x434>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c38:	69 a9       	ldd	r22, Y+49	; 0x31
    1c3a:	7a a9       	ldd	r23, Y+50	; 0x32
    1c3c:	8b a9       	ldd	r24, Y+51	; 0x33
    1c3e:	9c a9       	ldd	r25, Y+52	; 0x34
    1c40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c44:	dc 01       	movw	r26, r24
    1c46:	cb 01       	movw	r24, r22
    1c48:	98 ab       	std	Y+48, r25	; 0x30
    1c4a:	8f a7       	std	Y+47, r24	; 0x2f
    1c4c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c4e:	98 a9       	ldd	r25, Y+48	; 0x30
    1c50:	9c a7       	std	Y+44, r25	; 0x2c
    1c52:	8b a7       	std	Y+43, r24	; 0x2b
    1c54:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c56:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c58:	01 97       	sbiw	r24, 0x01	; 1
    1c5a:	f1 f7       	brne	.-4      	; 0x1c58 <LCD_enuInit+0x42c>
    1c5c:	9c a7       	std	Y+44, r25	; 0x2c
    1c5e:	8b a7       	std	Y+43, r24	; 0x2b
#else
#error "wrong configuration of LCD mode!!"
#endif

	/* Display ON/OFF Control */
	Local_enuErrorState = LCD_inlenuSendCommand(0x0F);
    1c60:	8f e0       	ldi	r24, 0x0F	; 15
    1c62:	0e 94 79 11 	call	0x22f2	; 0x22f2 <LCD_inlenuSendCommand>
    1c66:	fe 01       	movw	r30, r28
    1c68:	e9 5b       	subi	r30, 0xB9	; 185
    1c6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c6c:	80 83       	st	Z, r24
	if (Local_enuErrorState != ES_OK)
    1c6e:	fe 01       	movw	r30, r28
    1c70:	e9 5b       	subi	r30, 0xB9	; 185
    1c72:	ff 4f       	sbci	r31, 0xFF	; 255
    1c74:	80 81       	ld	r24, Z
    1c76:	81 30       	cpi	r24, 0x01	; 1
    1c78:	41 f0       	breq	.+16     	; 0x1c8a <LCD_enuInit+0x45e>
		return Local_enuErrorState;
    1c7a:	fe 01       	movw	r30, r28
    1c7c:	e9 5b       	subi	r30, 0xB9	; 185
    1c7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c80:	80 81       	ld	r24, Z
    1c82:	29 96       	adiw	r28, 0x09	; 9
    1c84:	8f af       	std	Y+63, r24	; 0x3f
    1c86:	29 97       	sbiw	r28, 0x09	; 9
    1c88:	8c c1       	rjmp	.+792    	; 0x1fa2 <LCD_enuInit+0x776>
    1c8a:	80 e0       	ldi	r24, 0x00	; 0
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	a0 e8       	ldi	r26, 0x80	; 128
    1c90:	bf e3       	ldi	r27, 0x3F	; 63
    1c92:	8f a3       	std	Y+39, r24	; 0x27
    1c94:	98 a7       	std	Y+40, r25	; 0x28
    1c96:	a9 a7       	std	Y+41, r26	; 0x29
    1c98:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c9a:	6f a1       	ldd	r22, Y+39	; 0x27
    1c9c:	78 a5       	ldd	r23, Y+40	; 0x28
    1c9e:	89 a5       	ldd	r24, Y+41	; 0x29
    1ca0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ca2:	20 e0       	ldi	r18, 0x00	; 0
    1ca4:	30 e0       	ldi	r19, 0x00	; 0
    1ca6:	4a e7       	ldi	r20, 0x7A	; 122
    1ca8:	53 e4       	ldi	r21, 0x43	; 67
    1caa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cae:	dc 01       	movw	r26, r24
    1cb0:	cb 01       	movw	r24, r22
    1cb2:	8b a3       	std	Y+35, r24	; 0x23
    1cb4:	9c a3       	std	Y+36, r25	; 0x24
    1cb6:	ad a3       	std	Y+37, r26	; 0x25
    1cb8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1cba:	6b a1       	ldd	r22, Y+35	; 0x23
    1cbc:	7c a1       	ldd	r23, Y+36	; 0x24
    1cbe:	8d a1       	ldd	r24, Y+37	; 0x25
    1cc0:	9e a1       	ldd	r25, Y+38	; 0x26
    1cc2:	20 e0       	ldi	r18, 0x00	; 0
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	40 e8       	ldi	r20, 0x80	; 128
    1cc8:	5f e3       	ldi	r21, 0x3F	; 63
    1cca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cce:	88 23       	and	r24, r24
    1cd0:	2c f4       	brge	.+10     	; 0x1cdc <LCD_enuInit+0x4b0>
		__ticks = 1;
    1cd2:	81 e0       	ldi	r24, 0x01	; 1
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
    1cd6:	9a a3       	std	Y+34, r25	; 0x22
    1cd8:	89 a3       	std	Y+33, r24	; 0x21
    1cda:	3f c0       	rjmp	.+126    	; 0x1d5a <LCD_enuInit+0x52e>
	else if (__tmp > 65535)
    1cdc:	6b a1       	ldd	r22, Y+35	; 0x23
    1cde:	7c a1       	ldd	r23, Y+36	; 0x24
    1ce0:	8d a1       	ldd	r24, Y+37	; 0x25
    1ce2:	9e a1       	ldd	r25, Y+38	; 0x26
    1ce4:	20 e0       	ldi	r18, 0x00	; 0
    1ce6:	3f ef       	ldi	r19, 0xFF	; 255
    1ce8:	4f e7       	ldi	r20, 0x7F	; 127
    1cea:	57 e4       	ldi	r21, 0x47	; 71
    1cec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cf0:	18 16       	cp	r1, r24
    1cf2:	4c f5       	brge	.+82     	; 0x1d46 <LCD_enuInit+0x51a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cf4:	6f a1       	ldd	r22, Y+39	; 0x27
    1cf6:	78 a5       	ldd	r23, Y+40	; 0x28
    1cf8:	89 a5       	ldd	r24, Y+41	; 0x29
    1cfa:	9a a5       	ldd	r25, Y+42	; 0x2a
    1cfc:	20 e0       	ldi	r18, 0x00	; 0
    1cfe:	30 e0       	ldi	r19, 0x00	; 0
    1d00:	40 e2       	ldi	r20, 0x20	; 32
    1d02:	51 e4       	ldi	r21, 0x41	; 65
    1d04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d08:	dc 01       	movw	r26, r24
    1d0a:	cb 01       	movw	r24, r22
    1d0c:	bc 01       	movw	r22, r24
    1d0e:	cd 01       	movw	r24, r26
    1d10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d14:	dc 01       	movw	r26, r24
    1d16:	cb 01       	movw	r24, r22
    1d18:	9a a3       	std	Y+34, r25	; 0x22
    1d1a:	89 a3       	std	Y+33, r24	; 0x21
    1d1c:	0f c0       	rjmp	.+30     	; 0x1d3c <LCD_enuInit+0x510>
    1d1e:	89 e1       	ldi	r24, 0x19	; 25
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	98 a3       	std	Y+32, r25	; 0x20
    1d24:	8f 8f       	std	Y+31, r24	; 0x1f
    1d26:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d28:	98 a1       	ldd	r25, Y+32	; 0x20
    1d2a:	01 97       	sbiw	r24, 0x01	; 1
    1d2c:	f1 f7       	brne	.-4      	; 0x1d2a <LCD_enuInit+0x4fe>
    1d2e:	98 a3       	std	Y+32, r25	; 0x20
    1d30:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d32:	89 a1       	ldd	r24, Y+33	; 0x21
    1d34:	9a a1       	ldd	r25, Y+34	; 0x22
    1d36:	01 97       	sbiw	r24, 0x01	; 1
    1d38:	9a a3       	std	Y+34, r25	; 0x22
    1d3a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d3c:	89 a1       	ldd	r24, Y+33	; 0x21
    1d3e:	9a a1       	ldd	r25, Y+34	; 0x22
    1d40:	00 97       	sbiw	r24, 0x00	; 0
    1d42:	69 f7       	brne	.-38     	; 0x1d1e <LCD_enuInit+0x4f2>
    1d44:	14 c0       	rjmp	.+40     	; 0x1d6e <LCD_enuInit+0x542>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d46:	6b a1       	ldd	r22, Y+35	; 0x23
    1d48:	7c a1       	ldd	r23, Y+36	; 0x24
    1d4a:	8d a1       	ldd	r24, Y+37	; 0x25
    1d4c:	9e a1       	ldd	r25, Y+38	; 0x26
    1d4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d52:	dc 01       	movw	r26, r24
    1d54:	cb 01       	movw	r24, r22
    1d56:	9a a3       	std	Y+34, r25	; 0x22
    1d58:	89 a3       	std	Y+33, r24	; 0x21
    1d5a:	89 a1       	ldd	r24, Y+33	; 0x21
    1d5c:	9a a1       	ldd	r25, Y+34	; 0x22
    1d5e:	9e 8f       	std	Y+30, r25	; 0x1e
    1d60:	8d 8f       	std	Y+29, r24	; 0x1d
    1d62:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d64:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d66:	01 97       	sbiw	r24, 0x01	; 1
    1d68:	f1 f7       	brne	.-4      	; 0x1d66 <LCD_enuInit+0x53a>
    1d6a:	9e 8f       	std	Y+30, r25	; 0x1e
    1d6c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	/* Display Clear */
	Local_enuErrorState = LCD_inlenuSendCommand(0x01);
    1d6e:	81 e0       	ldi	r24, 0x01	; 1
    1d70:	0e 94 79 11 	call	0x22f2	; 0x22f2 <LCD_inlenuSendCommand>
    1d74:	fe 01       	movw	r30, r28
    1d76:	e9 5b       	subi	r30, 0xB9	; 185
    1d78:	ff 4f       	sbci	r31, 0xFF	; 255
    1d7a:	80 83       	st	Z, r24
	if (Local_enuErrorState != ES_OK)
    1d7c:	fe 01       	movw	r30, r28
    1d7e:	e9 5b       	subi	r30, 0xB9	; 185
    1d80:	ff 4f       	sbci	r31, 0xFF	; 255
    1d82:	80 81       	ld	r24, Z
    1d84:	81 30       	cpi	r24, 0x01	; 1
    1d86:	41 f0       	breq	.+16     	; 0x1d98 <LCD_enuInit+0x56c>
		return Local_enuErrorState;
    1d88:	fe 01       	movw	r30, r28
    1d8a:	e9 5b       	subi	r30, 0xB9	; 185
    1d8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d8e:	80 81       	ld	r24, Z
    1d90:	29 96       	adiw	r28, 0x09	; 9
    1d92:	8f af       	std	Y+63, r24	; 0x3f
    1d94:	29 97       	sbiw	r28, 0x09	; 9
    1d96:	05 c1       	rjmp	.+522    	; 0x1fa2 <LCD_enuInit+0x776>
    1d98:	80 e0       	ldi	r24, 0x00	; 0
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	a0 e0       	ldi	r26, 0x00	; 0
    1d9e:	b0 e4       	ldi	r27, 0x40	; 64
    1da0:	89 8f       	std	Y+25, r24	; 0x19
    1da2:	9a 8f       	std	Y+26, r25	; 0x1a
    1da4:	ab 8f       	std	Y+27, r26	; 0x1b
    1da6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1da8:	69 8d       	ldd	r22, Y+25	; 0x19
    1daa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1dac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1db0:	20 e0       	ldi	r18, 0x00	; 0
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	4a e7       	ldi	r20, 0x7A	; 122
    1db6:	53 e4       	ldi	r21, 0x43	; 67
    1db8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dbc:	dc 01       	movw	r26, r24
    1dbe:	cb 01       	movw	r24, r22
    1dc0:	8d 8b       	std	Y+21, r24	; 0x15
    1dc2:	9e 8b       	std	Y+22, r25	; 0x16
    1dc4:	af 8b       	std	Y+23, r26	; 0x17
    1dc6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1dc8:	6d 89       	ldd	r22, Y+21	; 0x15
    1dca:	7e 89       	ldd	r23, Y+22	; 0x16
    1dcc:	8f 89       	ldd	r24, Y+23	; 0x17
    1dce:	98 8d       	ldd	r25, Y+24	; 0x18
    1dd0:	20 e0       	ldi	r18, 0x00	; 0
    1dd2:	30 e0       	ldi	r19, 0x00	; 0
    1dd4:	40 e8       	ldi	r20, 0x80	; 128
    1dd6:	5f e3       	ldi	r21, 0x3F	; 63
    1dd8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ddc:	88 23       	and	r24, r24
    1dde:	2c f4       	brge	.+10     	; 0x1dea <LCD_enuInit+0x5be>
		__ticks = 1;
    1de0:	81 e0       	ldi	r24, 0x01	; 1
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	9c 8b       	std	Y+20, r25	; 0x14
    1de6:	8b 8b       	std	Y+19, r24	; 0x13
    1de8:	3f c0       	rjmp	.+126    	; 0x1e68 <LCD_enuInit+0x63c>
	else if (__tmp > 65535)
    1dea:	6d 89       	ldd	r22, Y+21	; 0x15
    1dec:	7e 89       	ldd	r23, Y+22	; 0x16
    1dee:	8f 89       	ldd	r24, Y+23	; 0x17
    1df0:	98 8d       	ldd	r25, Y+24	; 0x18
    1df2:	20 e0       	ldi	r18, 0x00	; 0
    1df4:	3f ef       	ldi	r19, 0xFF	; 255
    1df6:	4f e7       	ldi	r20, 0x7F	; 127
    1df8:	57 e4       	ldi	r21, 0x47	; 71
    1dfa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dfe:	18 16       	cp	r1, r24
    1e00:	4c f5       	brge	.+82     	; 0x1e54 <LCD_enuInit+0x628>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e02:	69 8d       	ldd	r22, Y+25	; 0x19
    1e04:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e06:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e08:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e0a:	20 e0       	ldi	r18, 0x00	; 0
    1e0c:	30 e0       	ldi	r19, 0x00	; 0
    1e0e:	40 e2       	ldi	r20, 0x20	; 32
    1e10:	51 e4       	ldi	r21, 0x41	; 65
    1e12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e16:	dc 01       	movw	r26, r24
    1e18:	cb 01       	movw	r24, r22
    1e1a:	bc 01       	movw	r22, r24
    1e1c:	cd 01       	movw	r24, r26
    1e1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e22:	dc 01       	movw	r26, r24
    1e24:	cb 01       	movw	r24, r22
    1e26:	9c 8b       	std	Y+20, r25	; 0x14
    1e28:	8b 8b       	std	Y+19, r24	; 0x13
    1e2a:	0f c0       	rjmp	.+30     	; 0x1e4a <LCD_enuInit+0x61e>
    1e2c:	89 e1       	ldi	r24, 0x19	; 25
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	9a 8b       	std	Y+18, r25	; 0x12
    1e32:	89 8b       	std	Y+17, r24	; 0x11
    1e34:	89 89       	ldd	r24, Y+17	; 0x11
    1e36:	9a 89       	ldd	r25, Y+18	; 0x12
    1e38:	01 97       	sbiw	r24, 0x01	; 1
    1e3a:	f1 f7       	brne	.-4      	; 0x1e38 <LCD_enuInit+0x60c>
    1e3c:	9a 8b       	std	Y+18, r25	; 0x12
    1e3e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e40:	8b 89       	ldd	r24, Y+19	; 0x13
    1e42:	9c 89       	ldd	r25, Y+20	; 0x14
    1e44:	01 97       	sbiw	r24, 0x01	; 1
    1e46:	9c 8b       	std	Y+20, r25	; 0x14
    1e48:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e4a:	8b 89       	ldd	r24, Y+19	; 0x13
    1e4c:	9c 89       	ldd	r25, Y+20	; 0x14
    1e4e:	00 97       	sbiw	r24, 0x00	; 0
    1e50:	69 f7       	brne	.-38     	; 0x1e2c <LCD_enuInit+0x600>
    1e52:	14 c0       	rjmp	.+40     	; 0x1e7c <LCD_enuInit+0x650>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e54:	6d 89       	ldd	r22, Y+21	; 0x15
    1e56:	7e 89       	ldd	r23, Y+22	; 0x16
    1e58:	8f 89       	ldd	r24, Y+23	; 0x17
    1e5a:	98 8d       	ldd	r25, Y+24	; 0x18
    1e5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e60:	dc 01       	movw	r26, r24
    1e62:	cb 01       	movw	r24, r22
    1e64:	9c 8b       	std	Y+20, r25	; 0x14
    1e66:	8b 8b       	std	Y+19, r24	; 0x13
    1e68:	8b 89       	ldd	r24, Y+19	; 0x13
    1e6a:	9c 89       	ldd	r25, Y+20	; 0x14
    1e6c:	98 8b       	std	Y+16, r25	; 0x10
    1e6e:	8f 87       	std	Y+15, r24	; 0x0f
    1e70:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e72:	98 89       	ldd	r25, Y+16	; 0x10
    1e74:	01 97       	sbiw	r24, 0x01	; 1
    1e76:	f1 f7       	brne	.-4      	; 0x1e74 <LCD_enuInit+0x648>
    1e78:	98 8b       	std	Y+16, r25	; 0x10
    1e7a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);

	/* Entry Mode Set */
	Local_enuErrorState = LCD_inlenuSendCommand(0x06);
    1e7c:	86 e0       	ldi	r24, 0x06	; 6
    1e7e:	0e 94 79 11 	call	0x22f2	; 0x22f2 <LCD_inlenuSendCommand>
    1e82:	fe 01       	movw	r30, r28
    1e84:	e9 5b       	subi	r30, 0xB9	; 185
    1e86:	ff 4f       	sbci	r31, 0xFF	; 255
    1e88:	80 83       	st	Z, r24
	if (Local_enuErrorState != ES_OK)
    1e8a:	fe 01       	movw	r30, r28
    1e8c:	e9 5b       	subi	r30, 0xB9	; 185
    1e8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e90:	80 81       	ld	r24, Z
    1e92:	81 30       	cpi	r24, 0x01	; 1
    1e94:	41 f0       	breq	.+16     	; 0x1ea6 <LCD_enuInit+0x67a>
		return Local_enuErrorState;
    1e96:	fe 01       	movw	r30, r28
    1e98:	e9 5b       	subi	r30, 0xB9	; 185
    1e9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e9c:	80 81       	ld	r24, Z
    1e9e:	29 96       	adiw	r28, 0x09	; 9
    1ea0:	8f af       	std	Y+63, r24	; 0x3f
    1ea2:	29 97       	sbiw	r28, 0x09	; 9
    1ea4:	7e c0       	rjmp	.+252    	; 0x1fa2 <LCD_enuInit+0x776>
    1ea6:	80 e0       	ldi	r24, 0x00	; 0
    1ea8:	90 e0       	ldi	r25, 0x00	; 0
    1eaa:	a0 e8       	ldi	r26, 0x80	; 128
    1eac:	bf e3       	ldi	r27, 0x3F	; 63
    1eae:	8b 87       	std	Y+11, r24	; 0x0b
    1eb0:	9c 87       	std	Y+12, r25	; 0x0c
    1eb2:	ad 87       	std	Y+13, r26	; 0x0d
    1eb4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eb6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1eb8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1eba:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ebc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ebe:	20 e0       	ldi	r18, 0x00	; 0
    1ec0:	30 e0       	ldi	r19, 0x00	; 0
    1ec2:	4a e7       	ldi	r20, 0x7A	; 122
    1ec4:	53 e4       	ldi	r21, 0x43	; 67
    1ec6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eca:	dc 01       	movw	r26, r24
    1ecc:	cb 01       	movw	r24, r22
    1ece:	8f 83       	std	Y+7, r24	; 0x07
    1ed0:	98 87       	std	Y+8, r25	; 0x08
    1ed2:	a9 87       	std	Y+9, r26	; 0x09
    1ed4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ed6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ed8:	78 85       	ldd	r23, Y+8	; 0x08
    1eda:	89 85       	ldd	r24, Y+9	; 0x09
    1edc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ede:	20 e0       	ldi	r18, 0x00	; 0
    1ee0:	30 e0       	ldi	r19, 0x00	; 0
    1ee2:	40 e8       	ldi	r20, 0x80	; 128
    1ee4:	5f e3       	ldi	r21, 0x3F	; 63
    1ee6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1eea:	88 23       	and	r24, r24
    1eec:	2c f4       	brge	.+10     	; 0x1ef8 <LCD_enuInit+0x6cc>
		__ticks = 1;
    1eee:	81 e0       	ldi	r24, 0x01	; 1
    1ef0:	90 e0       	ldi	r25, 0x00	; 0
    1ef2:	9e 83       	std	Y+6, r25	; 0x06
    1ef4:	8d 83       	std	Y+5, r24	; 0x05
    1ef6:	3f c0       	rjmp	.+126    	; 0x1f76 <LCD_enuInit+0x74a>
	else if (__tmp > 65535)
    1ef8:	6f 81       	ldd	r22, Y+7	; 0x07
    1efa:	78 85       	ldd	r23, Y+8	; 0x08
    1efc:	89 85       	ldd	r24, Y+9	; 0x09
    1efe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f00:	20 e0       	ldi	r18, 0x00	; 0
    1f02:	3f ef       	ldi	r19, 0xFF	; 255
    1f04:	4f e7       	ldi	r20, 0x7F	; 127
    1f06:	57 e4       	ldi	r21, 0x47	; 71
    1f08:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f0c:	18 16       	cp	r1, r24
    1f0e:	4c f5       	brge	.+82     	; 0x1f62 <LCD_enuInit+0x736>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f10:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f12:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f14:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f16:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f18:	20 e0       	ldi	r18, 0x00	; 0
    1f1a:	30 e0       	ldi	r19, 0x00	; 0
    1f1c:	40 e2       	ldi	r20, 0x20	; 32
    1f1e:	51 e4       	ldi	r21, 0x41	; 65
    1f20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f24:	dc 01       	movw	r26, r24
    1f26:	cb 01       	movw	r24, r22
    1f28:	bc 01       	movw	r22, r24
    1f2a:	cd 01       	movw	r24, r26
    1f2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f30:	dc 01       	movw	r26, r24
    1f32:	cb 01       	movw	r24, r22
    1f34:	9e 83       	std	Y+6, r25	; 0x06
    1f36:	8d 83       	std	Y+5, r24	; 0x05
    1f38:	0f c0       	rjmp	.+30     	; 0x1f58 <LCD_enuInit+0x72c>
    1f3a:	89 e1       	ldi	r24, 0x19	; 25
    1f3c:	90 e0       	ldi	r25, 0x00	; 0
    1f3e:	9c 83       	std	Y+4, r25	; 0x04
    1f40:	8b 83       	std	Y+3, r24	; 0x03
    1f42:	8b 81       	ldd	r24, Y+3	; 0x03
    1f44:	9c 81       	ldd	r25, Y+4	; 0x04
    1f46:	01 97       	sbiw	r24, 0x01	; 1
    1f48:	f1 f7       	brne	.-4      	; 0x1f46 <LCD_enuInit+0x71a>
    1f4a:	9c 83       	std	Y+4, r25	; 0x04
    1f4c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f4e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f50:	9e 81       	ldd	r25, Y+6	; 0x06
    1f52:	01 97       	sbiw	r24, 0x01	; 1
    1f54:	9e 83       	std	Y+6, r25	; 0x06
    1f56:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f58:	8d 81       	ldd	r24, Y+5	; 0x05
    1f5a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f5c:	00 97       	sbiw	r24, 0x00	; 0
    1f5e:	69 f7       	brne	.-38     	; 0x1f3a <LCD_enuInit+0x70e>
    1f60:	14 c0       	rjmp	.+40     	; 0x1f8a <LCD_enuInit+0x75e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f62:	6f 81       	ldd	r22, Y+7	; 0x07
    1f64:	78 85       	ldd	r23, Y+8	; 0x08
    1f66:	89 85       	ldd	r24, Y+9	; 0x09
    1f68:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f6e:	dc 01       	movw	r26, r24
    1f70:	cb 01       	movw	r24, r22
    1f72:	9e 83       	std	Y+6, r25	; 0x06
    1f74:	8d 83       	std	Y+5, r24	; 0x05
    1f76:	8d 81       	ldd	r24, Y+5	; 0x05
    1f78:	9e 81       	ldd	r25, Y+6	; 0x06
    1f7a:	9a 83       	std	Y+2, r25	; 0x02
    1f7c:	89 83       	std	Y+1, r24	; 0x01
    1f7e:	89 81       	ldd	r24, Y+1	; 0x01
    1f80:	9a 81       	ldd	r25, Y+2	; 0x02
    1f82:	01 97       	sbiw	r24, 0x01	; 1
    1f84:	f1 f7       	brne	.-4      	; 0x1f82 <LCD_enuInit+0x756>
    1f86:	9a 83       	std	Y+2, r25	; 0x02
    1f88:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

	Local_enuErrorState = ES_OK;
    1f8a:	fe 01       	movw	r30, r28
    1f8c:	e9 5b       	subi	r30, 0xB9	; 185
    1f8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f90:	81 e0       	ldi	r24, 0x01	; 1
    1f92:	80 83       	st	Z, r24
	return Local_enuErrorState;
    1f94:	fe 01       	movw	r30, r28
    1f96:	e9 5b       	subi	r30, 0xB9	; 185
    1f98:	ff 4f       	sbci	r31, 0xFF	; 255
    1f9a:	80 81       	ld	r24, Z
    1f9c:	29 96       	adiw	r28, 0x09	; 9
    1f9e:	8f af       	std	Y+63, r24	; 0x3f
    1fa0:	29 97       	sbiw	r28, 0x09	; 9
    1fa2:	29 96       	adiw	r28, 0x09	; 9
    1fa4:	8f ad       	ldd	r24, Y+63	; 0x3f
    1fa6:	29 97       	sbiw	r28, 0x09	; 9
}
    1fa8:	c8 5b       	subi	r28, 0xB8	; 184
    1faa:	df 4f       	sbci	r29, 0xFF	; 255
    1fac:	0f b6       	in	r0, 0x3f	; 63
    1fae:	f8 94       	cli
    1fb0:	de bf       	out	0x3e, r29	; 62
    1fb2:	0f be       	out	0x3f, r0	; 63
    1fb4:	cd bf       	out	0x3d, r28	; 61
    1fb6:	cf 91       	pop	r28
    1fb8:	df 91       	pop	r29
    1fba:	1f 91       	pop	r17
    1fbc:	0f 91       	pop	r16
    1fbe:	08 95       	ret

00001fc0 <LCD_enuDisplayChar>:

ES_t LCD_enuDisplayChar(u8 Copy_u8Data) {
    1fc0:	df 93       	push	r29
    1fc2:	cf 93       	push	r28
    1fc4:	00 d0       	rcall	.+0      	; 0x1fc6 <LCD_enuDisplayChar+0x6>
    1fc6:	0f 92       	push	r0
    1fc8:	cd b7       	in	r28, 0x3d	; 61
    1fca:	de b7       	in	r29, 0x3e	; 62
    1fcc:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOTOK;
    1fce:	19 82       	std	Y+1, r1	; 0x01

	LCD_vidCheckPosition();
    1fd0:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <LCD_vidCheckPosition>

	Local_enuErrorState = DIO_enuSetPintValue(RS_PORT, RS_PIN, DIO_u8HIGH);
    1fd4:	80 e0       	ldi	r24, 0x00	; 0
    1fd6:	60 e0       	ldi	r22, 0x00	; 0
    1fd8:	41 e0       	ldi	r20, 0x01	; 1
    1fda:	0e 94 2a 0b 	call	0x1654	; 0x1654 <DIO_enuSetPintValue>
    1fde:	89 83       	std	Y+1, r24	; 0x01
	if (Local_enuErrorState != ES_OK)
    1fe0:	89 81       	ldd	r24, Y+1	; 0x01
    1fe2:	81 30       	cpi	r24, 0x01	; 1
    1fe4:	19 f0       	breq	.+6      	; 0x1fec <LCD_enuDisplayChar+0x2c>
		return Local_enuErrorState;
    1fe6:	89 81       	ldd	r24, Y+1	; 0x01
    1fe8:	8b 83       	std	Y+3, r24	; 0x03
    1fea:	0e c0       	rjmp	.+28     	; 0x2008 <LCD_enuDisplayChar+0x48>

	Local_enuErrorState = LCD_enuLatch(Copy_u8Data);
    1fec:	8a 81       	ldd	r24, Y+2	; 0x02
    1fee:	0e 94 34 10 	call	0x2068	; 0x2068 <LCD_enuLatch>
    1ff2:	89 83       	std	Y+1, r24	; 0x01
	if (Local_enuErrorState != ES_OK)
    1ff4:	89 81       	ldd	r24, Y+1	; 0x01
    1ff6:	81 30       	cpi	r24, 0x01	; 1
    1ff8:	19 f0       	breq	.+6      	; 0x2000 <LCD_enuDisplayChar+0x40>
		return Local_enuErrorState;
    1ffa:	89 81       	ldd	r24, Y+1	; 0x01
    1ffc:	8b 83       	std	Y+3, r24	; 0x03
    1ffe:	04 c0       	rjmp	.+8      	; 0x2008 <LCD_enuDisplayChar+0x48>

	Local_enuErrorState = ES_OK;
    2000:	81 e0       	ldi	r24, 0x01	; 1
    2002:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorState;
    2004:	89 81       	ldd	r24, Y+1	; 0x01
    2006:	8b 83       	std	Y+3, r24	; 0x03
    2008:	8b 81       	ldd	r24, Y+3	; 0x03
}
    200a:	0f 90       	pop	r0
    200c:	0f 90       	pop	r0
    200e:	0f 90       	pop	r0
    2010:	cf 91       	pop	r28
    2012:	df 91       	pop	r29
    2014:	08 95       	ret

00002016 <LCD_enuSendCommand>:

ES_t LCD_enuSendCommand(u8 Copy_u8Command) {
    2016:	df 93       	push	r29
    2018:	cf 93       	push	r28
    201a:	00 d0       	rcall	.+0      	; 0x201c <LCD_enuSendCommand+0x6>
    201c:	0f 92       	push	r0
    201e:	cd b7       	in	r28, 0x3d	; 61
    2020:	de b7       	in	r29, 0x3e	; 62
    2022:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOTOK;
    2024:	19 82       	std	Y+1, r1	; 0x01

	/* RS --> LOW to write Command */
	Local_enuErrorState = DIO_enuSetPintValue(RS_PORT, RS_PIN, DIO_u8LOW);
    2026:	80 e0       	ldi	r24, 0x00	; 0
    2028:	60 e0       	ldi	r22, 0x00	; 0
    202a:	40 e0       	ldi	r20, 0x00	; 0
    202c:	0e 94 2a 0b 	call	0x1654	; 0x1654 <DIO_enuSetPintValue>
    2030:	89 83       	std	Y+1, r24	; 0x01
	if (Local_enuErrorState != ES_OK)
    2032:	89 81       	ldd	r24, Y+1	; 0x01
    2034:	81 30       	cpi	r24, 0x01	; 1
    2036:	19 f0       	breq	.+6      	; 0x203e <LCD_enuSendCommand+0x28>
		return Local_enuErrorState;
    2038:	89 81       	ldd	r24, Y+1	; 0x01
    203a:	8b 83       	std	Y+3, r24	; 0x03
    203c:	0e c0       	rjmp	.+28     	; 0x205a <LCD_enuSendCommand+0x44>

	/* Call Latch Function */
	Local_enuErrorState = LCD_enuLatch(Copy_u8Command);
    203e:	8a 81       	ldd	r24, Y+2	; 0x02
    2040:	0e 94 34 10 	call	0x2068	; 0x2068 <LCD_enuLatch>
    2044:	89 83       	std	Y+1, r24	; 0x01
	if (Local_enuErrorState != ES_OK)
    2046:	89 81       	ldd	r24, Y+1	; 0x01
    2048:	81 30       	cpi	r24, 0x01	; 1
    204a:	19 f0       	breq	.+6      	; 0x2052 <LCD_enuSendCommand+0x3c>
		return Local_enuErrorState;
    204c:	89 81       	ldd	r24, Y+1	; 0x01
    204e:	8b 83       	std	Y+3, r24	; 0x03
    2050:	04 c0       	rjmp	.+8      	; 0x205a <LCD_enuSendCommand+0x44>

	Local_enuErrorState = ES_OK;
    2052:	81 e0       	ldi	r24, 0x01	; 1
    2054:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorState;
    2056:	89 81       	ldd	r24, Y+1	; 0x01
    2058:	8b 83       	std	Y+3, r24	; 0x03
    205a:	8b 81       	ldd	r24, Y+3	; 0x03
}
    205c:	0f 90       	pop	r0
    205e:	0f 90       	pop	r0
    2060:	0f 90       	pop	r0
    2062:	cf 91       	pop	r28
    2064:	df 91       	pop	r29
    2066:	08 95       	ret

00002068 <LCD_enuLatch>:

static ES_t LCD_enuLatch(u8 Copy_u8Data) {
    2068:	df 93       	push	r29
    206a:	cf 93       	push	r28
    206c:	00 d0       	rcall	.+0      	; 0x206e <LCD_enuLatch+0x6>
    206e:	0f 92       	push	r0
    2070:	cd b7       	in	r28, 0x3d	; 61
    2072:	de b7       	in	r29, 0x3e	; 62
    2074:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOTOK;
    2076:	19 82       	std	Y+1, r1	; 0x01

	Local_enuErrorState = DIO_enuSetPintValue(RW_PORT, RW_PIN, DIO_u8LOW);
    2078:	80 e0       	ldi	r24, 0x00	; 0
    207a:	61 e0       	ldi	r22, 0x01	; 1
    207c:	40 e0       	ldi	r20, 0x00	; 0
    207e:	0e 94 2a 0b 	call	0x1654	; 0x1654 <DIO_enuSetPintValue>
    2082:	89 83       	std	Y+1, r24	; 0x01
	if (Local_enuErrorState != ES_OK)
    2084:	89 81       	ldd	r24, Y+1	; 0x01
    2086:	81 30       	cpi	r24, 0x01	; 1
    2088:	19 f0       	breq	.+6      	; 0x2090 <LCD_enuLatch+0x28>
		return Local_enuErrorState;
    208a:	89 81       	ldd	r24, Y+1	; 0x01
    208c:	8b 83       	std	Y+3, r24	; 0x03
    208e:	9b c0       	rjmp	.+310    	; 0x21c6 <LCD_enuLatch+0x15e>

	Local_enuErrorState = DIO_enuSetPintValue(EN_PORT, EN_PIN, DIO_u8LOW);
    2090:	80 e0       	ldi	r24, 0x00	; 0
    2092:	62 e0       	ldi	r22, 0x02	; 2
    2094:	40 e0       	ldi	r20, 0x00	; 0
    2096:	0e 94 2a 0b 	call	0x1654	; 0x1654 <DIO_enuSetPintValue>
    209a:	89 83       	std	Y+1, r24	; 0x01
	if (Local_enuErrorState != ES_OK)
    209c:	89 81       	ldd	r24, Y+1	; 0x01
    209e:	81 30       	cpi	r24, 0x01	; 1
    20a0:	19 f0       	breq	.+6      	; 0x20a8 <LCD_enuLatch+0x40>
		return Local_enuErrorState;
    20a2:	89 81       	ldd	r24, Y+1	; 0x01
    20a4:	8b 83       	std	Y+3, r24	; 0x03
    20a6:	8f c0       	rjmp	.+286    	; 0x21c6 <LCD_enuLatch+0x15e>

#if LCD_MODE == EIGHT_BIT
	Local_enuErrorState = DIO_enuSetPintValue(D7_PORT, D7_PIN,
    20a8:	8a 81       	ldd	r24, Y+2	; 0x02
    20aa:	98 2f       	mov	r25, r24
    20ac:	99 1f       	adc	r25, r25
    20ae:	99 27       	eor	r25, r25
    20b0:	99 1f       	adc	r25, r25
    20b2:	81 e0       	ldi	r24, 0x01	; 1
    20b4:	67 e0       	ldi	r22, 0x07	; 7
    20b6:	49 2f       	mov	r20, r25
    20b8:	0e 94 2a 0b 	call	0x1654	; 0x1654 <DIO_enuSetPintValue>
    20bc:	89 83       	std	Y+1, r24	; 0x01
			((Copy_u8Data >> 7) & MASK_BIT));
	if (Local_enuErrorState != ES_OK)
    20be:	89 81       	ldd	r24, Y+1	; 0x01
    20c0:	81 30       	cpi	r24, 0x01	; 1
    20c2:	19 f0       	breq	.+6      	; 0x20ca <LCD_enuLatch+0x62>
		return Local_enuErrorState;
    20c4:	89 81       	ldd	r24, Y+1	; 0x01
    20c6:	8b 83       	std	Y+3, r24	; 0x03
    20c8:	7e c0       	rjmp	.+252    	; 0x21c6 <LCD_enuLatch+0x15e>

	Local_enuErrorState = DIO_enuSetPintValue(D6_PORT, D6_PIN,
    20ca:	8a 81       	ldd	r24, Y+2	; 0x02
    20cc:	82 95       	swap	r24
    20ce:	86 95       	lsr	r24
    20d0:	86 95       	lsr	r24
    20d2:	83 70       	andi	r24, 0x03	; 3
    20d4:	98 2f       	mov	r25, r24
    20d6:	91 70       	andi	r25, 0x01	; 1
    20d8:	81 e0       	ldi	r24, 0x01	; 1
    20da:	66 e0       	ldi	r22, 0x06	; 6
    20dc:	49 2f       	mov	r20, r25
    20de:	0e 94 2a 0b 	call	0x1654	; 0x1654 <DIO_enuSetPintValue>
    20e2:	89 83       	std	Y+1, r24	; 0x01
			((Copy_u8Data >> 6) & MASK_BIT));
	if (Local_enuErrorState != ES_OK)
    20e4:	89 81       	ldd	r24, Y+1	; 0x01
    20e6:	81 30       	cpi	r24, 0x01	; 1
    20e8:	19 f0       	breq	.+6      	; 0x20f0 <LCD_enuLatch+0x88>
		return Local_enuErrorState;
    20ea:	89 81       	ldd	r24, Y+1	; 0x01
    20ec:	8b 83       	std	Y+3, r24	; 0x03
    20ee:	6b c0       	rjmp	.+214    	; 0x21c6 <LCD_enuLatch+0x15e>

	Local_enuErrorState = DIO_enuSetPintValue(D5_PORT, D5_PIN,
    20f0:	8a 81       	ldd	r24, Y+2	; 0x02
    20f2:	82 95       	swap	r24
    20f4:	86 95       	lsr	r24
    20f6:	87 70       	andi	r24, 0x07	; 7
    20f8:	98 2f       	mov	r25, r24
    20fa:	91 70       	andi	r25, 0x01	; 1
    20fc:	81 e0       	ldi	r24, 0x01	; 1
    20fe:	65 e0       	ldi	r22, 0x05	; 5
    2100:	49 2f       	mov	r20, r25
    2102:	0e 94 2a 0b 	call	0x1654	; 0x1654 <DIO_enuSetPintValue>
    2106:	89 83       	std	Y+1, r24	; 0x01
			((Copy_u8Data >> 5) & MASK_BIT));
	if (Local_enuErrorState != ES_OK)
    2108:	89 81       	ldd	r24, Y+1	; 0x01
    210a:	81 30       	cpi	r24, 0x01	; 1
    210c:	19 f0       	breq	.+6      	; 0x2114 <LCD_enuLatch+0xac>
		return Local_enuErrorState;
    210e:	89 81       	ldd	r24, Y+1	; 0x01
    2110:	8b 83       	std	Y+3, r24	; 0x03
    2112:	59 c0       	rjmp	.+178    	; 0x21c6 <LCD_enuLatch+0x15e>

	Local_enuErrorState = DIO_enuSetPintValue(D4_PORT, D4_PIN,
    2114:	8a 81       	ldd	r24, Y+2	; 0x02
    2116:	82 95       	swap	r24
    2118:	8f 70       	andi	r24, 0x0F	; 15
    211a:	98 2f       	mov	r25, r24
    211c:	91 70       	andi	r25, 0x01	; 1
    211e:	81 e0       	ldi	r24, 0x01	; 1
    2120:	64 e0       	ldi	r22, 0x04	; 4
    2122:	49 2f       	mov	r20, r25
    2124:	0e 94 2a 0b 	call	0x1654	; 0x1654 <DIO_enuSetPintValue>
    2128:	89 83       	std	Y+1, r24	; 0x01
			((Copy_u8Data >> 4) & MASK_BIT));
	if (Local_enuErrorState != ES_OK)
    212a:	89 81       	ldd	r24, Y+1	; 0x01
    212c:	81 30       	cpi	r24, 0x01	; 1
    212e:	19 f0       	breq	.+6      	; 0x2136 <LCD_enuLatch+0xce>
		return Local_enuErrorState;
    2130:	89 81       	ldd	r24, Y+1	; 0x01
    2132:	8b 83       	std	Y+3, r24	; 0x03
    2134:	48 c0       	rjmp	.+144    	; 0x21c6 <LCD_enuLatch+0x15e>

	Local_enuErrorState = DIO_enuSetPintValue(D3_PORT, D3_PIN,
    2136:	8a 81       	ldd	r24, Y+2	; 0x02
    2138:	86 95       	lsr	r24
    213a:	86 95       	lsr	r24
    213c:	86 95       	lsr	r24
    213e:	98 2f       	mov	r25, r24
    2140:	91 70       	andi	r25, 0x01	; 1
    2142:	81 e0       	ldi	r24, 0x01	; 1
    2144:	63 e0       	ldi	r22, 0x03	; 3
    2146:	49 2f       	mov	r20, r25
    2148:	0e 94 2a 0b 	call	0x1654	; 0x1654 <DIO_enuSetPintValue>
    214c:	89 83       	std	Y+1, r24	; 0x01
			((Copy_u8Data >> 3) & MASK_BIT));
	if (Local_enuErrorState != ES_OK)
    214e:	89 81       	ldd	r24, Y+1	; 0x01
    2150:	81 30       	cpi	r24, 0x01	; 1
    2152:	19 f0       	breq	.+6      	; 0x215a <LCD_enuLatch+0xf2>
		return Local_enuErrorState;
    2154:	89 81       	ldd	r24, Y+1	; 0x01
    2156:	8b 83       	std	Y+3, r24	; 0x03
    2158:	36 c0       	rjmp	.+108    	; 0x21c6 <LCD_enuLatch+0x15e>

	Local_enuErrorState = DIO_enuSetPintValue(D2_PORT, D2_PIN,
    215a:	8a 81       	ldd	r24, Y+2	; 0x02
    215c:	86 95       	lsr	r24
    215e:	86 95       	lsr	r24
    2160:	98 2f       	mov	r25, r24
    2162:	91 70       	andi	r25, 0x01	; 1
    2164:	81 e0       	ldi	r24, 0x01	; 1
    2166:	62 e0       	ldi	r22, 0x02	; 2
    2168:	49 2f       	mov	r20, r25
    216a:	0e 94 2a 0b 	call	0x1654	; 0x1654 <DIO_enuSetPintValue>
    216e:	89 83       	std	Y+1, r24	; 0x01
			((Copy_u8Data >> 2) & MASK_BIT));
	if (Local_enuErrorState != ES_OK)
    2170:	89 81       	ldd	r24, Y+1	; 0x01
    2172:	81 30       	cpi	r24, 0x01	; 1
    2174:	19 f0       	breq	.+6      	; 0x217c <LCD_enuLatch+0x114>
		return Local_enuErrorState;
    2176:	89 81       	ldd	r24, Y+1	; 0x01
    2178:	8b 83       	std	Y+3, r24	; 0x03
    217a:	25 c0       	rjmp	.+74     	; 0x21c6 <LCD_enuLatch+0x15e>

	Local_enuErrorState = DIO_enuSetPintValue(D1_PORT, D1_PIN,
    217c:	8a 81       	ldd	r24, Y+2	; 0x02
    217e:	86 95       	lsr	r24
    2180:	98 2f       	mov	r25, r24
    2182:	91 70       	andi	r25, 0x01	; 1
    2184:	81 e0       	ldi	r24, 0x01	; 1
    2186:	61 e0       	ldi	r22, 0x01	; 1
    2188:	49 2f       	mov	r20, r25
    218a:	0e 94 2a 0b 	call	0x1654	; 0x1654 <DIO_enuSetPintValue>
    218e:	89 83       	std	Y+1, r24	; 0x01
			((Copy_u8Data >> 1) & MASK_BIT));
	if (Local_enuErrorState != ES_OK)
    2190:	89 81       	ldd	r24, Y+1	; 0x01
    2192:	81 30       	cpi	r24, 0x01	; 1
    2194:	19 f0       	breq	.+6      	; 0x219c <LCD_enuLatch+0x134>
		return Local_enuErrorState;
    2196:	89 81       	ldd	r24, Y+1	; 0x01
    2198:	8b 83       	std	Y+3, r24	; 0x03
    219a:	15 c0       	rjmp	.+42     	; 0x21c6 <LCD_enuLatch+0x15e>

	Local_enuErrorState = DIO_enuSetPintValue(D0_PORT, D0_PIN,
    219c:	8a 81       	ldd	r24, Y+2	; 0x02
    219e:	98 2f       	mov	r25, r24
    21a0:	91 70       	andi	r25, 0x01	; 1
    21a2:	81 e0       	ldi	r24, 0x01	; 1
    21a4:	60 e0       	ldi	r22, 0x00	; 0
    21a6:	49 2f       	mov	r20, r25
    21a8:	0e 94 2a 0b 	call	0x1654	; 0x1654 <DIO_enuSetPintValue>
    21ac:	89 83       	std	Y+1, r24	; 0x01
			((Copy_u8Data >> 0) & MASK_BIT));
	if (Local_enuErrorState != ES_OK)
    21ae:	89 81       	ldd	r24, Y+1	; 0x01
    21b0:	81 30       	cpi	r24, 0x01	; 1
    21b2:	19 f0       	breq	.+6      	; 0x21ba <LCD_enuLatch+0x152>
		return Local_enuErrorState;
    21b4:	89 81       	ldd	r24, Y+1	; 0x01
    21b6:	8b 83       	std	Y+3, r24	; 0x03
    21b8:	06 c0       	rjmp	.+12     	; 0x21c6 <LCD_enuLatch+0x15e>

#else
#error "wrong configuration of LCD mode!!"
#endif

	LCD_vidTrigger_LATCH();
    21ba:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <LCD_vidTrigger_LATCH>

	Local_enuErrorState = ES_OK;
    21be:	81 e0       	ldi	r24, 0x01	; 1
    21c0:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorState;
    21c2:	89 81       	ldd	r24, Y+1	; 0x01
    21c4:	8b 83       	std	Y+3, r24	; 0x03
    21c6:	8b 81       	ldd	r24, Y+3	; 0x03
}
    21c8:	0f 90       	pop	r0
    21ca:	0f 90       	pop	r0
    21cc:	0f 90       	pop	r0
    21ce:	cf 91       	pop	r28
    21d0:	df 91       	pop	r29
    21d2:	08 95       	ret

000021d4 <LCD_vidTrigger_LATCH>:

static void LCD_vidTrigger_LATCH(void) {
    21d4:	df 93       	push	r29
    21d6:	cf 93       	push	r28
    21d8:	cd b7       	in	r28, 0x3d	; 61
    21da:	de b7       	in	r29, 0x3e	; 62
    21dc:	2e 97       	sbiw	r28, 0x0e	; 14
    21de:	0f b6       	in	r0, 0x3f	; 63
    21e0:	f8 94       	cli
    21e2:	de bf       	out	0x3e, r29	; 62
    21e4:	0f be       	out	0x3f, r0	; 63
    21e6:	cd bf       	out	0x3d, r28	; 61
	/* Enable EN --> it works at Rising Edge */
	DIO_enuSetPintValue(EN_PORT, EN_PIN, DIO_u8HIGH);
    21e8:	80 e0       	ldi	r24, 0x00	; 0
    21ea:	62 e0       	ldi	r22, 0x02	; 2
    21ec:	41 e0       	ldi	r20, 0x01	; 1
    21ee:	0e 94 2a 0b 	call	0x1654	; 0x1654 <DIO_enuSetPintValue>
    21f2:	80 e0       	ldi	r24, 0x00	; 0
    21f4:	90 e0       	ldi	r25, 0x00	; 0
    21f6:	a0 e2       	ldi	r26, 0x20	; 32
    21f8:	b1 e4       	ldi	r27, 0x41	; 65
    21fa:	8b 87       	std	Y+11, r24	; 0x0b
    21fc:	9c 87       	std	Y+12, r25	; 0x0c
    21fe:	ad 87       	std	Y+13, r26	; 0x0d
    2200:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2202:	6b 85       	ldd	r22, Y+11	; 0x0b
    2204:	7c 85       	ldd	r23, Y+12	; 0x0c
    2206:	8d 85       	ldd	r24, Y+13	; 0x0d
    2208:	9e 85       	ldd	r25, Y+14	; 0x0e
    220a:	20 e0       	ldi	r18, 0x00	; 0
    220c:	30 e0       	ldi	r19, 0x00	; 0
    220e:	4a e7       	ldi	r20, 0x7A	; 122
    2210:	53 e4       	ldi	r21, 0x43	; 67
    2212:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2216:	dc 01       	movw	r26, r24
    2218:	cb 01       	movw	r24, r22
    221a:	8f 83       	std	Y+7, r24	; 0x07
    221c:	98 87       	std	Y+8, r25	; 0x08
    221e:	a9 87       	std	Y+9, r26	; 0x09
    2220:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2222:	6f 81       	ldd	r22, Y+7	; 0x07
    2224:	78 85       	ldd	r23, Y+8	; 0x08
    2226:	89 85       	ldd	r24, Y+9	; 0x09
    2228:	9a 85       	ldd	r25, Y+10	; 0x0a
    222a:	20 e0       	ldi	r18, 0x00	; 0
    222c:	30 e0       	ldi	r19, 0x00	; 0
    222e:	40 e8       	ldi	r20, 0x80	; 128
    2230:	5f e3       	ldi	r21, 0x3F	; 63
    2232:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2236:	88 23       	and	r24, r24
    2238:	2c f4       	brge	.+10     	; 0x2244 <LCD_vidTrigger_LATCH+0x70>
		__ticks = 1;
    223a:	81 e0       	ldi	r24, 0x01	; 1
    223c:	90 e0       	ldi	r25, 0x00	; 0
    223e:	9e 83       	std	Y+6, r25	; 0x06
    2240:	8d 83       	std	Y+5, r24	; 0x05
    2242:	3f c0       	rjmp	.+126    	; 0x22c2 <LCD_vidTrigger_LATCH+0xee>
	else if (__tmp > 65535)
    2244:	6f 81       	ldd	r22, Y+7	; 0x07
    2246:	78 85       	ldd	r23, Y+8	; 0x08
    2248:	89 85       	ldd	r24, Y+9	; 0x09
    224a:	9a 85       	ldd	r25, Y+10	; 0x0a
    224c:	20 e0       	ldi	r18, 0x00	; 0
    224e:	3f ef       	ldi	r19, 0xFF	; 255
    2250:	4f e7       	ldi	r20, 0x7F	; 127
    2252:	57 e4       	ldi	r21, 0x47	; 71
    2254:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2258:	18 16       	cp	r1, r24
    225a:	4c f5       	brge	.+82     	; 0x22ae <LCD_vidTrigger_LATCH+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    225c:	6b 85       	ldd	r22, Y+11	; 0x0b
    225e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2260:	8d 85       	ldd	r24, Y+13	; 0x0d
    2262:	9e 85       	ldd	r25, Y+14	; 0x0e
    2264:	20 e0       	ldi	r18, 0x00	; 0
    2266:	30 e0       	ldi	r19, 0x00	; 0
    2268:	40 e2       	ldi	r20, 0x20	; 32
    226a:	51 e4       	ldi	r21, 0x41	; 65
    226c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2270:	dc 01       	movw	r26, r24
    2272:	cb 01       	movw	r24, r22
    2274:	bc 01       	movw	r22, r24
    2276:	cd 01       	movw	r24, r26
    2278:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    227c:	dc 01       	movw	r26, r24
    227e:	cb 01       	movw	r24, r22
    2280:	9e 83       	std	Y+6, r25	; 0x06
    2282:	8d 83       	std	Y+5, r24	; 0x05
    2284:	0f c0       	rjmp	.+30     	; 0x22a4 <LCD_vidTrigger_LATCH+0xd0>
    2286:	89 e1       	ldi	r24, 0x19	; 25
    2288:	90 e0       	ldi	r25, 0x00	; 0
    228a:	9c 83       	std	Y+4, r25	; 0x04
    228c:	8b 83       	std	Y+3, r24	; 0x03
    228e:	8b 81       	ldd	r24, Y+3	; 0x03
    2290:	9c 81       	ldd	r25, Y+4	; 0x04
    2292:	01 97       	sbiw	r24, 0x01	; 1
    2294:	f1 f7       	brne	.-4      	; 0x2292 <LCD_vidTrigger_LATCH+0xbe>
    2296:	9c 83       	std	Y+4, r25	; 0x04
    2298:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    229a:	8d 81       	ldd	r24, Y+5	; 0x05
    229c:	9e 81       	ldd	r25, Y+6	; 0x06
    229e:	01 97       	sbiw	r24, 0x01	; 1
    22a0:	9e 83       	std	Y+6, r25	; 0x06
    22a2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22a4:	8d 81       	ldd	r24, Y+5	; 0x05
    22a6:	9e 81       	ldd	r25, Y+6	; 0x06
    22a8:	00 97       	sbiw	r24, 0x00	; 0
    22aa:	69 f7       	brne	.-38     	; 0x2286 <LCD_vidTrigger_LATCH+0xb2>
    22ac:	14 c0       	rjmp	.+40     	; 0x22d6 <LCD_vidTrigger_LATCH+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22ae:	6f 81       	ldd	r22, Y+7	; 0x07
    22b0:	78 85       	ldd	r23, Y+8	; 0x08
    22b2:	89 85       	ldd	r24, Y+9	; 0x09
    22b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    22b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ba:	dc 01       	movw	r26, r24
    22bc:	cb 01       	movw	r24, r22
    22be:	9e 83       	std	Y+6, r25	; 0x06
    22c0:	8d 83       	std	Y+5, r24	; 0x05
    22c2:	8d 81       	ldd	r24, Y+5	; 0x05
    22c4:	9e 81       	ldd	r25, Y+6	; 0x06
    22c6:	9a 83       	std	Y+2, r25	; 0x02
    22c8:	89 83       	std	Y+1, r24	; 0x01
    22ca:	89 81       	ldd	r24, Y+1	; 0x01
    22cc:	9a 81       	ldd	r25, Y+2	; 0x02
    22ce:	01 97       	sbiw	r24, 0x01	; 1
    22d0:	f1 f7       	brne	.-4      	; 0x22ce <LCD_vidTrigger_LATCH+0xfa>
    22d2:	9a 83       	std	Y+2, r25	; 0x02
    22d4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	DIO_enuSetPintValue(EN_PORT, EN_PIN, DIO_u8LOW);
    22d6:	80 e0       	ldi	r24, 0x00	; 0
    22d8:	62 e0       	ldi	r22, 0x02	; 2
    22da:	40 e0       	ldi	r20, 0x00	; 0
    22dc:	0e 94 2a 0b 	call	0x1654	; 0x1654 <DIO_enuSetPintValue>
}
    22e0:	2e 96       	adiw	r28, 0x0e	; 14
    22e2:	0f b6       	in	r0, 0x3f	; 63
    22e4:	f8 94       	cli
    22e6:	de bf       	out	0x3e, r29	; 62
    22e8:	0f be       	out	0x3f, r0	; 63
    22ea:	cd bf       	out	0x3d, r28	; 61
    22ec:	cf 91       	pop	r28
    22ee:	df 91       	pop	r29
    22f0:	08 95       	ret

000022f2 <LCD_inlenuSendCommand>:

static inline ES_t LCD_inlenuSendCommand(u8 Copy_u8Command) {
    22f2:	df 93       	push	r29
    22f4:	cf 93       	push	r28
    22f6:	00 d0       	rcall	.+0      	; 0x22f8 <LCD_inlenuSendCommand+0x6>
    22f8:	0f 92       	push	r0
    22fa:	cd b7       	in	r28, 0x3d	; 61
    22fc:	de b7       	in	r29, 0x3e	; 62
    22fe:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOTOK;
    2300:	19 82       	std	Y+1, r1	; 0x01

	/* RS --> LOW to write Command */
	Local_enuErrorState = DIO_enuSetPintValue(RS_PORT, RS_PIN, DIO_u8LOW);
    2302:	80 e0       	ldi	r24, 0x00	; 0
    2304:	60 e0       	ldi	r22, 0x00	; 0
    2306:	40 e0       	ldi	r20, 0x00	; 0
    2308:	0e 94 2a 0b 	call	0x1654	; 0x1654 <DIO_enuSetPintValue>
    230c:	89 83       	std	Y+1, r24	; 0x01
	if (Local_enuErrorState != ES_OK)
    230e:	89 81       	ldd	r24, Y+1	; 0x01
    2310:	81 30       	cpi	r24, 0x01	; 1
    2312:	19 f0       	breq	.+6      	; 0x231a <LCD_inlenuSendCommand+0x28>
		return Local_enuErrorState;
    2314:	89 81       	ldd	r24, Y+1	; 0x01
    2316:	8b 83       	std	Y+3, r24	; 0x03
    2318:	0e c0       	rjmp	.+28     	; 0x2336 <LCD_inlenuSendCommand+0x44>

	/* Call Latch Function */
	Local_enuErrorState = LCD_enuLatch(Copy_u8Command);
    231a:	8a 81       	ldd	r24, Y+2	; 0x02
    231c:	0e 94 34 10 	call	0x2068	; 0x2068 <LCD_enuLatch>
    2320:	89 83       	std	Y+1, r24	; 0x01
	if (Local_enuErrorState != ES_OK)
    2322:	89 81       	ldd	r24, Y+1	; 0x01
    2324:	81 30       	cpi	r24, 0x01	; 1
    2326:	19 f0       	breq	.+6      	; 0x232e <LCD_inlenuSendCommand+0x3c>
		return Local_enuErrorState;
    2328:	89 81       	ldd	r24, Y+1	; 0x01
    232a:	8b 83       	std	Y+3, r24	; 0x03
    232c:	04 c0       	rjmp	.+8      	; 0x2336 <LCD_inlenuSendCommand+0x44>

	Local_enuErrorState = ES_OK;
    232e:	81 e0       	ldi	r24, 0x01	; 1
    2330:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorState;
    2332:	89 81       	ldd	r24, Y+1	; 0x01
    2334:	8b 83       	std	Y+3, r24	; 0x03
    2336:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2338:	0f 90       	pop	r0
    233a:	0f 90       	pop	r0
    233c:	0f 90       	pop	r0
    233e:	cf 91       	pop	r28
    2340:	df 91       	pop	r29
    2342:	08 95       	ret

00002344 <LCD_enuGoToPosition>:

ES_t LCD_enuGoToPosition(u8 Copy_u8Line, u8 Copy_u8Position) {
    2344:	df 93       	push	r29
    2346:	cf 93       	push	r28
    2348:	00 d0       	rcall	.+0      	; 0x234a <LCD_enuGoToPosition+0x6>
    234a:	0f 92       	push	r0
    234c:	cd b7       	in	r28, 0x3d	; 61
    234e:	de b7       	in	r29, 0x3e	; 62
    2350:	8a 83       	std	Y+2, r24	; 0x02
    2352:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOTOK;
    2354:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8Position < 16) {
    2356:	8b 81       	ldd	r24, Y+3	; 0x03
    2358:	80 31       	cpi	r24, 0x10	; 16
    235a:	e0 f4       	brcc	.+56     	; 0x2394 <LCD_enuGoToPosition+0x50>
		if (Copy_u8Line == FIRST_LINE ) {
    235c:	8a 81       	ldd	r24, Y+2	; 0x02
    235e:	81 30       	cpi	r24, 0x01	; 1
    2360:	59 f4       	brne	.+22     	; 0x2378 <LCD_enuGoToPosition+0x34>
			Local_enuErrorState = ES_OK;
    2362:	81 e0       	ldi	r24, 0x01	; 1
    2364:	89 83       	std	Y+1, r24	; 0x01
			Local_enuErrorState = LCD_inlenuSendCommand(
    2366:	8b 81       	ldd	r24, Y+3	; 0x03
    2368:	80 58       	subi	r24, 0x80	; 128
    236a:	0e 94 79 11 	call	0x22f2	; 0x22f2 <LCD_inlenuSendCommand>
    236e:	89 83       	std	Y+1, r24	; 0x01
					START_OF_FIRST_LINE + Copy_u8Position);

			LCD_u8PosCounter = Copy_u8Position;
    2370:	8b 81       	ldd	r24, Y+3	; 0x03
    2372:	80 93 8a 01 	sts	0x018A, r24
    2376:	0e c0       	rjmp	.+28     	; 0x2394 <LCD_enuGoToPosition+0x50>
		} else if (Copy_u8Line == SECOND_LINE) {
    2378:	8a 81       	ldd	r24, Y+2	; 0x02
    237a:	82 30       	cpi	r24, 0x02	; 2
    237c:	59 f4       	brne	.+22     	; 0x2394 <LCD_enuGoToPosition+0x50>
			Local_enuErrorState = ES_OK;
    237e:	81 e0       	ldi	r24, 0x01	; 1
    2380:	89 83       	std	Y+1, r24	; 0x01
			Local_enuErrorState = LCD_inlenuSendCommand(
    2382:	8b 81       	ldd	r24, Y+3	; 0x03
    2384:	80 54       	subi	r24, 0x40	; 64
    2386:	0e 94 79 11 	call	0x22f2	; 0x22f2 <LCD_inlenuSendCommand>
    238a:	89 83       	std	Y+1, r24	; 0x01
					START_OF_SECOND_LINE + Copy_u8Position);
			LCD_u8PosCounter = Copy_u8Position + 16;
    238c:	8b 81       	ldd	r24, Y+3	; 0x03
    238e:	80 5f       	subi	r24, 0xF0	; 240
    2390:	80 93 8a 01 	sts	0x018A, r24
		}
	}

	return Local_enuErrorState;
    2394:	89 81       	ldd	r24, Y+1	; 0x01
}
    2396:	0f 90       	pop	r0
    2398:	0f 90       	pop	r0
    239a:	0f 90       	pop	r0
    239c:	cf 91       	pop	r28
    239e:	df 91       	pop	r29
    23a0:	08 95       	ret

000023a2 <LCD_vidCheckPosition>:

static void LCD_vidCheckPosition(void) {
    23a2:	df 93       	push	r29
    23a4:	cf 93       	push	r28
    23a6:	cd b7       	in	r28, 0x3d	; 61
    23a8:	de b7       	in	r29, 0x3e	; 62
	if (LCD_u8PosCounter == 16) {
    23aa:	80 91 8a 01 	lds	r24, 0x018A
    23ae:	80 31       	cpi	r24, 0x10	; 16
    23b0:	51 f4       	brne	.+20     	; 0x23c6 <LCD_vidCheckPosition+0x24>
		LCD_enuGoToPosition(SECOND_LINE, 0);
    23b2:	82 e0       	ldi	r24, 0x02	; 2
    23b4:	60 e0       	ldi	r22, 0x00	; 0
    23b6:	0e 94 a2 11 	call	0x2344	; 0x2344 <LCD_enuGoToPosition>
		LCD_u8PosCounter++;
    23ba:	80 91 8a 01 	lds	r24, 0x018A
    23be:	8f 5f       	subi	r24, 0xFF	; 255
    23c0:	80 93 8a 01 	sts	0x018A, r24
    23c4:	13 c0       	rjmp	.+38     	; 0x23ec <LCD_vidCheckPosition+0x4a>
	} else if (LCD_u8PosCounter == 32) {
    23c6:	80 91 8a 01 	lds	r24, 0x018A
    23ca:	80 32       	cpi	r24, 0x20	; 32
    23cc:	51 f4       	brne	.+20     	; 0x23e2 <LCD_vidCheckPosition+0x40>
		LCD_inlenuSendCommand(0x01);
    23ce:	81 e0       	ldi	r24, 0x01	; 1
    23d0:	0e 94 79 11 	call	0x22f2	; 0x22f2 <LCD_inlenuSendCommand>
		LCD_enuGoToPosition(FIRST_LINE, 0);
    23d4:	81 e0       	ldi	r24, 0x01	; 1
    23d6:	60 e0       	ldi	r22, 0x00	; 0
    23d8:	0e 94 a2 11 	call	0x2344	; 0x2344 <LCD_enuGoToPosition>
		LCD_u8PosCounter = 0;
    23dc:	10 92 8a 01 	sts	0x018A, r1
    23e0:	05 c0       	rjmp	.+10     	; 0x23ec <LCD_vidCheckPosition+0x4a>
	} else {
		LCD_u8PosCounter++;
    23e2:	80 91 8a 01 	lds	r24, 0x018A
    23e6:	8f 5f       	subi	r24, 0xFF	; 255
    23e8:	80 93 8a 01 	sts	0x018A, r24
	}
}
    23ec:	cf 91       	pop	r28
    23ee:	df 91       	pop	r29
    23f0:	08 95       	ret

000023f2 <LCD_vidClearScreen>:

void LCD_vidClearScreen(void) {
    23f2:	df 93       	push	r29
    23f4:	cf 93       	push	r28
    23f6:	cd b7       	in	r28, 0x3d	; 61
    23f8:	de b7       	in	r29, 0x3e	; 62
	LCD_inlenuSendCommand(0x01);
    23fa:	81 e0       	ldi	r24, 0x01	; 1
    23fc:	0e 94 79 11 	call	0x22f2	; 0x22f2 <LCD_inlenuSendCommand>
	LCD_u8PosCounter = 0;
    2400:	10 92 8a 01 	sts	0x018A, r1
}
    2404:	cf 91       	pop	r28
    2406:	df 91       	pop	r29
    2408:	08 95       	ret

0000240a <LCD_enuWriteString>:

ES_t LCD_enuWriteString(u8 *Copy_pu8Str) {
    240a:	df 93       	push	r29
    240c:	cf 93       	push	r28
    240e:	00 d0       	rcall	.+0      	; 0x2410 <LCD_enuWriteString+0x6>
    2410:	00 d0       	rcall	.+0      	; 0x2412 <LCD_enuWriteString+0x8>
    2412:	cd b7       	in	r28, 0x3d	; 61
    2414:	de b7       	in	r29, 0x3e	; 62
    2416:	9b 83       	std	Y+3, r25	; 0x03
    2418:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOTOK;
    241a:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pu8Str != NULL) {
    241c:	8a 81       	ldd	r24, Y+2	; 0x02
    241e:	9b 81       	ldd	r25, Y+3	; 0x03
    2420:	00 97       	sbiw	r24, 0x00	; 0
    2422:	f1 f0       	breq	.+60     	; 0x2460 <LCD_enuWriteString+0x56>
    2424:	11 c0       	rjmp	.+34     	; 0x2448 <LCD_enuWriteString+0x3e>
		while (*Copy_pu8Str != '\0') {
			Local_enuErrorState = LCD_enuDisplayChar(*Copy_pu8Str);
    2426:	ea 81       	ldd	r30, Y+2	; 0x02
    2428:	fb 81       	ldd	r31, Y+3	; 0x03
    242a:	80 81       	ld	r24, Z
    242c:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <LCD_enuDisplayChar>
    2430:	89 83       	std	Y+1, r24	; 0x01
			if (Local_enuErrorState != ES_OK)
    2432:	89 81       	ldd	r24, Y+1	; 0x01
    2434:	81 30       	cpi	r24, 0x01	; 1
    2436:	19 f0       	breq	.+6      	; 0x243e <LCD_enuWriteString+0x34>
				return Local_enuErrorState;
    2438:	89 81       	ldd	r24, Y+1	; 0x01
    243a:	8c 83       	std	Y+4, r24	; 0x04
    243c:	13 c0       	rjmp	.+38     	; 0x2464 <LCD_enuWriteString+0x5a>
			Copy_pu8Str++;
    243e:	8a 81       	ldd	r24, Y+2	; 0x02
    2440:	9b 81       	ldd	r25, Y+3	; 0x03
    2442:	01 96       	adiw	r24, 0x01	; 1
    2444:	9b 83       	std	Y+3, r25	; 0x03
    2446:	8a 83       	std	Y+2, r24	; 0x02

ES_t LCD_enuWriteString(u8 *Copy_pu8Str) {
	ES_t Local_enuErrorState = ES_NOTOK;

	if (Copy_pu8Str != NULL) {
		while (*Copy_pu8Str != '\0') {
    2448:	ea 81       	ldd	r30, Y+2	; 0x02
    244a:	fb 81       	ldd	r31, Y+3	; 0x03
    244c:	80 81       	ld	r24, Z
    244e:	88 23       	and	r24, r24
    2450:	51 f7       	brne	.-44     	; 0x2426 <LCD_enuWriteString+0x1c>
			Local_enuErrorState = LCD_enuDisplayChar(*Copy_pu8Str);
			if (Local_enuErrorState != ES_OK)
				return Local_enuErrorState;
			Copy_pu8Str++;
		}
		Local_enuErrorState = ES_OK;
    2452:	81 e0       	ldi	r24, 0x01	; 1
    2454:	89 83       	std	Y+1, r24	; 0x01
	} else {
		return ES_NULL_POINTER;
	}

	Local_enuErrorState = ES_OK;
    2456:	81 e0       	ldi	r24, 0x01	; 1
    2458:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorState;
    245a:	89 81       	ldd	r24, Y+1	; 0x01
    245c:	8c 83       	std	Y+4, r24	; 0x04
    245e:	02 c0       	rjmp	.+4      	; 0x2464 <LCD_enuWriteString+0x5a>
				return Local_enuErrorState;
			Copy_pu8Str++;
		}
		Local_enuErrorState = ES_OK;
	} else {
		return ES_NULL_POINTER;
    2460:	83 e0       	ldi	r24, 0x03	; 3
    2462:	8c 83       	std	Y+4, r24	; 0x04
    2464:	8c 81       	ldd	r24, Y+4	; 0x04
	}

	Local_enuErrorState = ES_OK;
	return Local_enuErrorState;
}
    2466:	0f 90       	pop	r0
    2468:	0f 90       	pop	r0
    246a:	0f 90       	pop	r0
    246c:	0f 90       	pop	r0
    246e:	cf 91       	pop	r28
    2470:	df 91       	pop	r29
    2472:	08 95       	ret

00002474 <LCD_enuWriteNumber>:

ES_t LCD_enuWriteNumber(int Copy_s32Number) {
    2474:	df 93       	push	r29
    2476:	cf 93       	push	r28
    2478:	cd b7       	in	r28, 0x3d	; 61
    247a:	de b7       	in	r29, 0x3e	; 62
    247c:	64 97       	sbiw	r28, 0x14	; 20
    247e:	0f b6       	in	r0, 0x3f	; 63
    2480:	f8 94       	cli
    2482:	de bf       	out	0x3e, r29	; 62
    2484:	0f be       	out	0x3f, r0	; 63
    2486:	cd bf       	out	0x3d, r28	; 61
    2488:	9c 8b       	std	Y+20, r25	; 0x14
    248a:	8b 8b       	std	Y+19, r24	; 0x13
	ES_t Local_enuErrorState = ES_NOTOK;
    248c:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_As8Container[16];
	u8 Local_u8Iterator;

	sprintf(Local_As8Container, "%d", Copy_s32Number);
    248e:	00 d0       	rcall	.+0      	; 0x2490 <LCD_enuWriteNumber+0x1c>
    2490:	00 d0       	rcall	.+0      	; 0x2492 <LCD_enuWriteNumber+0x1e>
    2492:	00 d0       	rcall	.+0      	; 0x2494 <LCD_enuWriteNumber+0x20>
    2494:	ed b7       	in	r30, 0x3d	; 61
    2496:	fe b7       	in	r31, 0x3e	; 62
    2498:	31 96       	adiw	r30, 0x01	; 1
    249a:	ce 01       	movw	r24, r28
    249c:	03 96       	adiw	r24, 0x03	; 3
    249e:	91 83       	std	Z+1, r25	; 0x01
    24a0:	80 83       	st	Z, r24
    24a2:	80 e6       	ldi	r24, 0x60	; 96
    24a4:	90 e0       	ldi	r25, 0x00	; 0
    24a6:	93 83       	std	Z+3, r25	; 0x03
    24a8:	82 83       	std	Z+2, r24	; 0x02
    24aa:	8b 89       	ldd	r24, Y+19	; 0x13
    24ac:	9c 89       	ldd	r25, Y+20	; 0x14
    24ae:	95 83       	std	Z+5, r25	; 0x05
    24b0:	84 83       	std	Z+4, r24	; 0x04
    24b2:	0e 94 c2 1a 	call	0x3584	; 0x3584 <sprintf>
    24b6:	8d b7       	in	r24, 0x3d	; 61
    24b8:	9e b7       	in	r25, 0x3e	; 62
    24ba:	06 96       	adiw	r24, 0x06	; 6
    24bc:	0f b6       	in	r0, 0x3f	; 63
    24be:	f8 94       	cli
    24c0:	9e bf       	out	0x3e, r25	; 62
    24c2:	0f be       	out	0x3f, r0	; 63
    24c4:	8d bf       	out	0x3d, r24	; 61

	for (Local_u8Iterator = 0; Local_As8Container[Local_u8Iterator] != '\0';
    24c6:	19 82       	std	Y+1, r1	; 0x01
    24c8:	0f c0       	rjmp	.+30     	; 0x24e8 <LCD_enuWriteNumber+0x74>
			Local_u8Iterator++) {
		Local_enuErrorState = LCD_enuDisplayChar(
    24ca:	89 81       	ldd	r24, Y+1	; 0x01
    24cc:	28 2f       	mov	r18, r24
    24ce:	30 e0       	ldi	r19, 0x00	; 0
    24d0:	ce 01       	movw	r24, r28
    24d2:	03 96       	adiw	r24, 0x03	; 3
    24d4:	fc 01       	movw	r30, r24
    24d6:	e2 0f       	add	r30, r18
    24d8:	f3 1f       	adc	r31, r19
    24da:	80 81       	ld	r24, Z
    24dc:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <LCD_enuDisplayChar>
    24e0:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Iterator;

	sprintf(Local_As8Container, "%d", Copy_s32Number);

	for (Local_u8Iterator = 0; Local_As8Container[Local_u8Iterator] != '\0';
			Local_u8Iterator++) {
    24e2:	89 81       	ldd	r24, Y+1	; 0x01
    24e4:	8f 5f       	subi	r24, 0xFF	; 255
    24e6:	89 83       	std	Y+1, r24	; 0x01
	u8 Local_As8Container[16];
	u8 Local_u8Iterator;

	sprintf(Local_As8Container, "%d", Copy_s32Number);

	for (Local_u8Iterator = 0; Local_As8Container[Local_u8Iterator] != '\0';
    24e8:	89 81       	ldd	r24, Y+1	; 0x01
    24ea:	28 2f       	mov	r18, r24
    24ec:	30 e0       	ldi	r19, 0x00	; 0
    24ee:	ce 01       	movw	r24, r28
    24f0:	03 96       	adiw	r24, 0x03	; 3
    24f2:	fc 01       	movw	r30, r24
    24f4:	e2 0f       	add	r30, r18
    24f6:	f3 1f       	adc	r31, r19
    24f8:	80 81       	ld	r24, Z
    24fa:	88 23       	and	r24, r24
    24fc:	31 f7       	brne	.-52     	; 0x24ca <LCD_enuWriteNumber+0x56>
			Local_u8Iterator++) {
		Local_enuErrorState = LCD_enuDisplayChar(
				Local_As8Container[Local_u8Iterator]);
	}

	return Local_enuErrorState;
    24fe:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2500:	64 96       	adiw	r28, 0x14	; 20
    2502:	0f b6       	in	r0, 0x3f	; 63
    2504:	f8 94       	cli
    2506:	de bf       	out	0x3e, r29	; 62
    2508:	0f be       	out	0x3f, r0	; 63
    250a:	cd bf       	out	0x3d, r28	; 61
    250c:	cf 91       	pop	r28
    250e:	df 91       	pop	r29
    2510:	08 95       	ret

00002512 <main>:

u8 player1=FIRST_LINE,player2=FIRST_LINE,currentLine;
u16 delay=200;

int main (void)
{
    2512:	0f 93       	push	r16
    2514:	1f 93       	push	r17
    2516:	df 93       	push	r29
    2518:	cf 93       	push	r28
    251a:	cd b7       	in	r28, 0x3d	; 61
    251c:	de b7       	in	r29, 0x3e	; 62
    251e:	c3 58       	subi	r28, 0x83	; 131
    2520:	d0 40       	sbci	r29, 0x00	; 0
    2522:	0f b6       	in	r0, 0x3f	; 63
    2524:	f8 94       	cli
    2526:	de bf       	out	0x3e, r29	; 62
    2528:	0f be       	out	0x3f, r0	; 63
    252a:	cd bf       	out	0x3d, r28	; 61
	u8 flag=0;
    252c:	fe 01       	movw	r30, r28
    252e:	ed 57       	subi	r30, 0x7D	; 125
    2530:	ff 4f       	sbci	r31, 0xFF	; 255
    2532:	10 82       	st	Z, r1
	DIO_enuInit();
    2534:	0e 94 94 07 	call	0xf28	; 0xf28 <DIO_enuInit>
	LCD_enuInit();
    2538:	0e 94 16 0c 	call	0x182c	; 0x182c <LCD_enuInit>

	enableGIE();
    253c:	0e 94 79 06 	call	0xcf2	; 0xcf2 <enableGIE>

	enableINT(INT0);
    2540:	8a e0       	ldi	r24, 0x0A	; 10
    2542:	0e 94 24 07 	call	0xe48	; 0xe48 <enableINT>
	changeLevel(INT0);
    2546:	8a e0       	ldi	r24, 0x0A	; 10
    2548:	0e 94 bf 06 	call	0xd7e	; 0xd7e <changeLevel>

	enableINT(INT1);
    254c:	84 e1       	ldi	r24, 0x14	; 20
    254e:	0e 94 24 07 	call	0xe48	; 0xe48 <enableINT>
	changeLevel(INT1);
    2552:	84 e1       	ldi	r24, 0x14	; 20
    2554:	0e 94 bf 06 	call	0xd7e	; 0xd7e <changeLevel>

	LCD_enuSendCommand(0x0c);
    2558:	8c e0       	ldi	r24, 0x0C	; 12
    255a:	0e 94 0b 10 	call	0x2016	; 0x2016 <LCD_enuSendCommand>
	while (1)
	{

		for(u8 counter = 1;counter<15;counter++)
    255e:	fe 01       	movw	r30, r28
    2560:	ee 57       	subi	r30, 0x7E	; 126
    2562:	ff 4f       	sbci	r31, 0xFF	; 255
    2564:	81 e0       	ldi	r24, 0x01	; 1
    2566:	80 83       	st	Z, r24
    2568:	9c c2       	rjmp	.+1336   	; 0x2aa2 <main+0x590>
		{
			if (flag == 0)
    256a:	fe 01       	movw	r30, r28
    256c:	ed 57       	subi	r30, 0x7D	; 125
    256e:	ff 4f       	sbci	r31, 0xFF	; 255
    2570:	80 81       	ld	r24, Z
    2572:	88 23       	and	r24, r24
    2574:	09 f0       	breq	.+2      	; 0x2578 <main+0x66>
    2576:	b8 c0       	rjmp	.+368    	; 0x26e8 <main+0x1d6>
			{
				flag = 1;
    2578:	fe 01       	movw	r30, r28
    257a:	ed 57       	subi	r30, 0x7D	; 125
    257c:	ff 4f       	sbci	r31, 0xFF	; 255
    257e:	81 e0       	ldi	r24, 0x01	; 1
    2580:	80 83       	st	Z, r24
    2582:	fe 01       	movw	r30, r28
    2584:	e5 58       	subi	r30, 0x85	; 133
    2586:	ff 4f       	sbci	r31, 0xFF	; 255
    2588:	80 e0       	ldi	r24, 0x00	; 0
    258a:	90 e0       	ldi	r25, 0x00	; 0
    258c:	aa e7       	ldi	r26, 0x7A	; 122
    258e:	b4 e4       	ldi	r27, 0x44	; 68
    2590:	80 83       	st	Z, r24
    2592:	91 83       	std	Z+1, r25	; 0x01
    2594:	a2 83       	std	Z+2, r26	; 0x02
    2596:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2598:	8e 01       	movw	r16, r28
    259a:	09 58       	subi	r16, 0x89	; 137
    259c:	1f 4f       	sbci	r17, 0xFF	; 255
    259e:	fe 01       	movw	r30, r28
    25a0:	e5 58       	subi	r30, 0x85	; 133
    25a2:	ff 4f       	sbci	r31, 0xFF	; 255
    25a4:	60 81       	ld	r22, Z
    25a6:	71 81       	ldd	r23, Z+1	; 0x01
    25a8:	82 81       	ldd	r24, Z+2	; 0x02
    25aa:	93 81       	ldd	r25, Z+3	; 0x03
    25ac:	20 e0       	ldi	r18, 0x00	; 0
    25ae:	30 e0       	ldi	r19, 0x00	; 0
    25b0:	4a e7       	ldi	r20, 0x7A	; 122
    25b2:	53 e4       	ldi	r21, 0x43	; 67
    25b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25b8:	dc 01       	movw	r26, r24
    25ba:	cb 01       	movw	r24, r22
    25bc:	f8 01       	movw	r30, r16
    25be:	80 83       	st	Z, r24
    25c0:	91 83       	std	Z+1, r25	; 0x01
    25c2:	a2 83       	std	Z+2, r26	; 0x02
    25c4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    25c6:	fe 01       	movw	r30, r28
    25c8:	e9 58       	subi	r30, 0x89	; 137
    25ca:	ff 4f       	sbci	r31, 0xFF	; 255
    25cc:	60 81       	ld	r22, Z
    25ce:	71 81       	ldd	r23, Z+1	; 0x01
    25d0:	82 81       	ldd	r24, Z+2	; 0x02
    25d2:	93 81       	ldd	r25, Z+3	; 0x03
    25d4:	20 e0       	ldi	r18, 0x00	; 0
    25d6:	30 e0       	ldi	r19, 0x00	; 0
    25d8:	40 e8       	ldi	r20, 0x80	; 128
    25da:	5f e3       	ldi	r21, 0x3F	; 63
    25dc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25e0:	88 23       	and	r24, r24
    25e2:	44 f4       	brge	.+16     	; 0x25f4 <main+0xe2>
		__ticks = 1;
    25e4:	fe 01       	movw	r30, r28
    25e6:	eb 58       	subi	r30, 0x8B	; 139
    25e8:	ff 4f       	sbci	r31, 0xFF	; 255
    25ea:	81 e0       	ldi	r24, 0x01	; 1
    25ec:	90 e0       	ldi	r25, 0x00	; 0
    25ee:	91 83       	std	Z+1, r25	; 0x01
    25f0:	80 83       	st	Z, r24
    25f2:	64 c0       	rjmp	.+200    	; 0x26bc <main+0x1aa>
	else if (__tmp > 65535)
    25f4:	fe 01       	movw	r30, r28
    25f6:	e9 58       	subi	r30, 0x89	; 137
    25f8:	ff 4f       	sbci	r31, 0xFF	; 255
    25fa:	60 81       	ld	r22, Z
    25fc:	71 81       	ldd	r23, Z+1	; 0x01
    25fe:	82 81       	ldd	r24, Z+2	; 0x02
    2600:	93 81       	ldd	r25, Z+3	; 0x03
    2602:	20 e0       	ldi	r18, 0x00	; 0
    2604:	3f ef       	ldi	r19, 0xFF	; 255
    2606:	4f e7       	ldi	r20, 0x7F	; 127
    2608:	57 e4       	ldi	r21, 0x47	; 71
    260a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    260e:	18 16       	cp	r1, r24
    2610:	0c f0       	brlt	.+2      	; 0x2614 <main+0x102>
    2612:	43 c0       	rjmp	.+134    	; 0x269a <main+0x188>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2614:	fe 01       	movw	r30, r28
    2616:	e5 58       	subi	r30, 0x85	; 133
    2618:	ff 4f       	sbci	r31, 0xFF	; 255
    261a:	60 81       	ld	r22, Z
    261c:	71 81       	ldd	r23, Z+1	; 0x01
    261e:	82 81       	ldd	r24, Z+2	; 0x02
    2620:	93 81       	ldd	r25, Z+3	; 0x03
    2622:	20 e0       	ldi	r18, 0x00	; 0
    2624:	30 e0       	ldi	r19, 0x00	; 0
    2626:	40 e2       	ldi	r20, 0x20	; 32
    2628:	51 e4       	ldi	r21, 0x41	; 65
    262a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    262e:	dc 01       	movw	r26, r24
    2630:	cb 01       	movw	r24, r22
    2632:	8e 01       	movw	r16, r28
    2634:	0b 58       	subi	r16, 0x8B	; 139
    2636:	1f 4f       	sbci	r17, 0xFF	; 255
    2638:	bc 01       	movw	r22, r24
    263a:	cd 01       	movw	r24, r26
    263c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2640:	dc 01       	movw	r26, r24
    2642:	cb 01       	movw	r24, r22
    2644:	f8 01       	movw	r30, r16
    2646:	91 83       	std	Z+1, r25	; 0x01
    2648:	80 83       	st	Z, r24
    264a:	1f c0       	rjmp	.+62     	; 0x268a <main+0x178>
    264c:	fe 01       	movw	r30, r28
    264e:	ed 58       	subi	r30, 0x8D	; 141
    2650:	ff 4f       	sbci	r31, 0xFF	; 255
    2652:	89 e1       	ldi	r24, 0x19	; 25
    2654:	90 e0       	ldi	r25, 0x00	; 0
    2656:	91 83       	std	Z+1, r25	; 0x01
    2658:	80 83       	st	Z, r24
    265a:	fe 01       	movw	r30, r28
    265c:	ed 58       	subi	r30, 0x8D	; 141
    265e:	ff 4f       	sbci	r31, 0xFF	; 255
    2660:	80 81       	ld	r24, Z
    2662:	91 81       	ldd	r25, Z+1	; 0x01
    2664:	01 97       	sbiw	r24, 0x01	; 1
    2666:	f1 f7       	brne	.-4      	; 0x2664 <main+0x152>
    2668:	fe 01       	movw	r30, r28
    266a:	ed 58       	subi	r30, 0x8D	; 141
    266c:	ff 4f       	sbci	r31, 0xFF	; 255
    266e:	91 83       	std	Z+1, r25	; 0x01
    2670:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2672:	de 01       	movw	r26, r28
    2674:	ab 58       	subi	r26, 0x8B	; 139
    2676:	bf 4f       	sbci	r27, 0xFF	; 255
    2678:	fe 01       	movw	r30, r28
    267a:	eb 58       	subi	r30, 0x8B	; 139
    267c:	ff 4f       	sbci	r31, 0xFF	; 255
    267e:	80 81       	ld	r24, Z
    2680:	91 81       	ldd	r25, Z+1	; 0x01
    2682:	01 97       	sbiw	r24, 0x01	; 1
    2684:	11 96       	adiw	r26, 0x01	; 1
    2686:	9c 93       	st	X, r25
    2688:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    268a:	fe 01       	movw	r30, r28
    268c:	eb 58       	subi	r30, 0x8B	; 139
    268e:	ff 4f       	sbci	r31, 0xFF	; 255
    2690:	80 81       	ld	r24, Z
    2692:	91 81       	ldd	r25, Z+1	; 0x01
    2694:	00 97       	sbiw	r24, 0x00	; 0
    2696:	d1 f6       	brne	.-76     	; 0x264c <main+0x13a>
    2698:	27 c0       	rjmp	.+78     	; 0x26e8 <main+0x1d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    269a:	8e 01       	movw	r16, r28
    269c:	0b 58       	subi	r16, 0x8B	; 139
    269e:	1f 4f       	sbci	r17, 0xFF	; 255
    26a0:	fe 01       	movw	r30, r28
    26a2:	e9 58       	subi	r30, 0x89	; 137
    26a4:	ff 4f       	sbci	r31, 0xFF	; 255
    26a6:	60 81       	ld	r22, Z
    26a8:	71 81       	ldd	r23, Z+1	; 0x01
    26aa:	82 81       	ldd	r24, Z+2	; 0x02
    26ac:	93 81       	ldd	r25, Z+3	; 0x03
    26ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26b2:	dc 01       	movw	r26, r24
    26b4:	cb 01       	movw	r24, r22
    26b6:	f8 01       	movw	r30, r16
    26b8:	91 83       	std	Z+1, r25	; 0x01
    26ba:	80 83       	st	Z, r24
    26bc:	de 01       	movw	r26, r28
    26be:	af 58       	subi	r26, 0x8F	; 143
    26c0:	bf 4f       	sbci	r27, 0xFF	; 255
    26c2:	fe 01       	movw	r30, r28
    26c4:	eb 58       	subi	r30, 0x8B	; 139
    26c6:	ff 4f       	sbci	r31, 0xFF	; 255
    26c8:	80 81       	ld	r24, Z
    26ca:	91 81       	ldd	r25, Z+1	; 0x01
    26cc:	8d 93       	st	X+, r24
    26ce:	9c 93       	st	X, r25
    26d0:	fe 01       	movw	r30, r28
    26d2:	ef 58       	subi	r30, 0x8F	; 143
    26d4:	ff 4f       	sbci	r31, 0xFF	; 255
    26d6:	80 81       	ld	r24, Z
    26d8:	91 81       	ldd	r25, Z+1	; 0x01
    26da:	01 97       	sbiw	r24, 0x01	; 1
    26dc:	f1 f7       	brne	.-4      	; 0x26da <main+0x1c8>
    26de:	fe 01       	movw	r30, r28
    26e0:	ef 58       	subi	r30, 0x8F	; 143
    26e2:	ff 4f       	sbci	r31, 0xFF	; 255
    26e4:	91 83       	std	Z+1, r25	; 0x01
    26e6:	80 83       	st	Z, r24
				_delay_ms(1000);

			}
			disableGIE();
    26e8:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <disableGIE>
			currentLine=FIRST_LINE;
    26ec:	81 e0       	ldi	r24, 0x01	; 1
    26ee:	80 93 8b 01 	sts	0x018B, r24
			LCD_enuGoToPosition(currentLine,counter);
    26f2:	80 91 8b 01 	lds	r24, 0x018B
    26f6:	fe 01       	movw	r30, r28
    26f8:	ee 57       	subi	r30, 0x7E	; 126
    26fa:	ff 4f       	sbci	r31, 0xFF	; 255
    26fc:	60 81       	ld	r22, Z
    26fe:	0e 94 a2 11 	call	0x2344	; 0x2344 <LCD_enuGoToPosition>
			LCD_enuDisplayChar('O');
    2702:	8f e4       	ldi	r24, 0x4F	; 79
    2704:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <LCD_enuDisplayChar>
			enableGIE();
    2708:	0e 94 79 06 	call	0xcf2	; 0xcf2 <enableGIE>
			_delay_ms(delay);
    270c:	80 91 87 01 	lds	r24, 0x0187
    2710:	90 91 88 01 	lds	r25, 0x0188
    2714:	cc 01       	movw	r24, r24
    2716:	a0 e0       	ldi	r26, 0x00	; 0
    2718:	b0 e0       	ldi	r27, 0x00	; 0
    271a:	bc 01       	movw	r22, r24
    271c:	cd 01       	movw	r24, r26
    271e:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    2722:	dc 01       	movw	r26, r24
    2724:	cb 01       	movw	r24, r22
    2726:	fe 01       	movw	r30, r28
    2728:	e3 59       	subi	r30, 0x93	; 147
    272a:	ff 4f       	sbci	r31, 0xFF	; 255
    272c:	80 83       	st	Z, r24
    272e:	91 83       	std	Z+1, r25	; 0x01
    2730:	a2 83       	std	Z+2, r26	; 0x02
    2732:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2734:	8e 01       	movw	r16, r28
    2736:	07 59       	subi	r16, 0x97	; 151
    2738:	1f 4f       	sbci	r17, 0xFF	; 255
    273a:	fe 01       	movw	r30, r28
    273c:	e3 59       	subi	r30, 0x93	; 147
    273e:	ff 4f       	sbci	r31, 0xFF	; 255
    2740:	60 81       	ld	r22, Z
    2742:	71 81       	ldd	r23, Z+1	; 0x01
    2744:	82 81       	ldd	r24, Z+2	; 0x02
    2746:	93 81       	ldd	r25, Z+3	; 0x03
    2748:	20 e0       	ldi	r18, 0x00	; 0
    274a:	30 e0       	ldi	r19, 0x00	; 0
    274c:	4a e7       	ldi	r20, 0x7A	; 122
    274e:	53 e4       	ldi	r21, 0x43	; 67
    2750:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2754:	dc 01       	movw	r26, r24
    2756:	cb 01       	movw	r24, r22
    2758:	f8 01       	movw	r30, r16
    275a:	80 83       	st	Z, r24
    275c:	91 83       	std	Z+1, r25	; 0x01
    275e:	a2 83       	std	Z+2, r26	; 0x02
    2760:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2762:	fe 01       	movw	r30, r28
    2764:	e7 59       	subi	r30, 0x97	; 151
    2766:	ff 4f       	sbci	r31, 0xFF	; 255
    2768:	60 81       	ld	r22, Z
    276a:	71 81       	ldd	r23, Z+1	; 0x01
    276c:	82 81       	ldd	r24, Z+2	; 0x02
    276e:	93 81       	ldd	r25, Z+3	; 0x03
    2770:	20 e0       	ldi	r18, 0x00	; 0
    2772:	30 e0       	ldi	r19, 0x00	; 0
    2774:	40 e8       	ldi	r20, 0x80	; 128
    2776:	5f e3       	ldi	r21, 0x3F	; 63
    2778:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    277c:	88 23       	and	r24, r24
    277e:	44 f4       	brge	.+16     	; 0x2790 <main+0x27e>
		__ticks = 1;
    2780:	fe 01       	movw	r30, r28
    2782:	e9 59       	subi	r30, 0x99	; 153
    2784:	ff 4f       	sbci	r31, 0xFF	; 255
    2786:	81 e0       	ldi	r24, 0x01	; 1
    2788:	90 e0       	ldi	r25, 0x00	; 0
    278a:	91 83       	std	Z+1, r25	; 0x01
    278c:	80 83       	st	Z, r24
    278e:	64 c0       	rjmp	.+200    	; 0x2858 <main+0x346>
	else if (__tmp > 65535)
    2790:	fe 01       	movw	r30, r28
    2792:	e7 59       	subi	r30, 0x97	; 151
    2794:	ff 4f       	sbci	r31, 0xFF	; 255
    2796:	60 81       	ld	r22, Z
    2798:	71 81       	ldd	r23, Z+1	; 0x01
    279a:	82 81       	ldd	r24, Z+2	; 0x02
    279c:	93 81       	ldd	r25, Z+3	; 0x03
    279e:	20 e0       	ldi	r18, 0x00	; 0
    27a0:	3f ef       	ldi	r19, 0xFF	; 255
    27a2:	4f e7       	ldi	r20, 0x7F	; 127
    27a4:	57 e4       	ldi	r21, 0x47	; 71
    27a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27aa:	18 16       	cp	r1, r24
    27ac:	0c f0       	brlt	.+2      	; 0x27b0 <main+0x29e>
    27ae:	43 c0       	rjmp	.+134    	; 0x2836 <main+0x324>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27b0:	fe 01       	movw	r30, r28
    27b2:	e3 59       	subi	r30, 0x93	; 147
    27b4:	ff 4f       	sbci	r31, 0xFF	; 255
    27b6:	60 81       	ld	r22, Z
    27b8:	71 81       	ldd	r23, Z+1	; 0x01
    27ba:	82 81       	ldd	r24, Z+2	; 0x02
    27bc:	93 81       	ldd	r25, Z+3	; 0x03
    27be:	20 e0       	ldi	r18, 0x00	; 0
    27c0:	30 e0       	ldi	r19, 0x00	; 0
    27c2:	40 e2       	ldi	r20, 0x20	; 32
    27c4:	51 e4       	ldi	r21, 0x41	; 65
    27c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27ca:	dc 01       	movw	r26, r24
    27cc:	cb 01       	movw	r24, r22
    27ce:	8e 01       	movw	r16, r28
    27d0:	09 59       	subi	r16, 0x99	; 153
    27d2:	1f 4f       	sbci	r17, 0xFF	; 255
    27d4:	bc 01       	movw	r22, r24
    27d6:	cd 01       	movw	r24, r26
    27d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27dc:	dc 01       	movw	r26, r24
    27de:	cb 01       	movw	r24, r22
    27e0:	f8 01       	movw	r30, r16
    27e2:	91 83       	std	Z+1, r25	; 0x01
    27e4:	80 83       	st	Z, r24
    27e6:	1f c0       	rjmp	.+62     	; 0x2826 <main+0x314>
    27e8:	fe 01       	movw	r30, r28
    27ea:	eb 59       	subi	r30, 0x9B	; 155
    27ec:	ff 4f       	sbci	r31, 0xFF	; 255
    27ee:	89 e1       	ldi	r24, 0x19	; 25
    27f0:	90 e0       	ldi	r25, 0x00	; 0
    27f2:	91 83       	std	Z+1, r25	; 0x01
    27f4:	80 83       	st	Z, r24
    27f6:	fe 01       	movw	r30, r28
    27f8:	eb 59       	subi	r30, 0x9B	; 155
    27fa:	ff 4f       	sbci	r31, 0xFF	; 255
    27fc:	80 81       	ld	r24, Z
    27fe:	91 81       	ldd	r25, Z+1	; 0x01
    2800:	01 97       	sbiw	r24, 0x01	; 1
    2802:	f1 f7       	brne	.-4      	; 0x2800 <main+0x2ee>
    2804:	fe 01       	movw	r30, r28
    2806:	eb 59       	subi	r30, 0x9B	; 155
    2808:	ff 4f       	sbci	r31, 0xFF	; 255
    280a:	91 83       	std	Z+1, r25	; 0x01
    280c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    280e:	de 01       	movw	r26, r28
    2810:	a9 59       	subi	r26, 0x99	; 153
    2812:	bf 4f       	sbci	r27, 0xFF	; 255
    2814:	fe 01       	movw	r30, r28
    2816:	e9 59       	subi	r30, 0x99	; 153
    2818:	ff 4f       	sbci	r31, 0xFF	; 255
    281a:	80 81       	ld	r24, Z
    281c:	91 81       	ldd	r25, Z+1	; 0x01
    281e:	01 97       	sbiw	r24, 0x01	; 1
    2820:	11 96       	adiw	r26, 0x01	; 1
    2822:	9c 93       	st	X, r25
    2824:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2826:	fe 01       	movw	r30, r28
    2828:	e9 59       	subi	r30, 0x99	; 153
    282a:	ff 4f       	sbci	r31, 0xFF	; 255
    282c:	80 81       	ld	r24, Z
    282e:	91 81       	ldd	r25, Z+1	; 0x01
    2830:	00 97       	sbiw	r24, 0x00	; 0
    2832:	d1 f6       	brne	.-76     	; 0x27e8 <main+0x2d6>
    2834:	27 c0       	rjmp	.+78     	; 0x2884 <main+0x372>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2836:	8e 01       	movw	r16, r28
    2838:	09 59       	subi	r16, 0x99	; 153
    283a:	1f 4f       	sbci	r17, 0xFF	; 255
    283c:	fe 01       	movw	r30, r28
    283e:	e7 59       	subi	r30, 0x97	; 151
    2840:	ff 4f       	sbci	r31, 0xFF	; 255
    2842:	60 81       	ld	r22, Z
    2844:	71 81       	ldd	r23, Z+1	; 0x01
    2846:	82 81       	ldd	r24, Z+2	; 0x02
    2848:	93 81       	ldd	r25, Z+3	; 0x03
    284a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    284e:	dc 01       	movw	r26, r24
    2850:	cb 01       	movw	r24, r22
    2852:	f8 01       	movw	r30, r16
    2854:	91 83       	std	Z+1, r25	; 0x01
    2856:	80 83       	st	Z, r24
    2858:	de 01       	movw	r26, r28
    285a:	ad 59       	subi	r26, 0x9D	; 157
    285c:	bf 4f       	sbci	r27, 0xFF	; 255
    285e:	fe 01       	movw	r30, r28
    2860:	e9 59       	subi	r30, 0x99	; 153
    2862:	ff 4f       	sbci	r31, 0xFF	; 255
    2864:	80 81       	ld	r24, Z
    2866:	91 81       	ldd	r25, Z+1	; 0x01
    2868:	8d 93       	st	X+, r24
    286a:	9c 93       	st	X, r25
    286c:	fe 01       	movw	r30, r28
    286e:	ed 59       	subi	r30, 0x9D	; 157
    2870:	ff 4f       	sbci	r31, 0xFF	; 255
    2872:	80 81       	ld	r24, Z
    2874:	91 81       	ldd	r25, Z+1	; 0x01
    2876:	01 97       	sbiw	r24, 0x01	; 1
    2878:	f1 f7       	brne	.-4      	; 0x2876 <main+0x364>
    287a:	fe 01       	movw	r30, r28
    287c:	ed 59       	subi	r30, 0x9D	; 157
    287e:	ff 4f       	sbci	r31, 0xFF	; 255
    2880:	91 83       	std	Z+1, r25	; 0x01
    2882:	80 83       	st	Z, r24
			disableGIE();
    2884:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <disableGIE>
			LCD_enuGoToPosition(currentLine,counter);
    2888:	80 91 8b 01 	lds	r24, 0x018B
    288c:	fe 01       	movw	r30, r28
    288e:	ee 57       	subi	r30, 0x7E	; 126
    2890:	ff 4f       	sbci	r31, 0xFF	; 255
    2892:	60 81       	ld	r22, Z
    2894:	0e 94 a2 11 	call	0x2344	; 0x2344 <LCD_enuGoToPosition>
			LCD_enuDisplayChar(' ');
    2898:	80 e2       	ldi	r24, 0x20	; 32
    289a:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <LCD_enuDisplayChar>
			currentLine=SECOND_LINE;
    289e:	82 e0       	ldi	r24, 0x02	; 2
    28a0:	80 93 8b 01 	sts	0x018B, r24
			counter++;
    28a4:	de 01       	movw	r26, r28
    28a6:	ae 57       	subi	r26, 0x7E	; 126
    28a8:	bf 4f       	sbci	r27, 0xFF	; 255
    28aa:	fe 01       	movw	r30, r28
    28ac:	ee 57       	subi	r30, 0x7E	; 126
    28ae:	ff 4f       	sbci	r31, 0xFF	; 255
    28b0:	80 81       	ld	r24, Z
    28b2:	8f 5f       	subi	r24, 0xFF	; 255
    28b4:	8c 93       	st	X, r24
			LCD_enuGoToPosition(currentLine,counter);
    28b6:	80 91 8b 01 	lds	r24, 0x018B
    28ba:	fe 01       	movw	r30, r28
    28bc:	ee 57       	subi	r30, 0x7E	; 126
    28be:	ff 4f       	sbci	r31, 0xFF	; 255
    28c0:	60 81       	ld	r22, Z
    28c2:	0e 94 a2 11 	call	0x2344	; 0x2344 <LCD_enuGoToPosition>
			LCD_enuDisplayChar('O');
    28c6:	8f e4       	ldi	r24, 0x4F	; 79
    28c8:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <LCD_enuDisplayChar>
			enableGIE();
    28cc:	0e 94 79 06 	call	0xcf2	; 0xcf2 <enableGIE>
			_delay_ms(delay);
    28d0:	80 91 87 01 	lds	r24, 0x0187
    28d4:	90 91 88 01 	lds	r25, 0x0188
    28d8:	cc 01       	movw	r24, r24
    28da:	a0 e0       	ldi	r26, 0x00	; 0
    28dc:	b0 e0       	ldi	r27, 0x00	; 0
    28de:	bc 01       	movw	r22, r24
    28e0:	cd 01       	movw	r24, r26
    28e2:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    28e6:	dc 01       	movw	r26, r24
    28e8:	cb 01       	movw	r24, r22
    28ea:	fe 01       	movw	r30, r28
    28ec:	e1 5a       	subi	r30, 0xA1	; 161
    28ee:	ff 4f       	sbci	r31, 0xFF	; 255
    28f0:	80 83       	st	Z, r24
    28f2:	91 83       	std	Z+1, r25	; 0x01
    28f4:	a2 83       	std	Z+2, r26	; 0x02
    28f6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28f8:	8e 01       	movw	r16, r28
    28fa:	05 5a       	subi	r16, 0xA5	; 165
    28fc:	1f 4f       	sbci	r17, 0xFF	; 255
    28fe:	fe 01       	movw	r30, r28
    2900:	e1 5a       	subi	r30, 0xA1	; 161
    2902:	ff 4f       	sbci	r31, 0xFF	; 255
    2904:	60 81       	ld	r22, Z
    2906:	71 81       	ldd	r23, Z+1	; 0x01
    2908:	82 81       	ldd	r24, Z+2	; 0x02
    290a:	93 81       	ldd	r25, Z+3	; 0x03
    290c:	20 e0       	ldi	r18, 0x00	; 0
    290e:	30 e0       	ldi	r19, 0x00	; 0
    2910:	4a e7       	ldi	r20, 0x7A	; 122
    2912:	53 e4       	ldi	r21, 0x43	; 67
    2914:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2918:	dc 01       	movw	r26, r24
    291a:	cb 01       	movw	r24, r22
    291c:	f8 01       	movw	r30, r16
    291e:	80 83       	st	Z, r24
    2920:	91 83       	std	Z+1, r25	; 0x01
    2922:	a2 83       	std	Z+2, r26	; 0x02
    2924:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2926:	fe 01       	movw	r30, r28
    2928:	e5 5a       	subi	r30, 0xA5	; 165
    292a:	ff 4f       	sbci	r31, 0xFF	; 255
    292c:	60 81       	ld	r22, Z
    292e:	71 81       	ldd	r23, Z+1	; 0x01
    2930:	82 81       	ldd	r24, Z+2	; 0x02
    2932:	93 81       	ldd	r25, Z+3	; 0x03
    2934:	20 e0       	ldi	r18, 0x00	; 0
    2936:	30 e0       	ldi	r19, 0x00	; 0
    2938:	40 e8       	ldi	r20, 0x80	; 128
    293a:	5f e3       	ldi	r21, 0x3F	; 63
    293c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2940:	88 23       	and	r24, r24
    2942:	44 f4       	brge	.+16     	; 0x2954 <main+0x442>
		__ticks = 1;
    2944:	fe 01       	movw	r30, r28
    2946:	e7 5a       	subi	r30, 0xA7	; 167
    2948:	ff 4f       	sbci	r31, 0xFF	; 255
    294a:	81 e0       	ldi	r24, 0x01	; 1
    294c:	90 e0       	ldi	r25, 0x00	; 0
    294e:	91 83       	std	Z+1, r25	; 0x01
    2950:	80 83       	st	Z, r24
    2952:	64 c0       	rjmp	.+200    	; 0x2a1c <main+0x50a>
	else if (__tmp > 65535)
    2954:	fe 01       	movw	r30, r28
    2956:	e5 5a       	subi	r30, 0xA5	; 165
    2958:	ff 4f       	sbci	r31, 0xFF	; 255
    295a:	60 81       	ld	r22, Z
    295c:	71 81       	ldd	r23, Z+1	; 0x01
    295e:	82 81       	ldd	r24, Z+2	; 0x02
    2960:	93 81       	ldd	r25, Z+3	; 0x03
    2962:	20 e0       	ldi	r18, 0x00	; 0
    2964:	3f ef       	ldi	r19, 0xFF	; 255
    2966:	4f e7       	ldi	r20, 0x7F	; 127
    2968:	57 e4       	ldi	r21, 0x47	; 71
    296a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    296e:	18 16       	cp	r1, r24
    2970:	0c f0       	brlt	.+2      	; 0x2974 <main+0x462>
    2972:	43 c0       	rjmp	.+134    	; 0x29fa <main+0x4e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2974:	fe 01       	movw	r30, r28
    2976:	e1 5a       	subi	r30, 0xA1	; 161
    2978:	ff 4f       	sbci	r31, 0xFF	; 255
    297a:	60 81       	ld	r22, Z
    297c:	71 81       	ldd	r23, Z+1	; 0x01
    297e:	82 81       	ldd	r24, Z+2	; 0x02
    2980:	93 81       	ldd	r25, Z+3	; 0x03
    2982:	20 e0       	ldi	r18, 0x00	; 0
    2984:	30 e0       	ldi	r19, 0x00	; 0
    2986:	40 e2       	ldi	r20, 0x20	; 32
    2988:	51 e4       	ldi	r21, 0x41	; 65
    298a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    298e:	dc 01       	movw	r26, r24
    2990:	cb 01       	movw	r24, r22
    2992:	8e 01       	movw	r16, r28
    2994:	07 5a       	subi	r16, 0xA7	; 167
    2996:	1f 4f       	sbci	r17, 0xFF	; 255
    2998:	bc 01       	movw	r22, r24
    299a:	cd 01       	movw	r24, r26
    299c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29a0:	dc 01       	movw	r26, r24
    29a2:	cb 01       	movw	r24, r22
    29a4:	f8 01       	movw	r30, r16
    29a6:	91 83       	std	Z+1, r25	; 0x01
    29a8:	80 83       	st	Z, r24
    29aa:	1f c0       	rjmp	.+62     	; 0x29ea <main+0x4d8>
    29ac:	fe 01       	movw	r30, r28
    29ae:	e9 5a       	subi	r30, 0xA9	; 169
    29b0:	ff 4f       	sbci	r31, 0xFF	; 255
    29b2:	89 e1       	ldi	r24, 0x19	; 25
    29b4:	90 e0       	ldi	r25, 0x00	; 0
    29b6:	91 83       	std	Z+1, r25	; 0x01
    29b8:	80 83       	st	Z, r24
    29ba:	fe 01       	movw	r30, r28
    29bc:	e9 5a       	subi	r30, 0xA9	; 169
    29be:	ff 4f       	sbci	r31, 0xFF	; 255
    29c0:	80 81       	ld	r24, Z
    29c2:	91 81       	ldd	r25, Z+1	; 0x01
    29c4:	01 97       	sbiw	r24, 0x01	; 1
    29c6:	f1 f7       	brne	.-4      	; 0x29c4 <main+0x4b2>
    29c8:	fe 01       	movw	r30, r28
    29ca:	e9 5a       	subi	r30, 0xA9	; 169
    29cc:	ff 4f       	sbci	r31, 0xFF	; 255
    29ce:	91 83       	std	Z+1, r25	; 0x01
    29d0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29d2:	de 01       	movw	r26, r28
    29d4:	a7 5a       	subi	r26, 0xA7	; 167
    29d6:	bf 4f       	sbci	r27, 0xFF	; 255
    29d8:	fe 01       	movw	r30, r28
    29da:	e7 5a       	subi	r30, 0xA7	; 167
    29dc:	ff 4f       	sbci	r31, 0xFF	; 255
    29de:	80 81       	ld	r24, Z
    29e0:	91 81       	ldd	r25, Z+1	; 0x01
    29e2:	01 97       	sbiw	r24, 0x01	; 1
    29e4:	11 96       	adiw	r26, 0x01	; 1
    29e6:	9c 93       	st	X, r25
    29e8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29ea:	fe 01       	movw	r30, r28
    29ec:	e7 5a       	subi	r30, 0xA7	; 167
    29ee:	ff 4f       	sbci	r31, 0xFF	; 255
    29f0:	80 81       	ld	r24, Z
    29f2:	91 81       	ldd	r25, Z+1	; 0x01
    29f4:	00 97       	sbiw	r24, 0x00	; 0
    29f6:	d1 f6       	brne	.-76     	; 0x29ac <main+0x49a>
    29f8:	27 c0       	rjmp	.+78     	; 0x2a48 <main+0x536>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29fa:	8e 01       	movw	r16, r28
    29fc:	07 5a       	subi	r16, 0xA7	; 167
    29fe:	1f 4f       	sbci	r17, 0xFF	; 255
    2a00:	fe 01       	movw	r30, r28
    2a02:	e5 5a       	subi	r30, 0xA5	; 165
    2a04:	ff 4f       	sbci	r31, 0xFF	; 255
    2a06:	60 81       	ld	r22, Z
    2a08:	71 81       	ldd	r23, Z+1	; 0x01
    2a0a:	82 81       	ldd	r24, Z+2	; 0x02
    2a0c:	93 81       	ldd	r25, Z+3	; 0x03
    2a0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a12:	dc 01       	movw	r26, r24
    2a14:	cb 01       	movw	r24, r22
    2a16:	f8 01       	movw	r30, r16
    2a18:	91 83       	std	Z+1, r25	; 0x01
    2a1a:	80 83       	st	Z, r24
    2a1c:	de 01       	movw	r26, r28
    2a1e:	ab 5a       	subi	r26, 0xAB	; 171
    2a20:	bf 4f       	sbci	r27, 0xFF	; 255
    2a22:	fe 01       	movw	r30, r28
    2a24:	e7 5a       	subi	r30, 0xA7	; 167
    2a26:	ff 4f       	sbci	r31, 0xFF	; 255
    2a28:	80 81       	ld	r24, Z
    2a2a:	91 81       	ldd	r25, Z+1	; 0x01
    2a2c:	8d 93       	st	X+, r24
    2a2e:	9c 93       	st	X, r25
    2a30:	fe 01       	movw	r30, r28
    2a32:	eb 5a       	subi	r30, 0xAB	; 171
    2a34:	ff 4f       	sbci	r31, 0xFF	; 255
    2a36:	80 81       	ld	r24, Z
    2a38:	91 81       	ldd	r25, Z+1	; 0x01
    2a3a:	01 97       	sbiw	r24, 0x01	; 1
    2a3c:	f1 f7       	brne	.-4      	; 0x2a3a <main+0x528>
    2a3e:	fe 01       	movw	r30, r28
    2a40:	eb 5a       	subi	r30, 0xAB	; 171
    2a42:	ff 4f       	sbci	r31, 0xFF	; 255
    2a44:	91 83       	std	Z+1, r25	; 0x01
    2a46:	80 83       	st	Z, r24
			disableGIE();
    2a48:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <disableGIE>
			LCD_enuGoToPosition(currentLine,counter);
    2a4c:	80 91 8b 01 	lds	r24, 0x018B
    2a50:	fe 01       	movw	r30, r28
    2a52:	ee 57       	subi	r30, 0x7E	; 126
    2a54:	ff 4f       	sbci	r31, 0xFF	; 255
    2a56:	60 81       	ld	r22, Z
    2a58:	0e 94 a2 11 	call	0x2344	; 0x2344 <LCD_enuGoToPosition>
			LCD_enuDisplayChar(' ');
    2a5c:	80 e2       	ldi	r24, 0x20	; 32
    2a5e:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <LCD_enuDisplayChar>

			if(counter==14)
    2a62:	fe 01       	movw	r30, r28
    2a64:	ee 57       	subi	r30, 0x7E	; 126
    2a66:	ff 4f       	sbci	r31, 0xFF	; 255
    2a68:	80 81       	ld	r24, Z
    2a6a:	8e 30       	cpi	r24, 0x0E	; 14
    2a6c:	89 f4       	brne	.+34     	; 0x2a90 <main+0x57e>
			{
				if (currentLine!=player2)
    2a6e:	90 91 8b 01 	lds	r25, 0x018B
    2a72:	80 91 86 01 	lds	r24, 0x0186
    2a76:	98 17       	cp	r25, r24
    2a78:	59 f0       	breq	.+22     	; 0x2a90 <main+0x57e>
				{
					LCD_vidClearScreen();
    2a7a:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <LCD_vidClearScreen>
					LCD_enuGoToPosition(FIRST_LINE,2);
    2a7e:	81 e0       	ldi	r24, 0x01	; 1
    2a80:	62 e0       	ldi	r22, 0x02	; 2
    2a82:	0e 94 a2 11 	call	0x2344	; 0x2344 <LCD_enuGoToPosition>
					LCD_enuWriteString("player 1 win");
    2a86:	83 e6       	ldi	r24, 0x63	; 99
    2a88:	90 e0       	ldi	r25, 0x00	; 0
    2a8a:	0e 94 05 12 	call	0x240a	; 0x240a <LCD_enuWriteString>
    2a8e:	ff cf       	rjmp	.-2      	; 0x2a8e <main+0x57c>

	LCD_enuSendCommand(0x0c);
	while (1)
	{

		for(u8 counter = 1;counter<15;counter++)
    2a90:	de 01       	movw	r26, r28
    2a92:	ae 57       	subi	r26, 0x7E	; 126
    2a94:	bf 4f       	sbci	r27, 0xFF	; 255
    2a96:	fe 01       	movw	r30, r28
    2a98:	ee 57       	subi	r30, 0x7E	; 126
    2a9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a9c:	80 81       	ld	r24, Z
    2a9e:	8f 5f       	subi	r24, 0xFF	; 255
    2aa0:	8c 93       	st	X, r24
    2aa2:	fe 01       	movw	r30, r28
    2aa4:	ee 57       	subi	r30, 0x7E	; 126
    2aa6:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa8:	80 81       	ld	r24, Z
    2aaa:	8f 30       	cpi	r24, 0x0F	; 15
    2aac:	08 f4       	brcc	.+2      	; 0x2ab0 <main+0x59e>
    2aae:	5d cd       	rjmp	.-1350   	; 0x256a <main+0x58>
					while(1);
				}
			}
		}

for(u8 counter = 14 ;counter > 1 ;counter--)
    2ab0:	fe 01       	movw	r30, r28
    2ab2:	ef 57       	subi	r30, 0x7F	; 127
    2ab4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab6:	8e e0       	ldi	r24, 0x0E	; 14
    2ab8:	80 83       	st	Z, r24
    2aba:	af c1       	rjmp	.+862    	; 0x2e1a <main+0x908>
{
	disableGIE();
    2abc:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <disableGIE>
	currentLine= FIRST_LINE;
    2ac0:	81 e0       	ldi	r24, 0x01	; 1
    2ac2:	80 93 8b 01 	sts	0x018B, r24
		LCD_enuGoToPosition(currentLine,counter);
    2ac6:	80 91 8b 01 	lds	r24, 0x018B
    2aca:	fe 01       	movw	r30, r28
    2acc:	ef 57       	subi	r30, 0x7F	; 127
    2ace:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad0:	60 81       	ld	r22, Z
    2ad2:	0e 94 a2 11 	call	0x2344	; 0x2344 <LCD_enuGoToPosition>
		LCD_enuDisplayChar('O');
    2ad6:	8f e4       	ldi	r24, 0x4F	; 79
    2ad8:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <LCD_enuDisplayChar>
		enableGIE();
    2adc:	0e 94 79 06 	call	0xcf2	; 0xcf2 <enableGIE>
		_delay_ms(delay);
    2ae0:	80 91 87 01 	lds	r24, 0x0187
    2ae4:	90 91 88 01 	lds	r25, 0x0188
    2ae8:	cc 01       	movw	r24, r24
    2aea:	a0 e0       	ldi	r26, 0x00	; 0
    2aec:	b0 e0       	ldi	r27, 0x00	; 0
    2aee:	bc 01       	movw	r22, r24
    2af0:	cd 01       	movw	r24, r26
    2af2:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    2af6:	dc 01       	movw	r26, r24
    2af8:	cb 01       	movw	r24, r22
    2afa:	fe 01       	movw	r30, r28
    2afc:	ef 5a       	subi	r30, 0xAF	; 175
    2afe:	ff 4f       	sbci	r31, 0xFF	; 255
    2b00:	80 83       	st	Z, r24
    2b02:	91 83       	std	Z+1, r25	; 0x01
    2b04:	a2 83       	std	Z+2, r26	; 0x02
    2b06:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b08:	8e 01       	movw	r16, r28
    2b0a:	03 5b       	subi	r16, 0xB3	; 179
    2b0c:	1f 4f       	sbci	r17, 0xFF	; 255
    2b0e:	fe 01       	movw	r30, r28
    2b10:	ef 5a       	subi	r30, 0xAF	; 175
    2b12:	ff 4f       	sbci	r31, 0xFF	; 255
    2b14:	60 81       	ld	r22, Z
    2b16:	71 81       	ldd	r23, Z+1	; 0x01
    2b18:	82 81       	ldd	r24, Z+2	; 0x02
    2b1a:	93 81       	ldd	r25, Z+3	; 0x03
    2b1c:	20 e0       	ldi	r18, 0x00	; 0
    2b1e:	30 e0       	ldi	r19, 0x00	; 0
    2b20:	4a e7       	ldi	r20, 0x7A	; 122
    2b22:	53 e4       	ldi	r21, 0x43	; 67
    2b24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b28:	dc 01       	movw	r26, r24
    2b2a:	cb 01       	movw	r24, r22
    2b2c:	f8 01       	movw	r30, r16
    2b2e:	80 83       	st	Z, r24
    2b30:	91 83       	std	Z+1, r25	; 0x01
    2b32:	a2 83       	std	Z+2, r26	; 0x02
    2b34:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b36:	fe 01       	movw	r30, r28
    2b38:	e3 5b       	subi	r30, 0xB3	; 179
    2b3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b3c:	60 81       	ld	r22, Z
    2b3e:	71 81       	ldd	r23, Z+1	; 0x01
    2b40:	82 81       	ldd	r24, Z+2	; 0x02
    2b42:	93 81       	ldd	r25, Z+3	; 0x03
    2b44:	20 e0       	ldi	r18, 0x00	; 0
    2b46:	30 e0       	ldi	r19, 0x00	; 0
    2b48:	40 e8       	ldi	r20, 0x80	; 128
    2b4a:	5f e3       	ldi	r21, 0x3F	; 63
    2b4c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b50:	88 23       	and	r24, r24
    2b52:	44 f4       	brge	.+16     	; 0x2b64 <main+0x652>
		__ticks = 1;
    2b54:	fe 01       	movw	r30, r28
    2b56:	e5 5b       	subi	r30, 0xB5	; 181
    2b58:	ff 4f       	sbci	r31, 0xFF	; 255
    2b5a:	81 e0       	ldi	r24, 0x01	; 1
    2b5c:	90 e0       	ldi	r25, 0x00	; 0
    2b5e:	91 83       	std	Z+1, r25	; 0x01
    2b60:	80 83       	st	Z, r24
    2b62:	64 c0       	rjmp	.+200    	; 0x2c2c <main+0x71a>
	else if (__tmp > 65535)
    2b64:	fe 01       	movw	r30, r28
    2b66:	e3 5b       	subi	r30, 0xB3	; 179
    2b68:	ff 4f       	sbci	r31, 0xFF	; 255
    2b6a:	60 81       	ld	r22, Z
    2b6c:	71 81       	ldd	r23, Z+1	; 0x01
    2b6e:	82 81       	ldd	r24, Z+2	; 0x02
    2b70:	93 81       	ldd	r25, Z+3	; 0x03
    2b72:	20 e0       	ldi	r18, 0x00	; 0
    2b74:	3f ef       	ldi	r19, 0xFF	; 255
    2b76:	4f e7       	ldi	r20, 0x7F	; 127
    2b78:	57 e4       	ldi	r21, 0x47	; 71
    2b7a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b7e:	18 16       	cp	r1, r24
    2b80:	0c f0       	brlt	.+2      	; 0x2b84 <main+0x672>
    2b82:	43 c0       	rjmp	.+134    	; 0x2c0a <main+0x6f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b84:	fe 01       	movw	r30, r28
    2b86:	ef 5a       	subi	r30, 0xAF	; 175
    2b88:	ff 4f       	sbci	r31, 0xFF	; 255
    2b8a:	60 81       	ld	r22, Z
    2b8c:	71 81       	ldd	r23, Z+1	; 0x01
    2b8e:	82 81       	ldd	r24, Z+2	; 0x02
    2b90:	93 81       	ldd	r25, Z+3	; 0x03
    2b92:	20 e0       	ldi	r18, 0x00	; 0
    2b94:	30 e0       	ldi	r19, 0x00	; 0
    2b96:	40 e2       	ldi	r20, 0x20	; 32
    2b98:	51 e4       	ldi	r21, 0x41	; 65
    2b9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b9e:	dc 01       	movw	r26, r24
    2ba0:	cb 01       	movw	r24, r22
    2ba2:	8e 01       	movw	r16, r28
    2ba4:	05 5b       	subi	r16, 0xB5	; 181
    2ba6:	1f 4f       	sbci	r17, 0xFF	; 255
    2ba8:	bc 01       	movw	r22, r24
    2baa:	cd 01       	movw	r24, r26
    2bac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bb0:	dc 01       	movw	r26, r24
    2bb2:	cb 01       	movw	r24, r22
    2bb4:	f8 01       	movw	r30, r16
    2bb6:	91 83       	std	Z+1, r25	; 0x01
    2bb8:	80 83       	st	Z, r24
    2bba:	1f c0       	rjmp	.+62     	; 0x2bfa <main+0x6e8>
    2bbc:	fe 01       	movw	r30, r28
    2bbe:	e7 5b       	subi	r30, 0xB7	; 183
    2bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc2:	89 e1       	ldi	r24, 0x19	; 25
    2bc4:	90 e0       	ldi	r25, 0x00	; 0
    2bc6:	91 83       	std	Z+1, r25	; 0x01
    2bc8:	80 83       	st	Z, r24
    2bca:	fe 01       	movw	r30, r28
    2bcc:	e7 5b       	subi	r30, 0xB7	; 183
    2bce:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd0:	80 81       	ld	r24, Z
    2bd2:	91 81       	ldd	r25, Z+1	; 0x01
    2bd4:	01 97       	sbiw	r24, 0x01	; 1
    2bd6:	f1 f7       	brne	.-4      	; 0x2bd4 <main+0x6c2>
    2bd8:	fe 01       	movw	r30, r28
    2bda:	e7 5b       	subi	r30, 0xB7	; 183
    2bdc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bde:	91 83       	std	Z+1, r25	; 0x01
    2be0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2be2:	de 01       	movw	r26, r28
    2be4:	a5 5b       	subi	r26, 0xB5	; 181
    2be6:	bf 4f       	sbci	r27, 0xFF	; 255
    2be8:	fe 01       	movw	r30, r28
    2bea:	e5 5b       	subi	r30, 0xB5	; 181
    2bec:	ff 4f       	sbci	r31, 0xFF	; 255
    2bee:	80 81       	ld	r24, Z
    2bf0:	91 81       	ldd	r25, Z+1	; 0x01
    2bf2:	01 97       	sbiw	r24, 0x01	; 1
    2bf4:	11 96       	adiw	r26, 0x01	; 1
    2bf6:	9c 93       	st	X, r25
    2bf8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bfa:	fe 01       	movw	r30, r28
    2bfc:	e5 5b       	subi	r30, 0xB5	; 181
    2bfe:	ff 4f       	sbci	r31, 0xFF	; 255
    2c00:	80 81       	ld	r24, Z
    2c02:	91 81       	ldd	r25, Z+1	; 0x01
    2c04:	00 97       	sbiw	r24, 0x00	; 0
    2c06:	d1 f6       	brne	.-76     	; 0x2bbc <main+0x6aa>
    2c08:	27 c0       	rjmp	.+78     	; 0x2c58 <main+0x746>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c0a:	8e 01       	movw	r16, r28
    2c0c:	05 5b       	subi	r16, 0xB5	; 181
    2c0e:	1f 4f       	sbci	r17, 0xFF	; 255
    2c10:	fe 01       	movw	r30, r28
    2c12:	e3 5b       	subi	r30, 0xB3	; 179
    2c14:	ff 4f       	sbci	r31, 0xFF	; 255
    2c16:	60 81       	ld	r22, Z
    2c18:	71 81       	ldd	r23, Z+1	; 0x01
    2c1a:	82 81       	ldd	r24, Z+2	; 0x02
    2c1c:	93 81       	ldd	r25, Z+3	; 0x03
    2c1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c22:	dc 01       	movw	r26, r24
    2c24:	cb 01       	movw	r24, r22
    2c26:	f8 01       	movw	r30, r16
    2c28:	91 83       	std	Z+1, r25	; 0x01
    2c2a:	80 83       	st	Z, r24
    2c2c:	de 01       	movw	r26, r28
    2c2e:	a9 5b       	subi	r26, 0xB9	; 185
    2c30:	bf 4f       	sbci	r27, 0xFF	; 255
    2c32:	fe 01       	movw	r30, r28
    2c34:	e5 5b       	subi	r30, 0xB5	; 181
    2c36:	ff 4f       	sbci	r31, 0xFF	; 255
    2c38:	80 81       	ld	r24, Z
    2c3a:	91 81       	ldd	r25, Z+1	; 0x01
    2c3c:	8d 93       	st	X+, r24
    2c3e:	9c 93       	st	X, r25
    2c40:	fe 01       	movw	r30, r28
    2c42:	e9 5b       	subi	r30, 0xB9	; 185
    2c44:	ff 4f       	sbci	r31, 0xFF	; 255
    2c46:	80 81       	ld	r24, Z
    2c48:	91 81       	ldd	r25, Z+1	; 0x01
    2c4a:	01 97       	sbiw	r24, 0x01	; 1
    2c4c:	f1 f7       	brne	.-4      	; 0x2c4a <main+0x738>
    2c4e:	fe 01       	movw	r30, r28
    2c50:	e9 5b       	subi	r30, 0xB9	; 185
    2c52:	ff 4f       	sbci	r31, 0xFF	; 255
    2c54:	91 83       	std	Z+1, r25	; 0x01
    2c56:	80 83       	st	Z, r24
		disableGIE();
    2c58:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <disableGIE>
		LCD_enuGoToPosition(currentLine,counter);
    2c5c:	80 91 8b 01 	lds	r24, 0x018B
    2c60:	fe 01       	movw	r30, r28
    2c62:	ef 57       	subi	r30, 0x7F	; 127
    2c64:	ff 4f       	sbci	r31, 0xFF	; 255
    2c66:	60 81       	ld	r22, Z
    2c68:	0e 94 a2 11 	call	0x2344	; 0x2344 <LCD_enuGoToPosition>
		LCD_enuDisplayChar(' ');
    2c6c:	80 e2       	ldi	r24, 0x20	; 32
    2c6e:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <LCD_enuDisplayChar>
		currentLine=SECOND_LINE;
    2c72:	82 e0       	ldi	r24, 0x02	; 2
    2c74:	80 93 8b 01 	sts	0x018B, r24
		counter--;
    2c78:	de 01       	movw	r26, r28
    2c7a:	af 57       	subi	r26, 0x7F	; 127
    2c7c:	bf 4f       	sbci	r27, 0xFF	; 255
    2c7e:	fe 01       	movw	r30, r28
    2c80:	ef 57       	subi	r30, 0x7F	; 127
    2c82:	ff 4f       	sbci	r31, 0xFF	; 255
    2c84:	80 81       	ld	r24, Z
    2c86:	81 50       	subi	r24, 0x01	; 1
    2c88:	8c 93       	st	X, r24
		LCD_enuGoToPosition(currentLine,counter);
    2c8a:	80 91 8b 01 	lds	r24, 0x018B
    2c8e:	fe 01       	movw	r30, r28
    2c90:	ef 57       	subi	r30, 0x7F	; 127
    2c92:	ff 4f       	sbci	r31, 0xFF	; 255
    2c94:	60 81       	ld	r22, Z
    2c96:	0e 94 a2 11 	call	0x2344	; 0x2344 <LCD_enuGoToPosition>
		LCD_enuDisplayChar('O');
    2c9a:	8f e4       	ldi	r24, 0x4F	; 79
    2c9c:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <LCD_enuDisplayChar>
		enableGIE();
    2ca0:	0e 94 79 06 	call	0xcf2	; 0xcf2 <enableGIE>
		_delay_ms(delay);
    2ca4:	80 91 87 01 	lds	r24, 0x0187
    2ca8:	90 91 88 01 	lds	r25, 0x0188
    2cac:	cc 01       	movw	r24, r24
    2cae:	a0 e0       	ldi	r26, 0x00	; 0
    2cb0:	b0 e0       	ldi	r27, 0x00	; 0
    2cb2:	bc 01       	movw	r22, r24
    2cb4:	cd 01       	movw	r24, r26
    2cb6:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    2cba:	dc 01       	movw	r26, r24
    2cbc:	cb 01       	movw	r24, r22
    2cbe:	fe 01       	movw	r30, r28
    2cc0:	ed 5b       	subi	r30, 0xBD	; 189
    2cc2:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc4:	80 83       	st	Z, r24
    2cc6:	91 83       	std	Z+1, r25	; 0x01
    2cc8:	a2 83       	std	Z+2, r26	; 0x02
    2cca:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ccc:	8e 01       	movw	r16, r28
    2cce:	01 5c       	subi	r16, 0xC1	; 193
    2cd0:	1f 4f       	sbci	r17, 0xFF	; 255
    2cd2:	fe 01       	movw	r30, r28
    2cd4:	ed 5b       	subi	r30, 0xBD	; 189
    2cd6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd8:	60 81       	ld	r22, Z
    2cda:	71 81       	ldd	r23, Z+1	; 0x01
    2cdc:	82 81       	ldd	r24, Z+2	; 0x02
    2cde:	93 81       	ldd	r25, Z+3	; 0x03
    2ce0:	20 e0       	ldi	r18, 0x00	; 0
    2ce2:	30 e0       	ldi	r19, 0x00	; 0
    2ce4:	4a e7       	ldi	r20, 0x7A	; 122
    2ce6:	53 e4       	ldi	r21, 0x43	; 67
    2ce8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cec:	dc 01       	movw	r26, r24
    2cee:	cb 01       	movw	r24, r22
    2cf0:	f8 01       	movw	r30, r16
    2cf2:	80 83       	st	Z, r24
    2cf4:	91 83       	std	Z+1, r25	; 0x01
    2cf6:	a2 83       	std	Z+2, r26	; 0x02
    2cf8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2cfa:	fe 01       	movw	r30, r28
    2cfc:	ff 96       	adiw	r30, 0x3f	; 63
    2cfe:	60 81       	ld	r22, Z
    2d00:	71 81       	ldd	r23, Z+1	; 0x01
    2d02:	82 81       	ldd	r24, Z+2	; 0x02
    2d04:	93 81       	ldd	r25, Z+3	; 0x03
    2d06:	20 e0       	ldi	r18, 0x00	; 0
    2d08:	30 e0       	ldi	r19, 0x00	; 0
    2d0a:	40 e8       	ldi	r20, 0x80	; 128
    2d0c:	5f e3       	ldi	r21, 0x3F	; 63
    2d0e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d12:	88 23       	and	r24, r24
    2d14:	2c f4       	brge	.+10     	; 0x2d20 <main+0x80e>
		__ticks = 1;
    2d16:	81 e0       	ldi	r24, 0x01	; 1
    2d18:	90 e0       	ldi	r25, 0x00	; 0
    2d1a:	9e af       	std	Y+62, r25	; 0x3e
    2d1c:	8d af       	std	Y+61, r24	; 0x3d
    2d1e:	46 c0       	rjmp	.+140    	; 0x2dac <main+0x89a>
	else if (__tmp > 65535)
    2d20:	fe 01       	movw	r30, r28
    2d22:	ff 96       	adiw	r30, 0x3f	; 63
    2d24:	60 81       	ld	r22, Z
    2d26:	71 81       	ldd	r23, Z+1	; 0x01
    2d28:	82 81       	ldd	r24, Z+2	; 0x02
    2d2a:	93 81       	ldd	r25, Z+3	; 0x03
    2d2c:	20 e0       	ldi	r18, 0x00	; 0
    2d2e:	3f ef       	ldi	r19, 0xFF	; 255
    2d30:	4f e7       	ldi	r20, 0x7F	; 127
    2d32:	57 e4       	ldi	r21, 0x47	; 71
    2d34:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d38:	18 16       	cp	r1, r24
    2d3a:	64 f5       	brge	.+88     	; 0x2d94 <main+0x882>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d3c:	fe 01       	movw	r30, r28
    2d3e:	ed 5b       	subi	r30, 0xBD	; 189
    2d40:	ff 4f       	sbci	r31, 0xFF	; 255
    2d42:	60 81       	ld	r22, Z
    2d44:	71 81       	ldd	r23, Z+1	; 0x01
    2d46:	82 81       	ldd	r24, Z+2	; 0x02
    2d48:	93 81       	ldd	r25, Z+3	; 0x03
    2d4a:	20 e0       	ldi	r18, 0x00	; 0
    2d4c:	30 e0       	ldi	r19, 0x00	; 0
    2d4e:	40 e2       	ldi	r20, 0x20	; 32
    2d50:	51 e4       	ldi	r21, 0x41	; 65
    2d52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d56:	dc 01       	movw	r26, r24
    2d58:	cb 01       	movw	r24, r22
    2d5a:	bc 01       	movw	r22, r24
    2d5c:	cd 01       	movw	r24, r26
    2d5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d62:	dc 01       	movw	r26, r24
    2d64:	cb 01       	movw	r24, r22
    2d66:	9e af       	std	Y+62, r25	; 0x3e
    2d68:	8d af       	std	Y+61, r24	; 0x3d
    2d6a:	0f c0       	rjmp	.+30     	; 0x2d8a <main+0x878>
    2d6c:	89 e1       	ldi	r24, 0x19	; 25
    2d6e:	90 e0       	ldi	r25, 0x00	; 0
    2d70:	9c af       	std	Y+60, r25	; 0x3c
    2d72:	8b af       	std	Y+59, r24	; 0x3b
    2d74:	8b ad       	ldd	r24, Y+59	; 0x3b
    2d76:	9c ad       	ldd	r25, Y+60	; 0x3c
    2d78:	01 97       	sbiw	r24, 0x01	; 1
    2d7a:	f1 f7       	brne	.-4      	; 0x2d78 <main+0x866>
    2d7c:	9c af       	std	Y+60, r25	; 0x3c
    2d7e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d80:	8d ad       	ldd	r24, Y+61	; 0x3d
    2d82:	9e ad       	ldd	r25, Y+62	; 0x3e
    2d84:	01 97       	sbiw	r24, 0x01	; 1
    2d86:	9e af       	std	Y+62, r25	; 0x3e
    2d88:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d8a:	8d ad       	ldd	r24, Y+61	; 0x3d
    2d8c:	9e ad       	ldd	r25, Y+62	; 0x3e
    2d8e:	00 97       	sbiw	r24, 0x00	; 0
    2d90:	69 f7       	brne	.-38     	; 0x2d6c <main+0x85a>
    2d92:	16 c0       	rjmp	.+44     	; 0x2dc0 <main+0x8ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d94:	fe 01       	movw	r30, r28
    2d96:	ff 96       	adiw	r30, 0x3f	; 63
    2d98:	60 81       	ld	r22, Z
    2d9a:	71 81       	ldd	r23, Z+1	; 0x01
    2d9c:	82 81       	ldd	r24, Z+2	; 0x02
    2d9e:	93 81       	ldd	r25, Z+3	; 0x03
    2da0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2da4:	dc 01       	movw	r26, r24
    2da6:	cb 01       	movw	r24, r22
    2da8:	9e af       	std	Y+62, r25	; 0x3e
    2daa:	8d af       	std	Y+61, r24	; 0x3d
    2dac:	8d ad       	ldd	r24, Y+61	; 0x3d
    2dae:	9e ad       	ldd	r25, Y+62	; 0x3e
    2db0:	9a af       	std	Y+58, r25	; 0x3a
    2db2:	89 af       	std	Y+57, r24	; 0x39
    2db4:	89 ad       	ldd	r24, Y+57	; 0x39
    2db6:	9a ad       	ldd	r25, Y+58	; 0x3a
    2db8:	01 97       	sbiw	r24, 0x01	; 1
    2dba:	f1 f7       	brne	.-4      	; 0x2db8 <main+0x8a6>
    2dbc:	9a af       	std	Y+58, r25	; 0x3a
    2dbe:	89 af       	std	Y+57, r24	; 0x39
		disableGIE();
    2dc0:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <disableGIE>
		LCD_enuGoToPosition(currentLine,counter);
    2dc4:	80 91 8b 01 	lds	r24, 0x018B
    2dc8:	fe 01       	movw	r30, r28
    2dca:	ef 57       	subi	r30, 0x7F	; 127
    2dcc:	ff 4f       	sbci	r31, 0xFF	; 255
    2dce:	60 81       	ld	r22, Z
    2dd0:	0e 94 a2 11 	call	0x2344	; 0x2344 <LCD_enuGoToPosition>
		LCD_enuDisplayChar(' ');
    2dd4:	80 e2       	ldi	r24, 0x20	; 32
    2dd6:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <LCD_enuDisplayChar>
		if(counter==1)
    2dda:	fe 01       	movw	r30, r28
    2ddc:	ef 57       	subi	r30, 0x7F	; 127
    2dde:	ff 4f       	sbci	r31, 0xFF	; 255
    2de0:	80 81       	ld	r24, Z
    2de2:	81 30       	cpi	r24, 0x01	; 1
    2de4:	89 f4       	brne	.+34     	; 0x2e08 <main+0x8f6>
		{
			if (currentLine!=player1)
    2de6:	90 91 8b 01 	lds	r25, 0x018B
    2dea:	80 91 85 01 	lds	r24, 0x0185
    2dee:	98 17       	cp	r25, r24
    2df0:	59 f0       	breq	.+22     	; 0x2e08 <main+0x8f6>
			{
				LCD_vidClearScreen();
    2df2:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <LCD_vidClearScreen>
				LCD_enuGoToPosition(FIRST_LINE,2);
    2df6:	81 e0       	ldi	r24, 0x01	; 1
    2df8:	62 e0       	ldi	r22, 0x02	; 2
    2dfa:	0e 94 a2 11 	call	0x2344	; 0x2344 <LCD_enuGoToPosition>
				LCD_enuWriteString("player 2 win");
    2dfe:	80 e7       	ldi	r24, 0x70	; 112
    2e00:	90 e0       	ldi	r25, 0x00	; 0
    2e02:	0e 94 05 12 	call	0x240a	; 0x240a <LCD_enuWriteString>
    2e06:	ff cf       	rjmp	.-2      	; 0x2e06 <main+0x8f4>
					while(1);
				}
			}
		}

for(u8 counter = 14 ;counter > 1 ;counter--)
    2e08:	de 01       	movw	r26, r28
    2e0a:	af 57       	subi	r26, 0x7F	; 127
    2e0c:	bf 4f       	sbci	r27, 0xFF	; 255
    2e0e:	fe 01       	movw	r30, r28
    2e10:	ef 57       	subi	r30, 0x7F	; 127
    2e12:	ff 4f       	sbci	r31, 0xFF	; 255
    2e14:	80 81       	ld	r24, Z
    2e16:	81 50       	subi	r24, 0x01	; 1
    2e18:	8c 93       	st	X, r24
    2e1a:	fe 01       	movw	r30, r28
    2e1c:	ef 57       	subi	r30, 0x7F	; 127
    2e1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e20:	80 81       	ld	r24, Z
    2e22:	82 30       	cpi	r24, 0x02	; 2
    2e24:	08 f0       	brcs	.+2      	; 0x2e28 <main+0x916>
    2e26:	4a ce       	rjmp	.-876    	; 0x2abc <main+0x5aa>
				while(1);
			}
		}
}

for(u8 counter = 1;counter < 15;counter++)
    2e28:	fe 01       	movw	r30, r28
    2e2a:	e0 58       	subi	r30, 0x80	; 128
    2e2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e2e:	81 e0       	ldi	r24, 0x01	; 1
    2e30:	80 83       	st	Z, r24
    2e32:	5b c1       	rjmp	.+694    	; 0x30ea <main+0xbd8>
{
	disableGIE();
    2e34:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <disableGIE>
	currentLine=SECOND_LINE;
    2e38:	82 e0       	ldi	r24, 0x02	; 2
    2e3a:	80 93 8b 01 	sts	0x018B, r24
	LCD_enuGoToPosition(currentLine,counter);
    2e3e:	80 91 8b 01 	lds	r24, 0x018B
    2e42:	fe 01       	movw	r30, r28
    2e44:	e0 58       	subi	r30, 0x80	; 128
    2e46:	ff 4f       	sbci	r31, 0xFF	; 255
    2e48:	60 81       	ld	r22, Z
    2e4a:	0e 94 a2 11 	call	0x2344	; 0x2344 <LCD_enuGoToPosition>
	LCD_enuDisplayChar('O');
    2e4e:	8f e4       	ldi	r24, 0x4F	; 79
    2e50:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <LCD_enuDisplayChar>
	enableGIE();
    2e54:	0e 94 79 06 	call	0xcf2	; 0xcf2 <enableGIE>
	_delay_ms(delay);
    2e58:	80 91 87 01 	lds	r24, 0x0187
    2e5c:	90 91 88 01 	lds	r25, 0x0188
    2e60:	cc 01       	movw	r24, r24
    2e62:	a0 e0       	ldi	r26, 0x00	; 0
    2e64:	b0 e0       	ldi	r27, 0x00	; 0
    2e66:	bc 01       	movw	r22, r24
    2e68:	cd 01       	movw	r24, r26
    2e6a:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    2e6e:	dc 01       	movw	r26, r24
    2e70:	cb 01       	movw	r24, r22
    2e72:	8d ab       	std	Y+53, r24	; 0x35
    2e74:	9e ab       	std	Y+54, r25	; 0x36
    2e76:	af ab       	std	Y+55, r26	; 0x37
    2e78:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e7a:	6d a9       	ldd	r22, Y+53	; 0x35
    2e7c:	7e a9       	ldd	r23, Y+54	; 0x36
    2e7e:	8f a9       	ldd	r24, Y+55	; 0x37
    2e80:	98 ad       	ldd	r25, Y+56	; 0x38
    2e82:	20 e0       	ldi	r18, 0x00	; 0
    2e84:	30 e0       	ldi	r19, 0x00	; 0
    2e86:	4a e7       	ldi	r20, 0x7A	; 122
    2e88:	53 e4       	ldi	r21, 0x43	; 67
    2e8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e8e:	dc 01       	movw	r26, r24
    2e90:	cb 01       	movw	r24, r22
    2e92:	89 ab       	std	Y+49, r24	; 0x31
    2e94:	9a ab       	std	Y+50, r25	; 0x32
    2e96:	ab ab       	std	Y+51, r26	; 0x33
    2e98:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2e9a:	69 a9       	ldd	r22, Y+49	; 0x31
    2e9c:	7a a9       	ldd	r23, Y+50	; 0x32
    2e9e:	8b a9       	ldd	r24, Y+51	; 0x33
    2ea0:	9c a9       	ldd	r25, Y+52	; 0x34
    2ea2:	20 e0       	ldi	r18, 0x00	; 0
    2ea4:	30 e0       	ldi	r19, 0x00	; 0
    2ea6:	40 e8       	ldi	r20, 0x80	; 128
    2ea8:	5f e3       	ldi	r21, 0x3F	; 63
    2eaa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2eae:	88 23       	and	r24, r24
    2eb0:	2c f4       	brge	.+10     	; 0x2ebc <main+0x9aa>
		__ticks = 1;
    2eb2:	81 e0       	ldi	r24, 0x01	; 1
    2eb4:	90 e0       	ldi	r25, 0x00	; 0
    2eb6:	98 ab       	std	Y+48, r25	; 0x30
    2eb8:	8f a7       	std	Y+47, r24	; 0x2f
    2eba:	3f c0       	rjmp	.+126    	; 0x2f3a <main+0xa28>
	else if (__tmp > 65535)
    2ebc:	69 a9       	ldd	r22, Y+49	; 0x31
    2ebe:	7a a9       	ldd	r23, Y+50	; 0x32
    2ec0:	8b a9       	ldd	r24, Y+51	; 0x33
    2ec2:	9c a9       	ldd	r25, Y+52	; 0x34
    2ec4:	20 e0       	ldi	r18, 0x00	; 0
    2ec6:	3f ef       	ldi	r19, 0xFF	; 255
    2ec8:	4f e7       	ldi	r20, 0x7F	; 127
    2eca:	57 e4       	ldi	r21, 0x47	; 71
    2ecc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ed0:	18 16       	cp	r1, r24
    2ed2:	4c f5       	brge	.+82     	; 0x2f26 <main+0xa14>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ed4:	6d a9       	ldd	r22, Y+53	; 0x35
    2ed6:	7e a9       	ldd	r23, Y+54	; 0x36
    2ed8:	8f a9       	ldd	r24, Y+55	; 0x37
    2eda:	98 ad       	ldd	r25, Y+56	; 0x38
    2edc:	20 e0       	ldi	r18, 0x00	; 0
    2ede:	30 e0       	ldi	r19, 0x00	; 0
    2ee0:	40 e2       	ldi	r20, 0x20	; 32
    2ee2:	51 e4       	ldi	r21, 0x41	; 65
    2ee4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ee8:	dc 01       	movw	r26, r24
    2eea:	cb 01       	movw	r24, r22
    2eec:	bc 01       	movw	r22, r24
    2eee:	cd 01       	movw	r24, r26
    2ef0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ef4:	dc 01       	movw	r26, r24
    2ef6:	cb 01       	movw	r24, r22
    2ef8:	98 ab       	std	Y+48, r25	; 0x30
    2efa:	8f a7       	std	Y+47, r24	; 0x2f
    2efc:	0f c0       	rjmp	.+30     	; 0x2f1c <main+0xa0a>
    2efe:	89 e1       	ldi	r24, 0x19	; 25
    2f00:	90 e0       	ldi	r25, 0x00	; 0
    2f02:	9e a7       	std	Y+46, r25	; 0x2e
    2f04:	8d a7       	std	Y+45, r24	; 0x2d
    2f06:	8d a5       	ldd	r24, Y+45	; 0x2d
    2f08:	9e a5       	ldd	r25, Y+46	; 0x2e
    2f0a:	01 97       	sbiw	r24, 0x01	; 1
    2f0c:	f1 f7       	brne	.-4      	; 0x2f0a <main+0x9f8>
    2f0e:	9e a7       	std	Y+46, r25	; 0x2e
    2f10:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f12:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f14:	98 a9       	ldd	r25, Y+48	; 0x30
    2f16:	01 97       	sbiw	r24, 0x01	; 1
    2f18:	98 ab       	std	Y+48, r25	; 0x30
    2f1a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f1c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f1e:	98 a9       	ldd	r25, Y+48	; 0x30
    2f20:	00 97       	sbiw	r24, 0x00	; 0
    2f22:	69 f7       	brne	.-38     	; 0x2efe <main+0x9ec>
    2f24:	14 c0       	rjmp	.+40     	; 0x2f4e <main+0xa3c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f26:	69 a9       	ldd	r22, Y+49	; 0x31
    2f28:	7a a9       	ldd	r23, Y+50	; 0x32
    2f2a:	8b a9       	ldd	r24, Y+51	; 0x33
    2f2c:	9c a9       	ldd	r25, Y+52	; 0x34
    2f2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f32:	dc 01       	movw	r26, r24
    2f34:	cb 01       	movw	r24, r22
    2f36:	98 ab       	std	Y+48, r25	; 0x30
    2f38:	8f a7       	std	Y+47, r24	; 0x2f
    2f3a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f3c:	98 a9       	ldd	r25, Y+48	; 0x30
    2f3e:	9c a7       	std	Y+44, r25	; 0x2c
    2f40:	8b a7       	std	Y+43, r24	; 0x2b
    2f42:	8b a5       	ldd	r24, Y+43	; 0x2b
    2f44:	9c a5       	ldd	r25, Y+44	; 0x2c
    2f46:	01 97       	sbiw	r24, 0x01	; 1
    2f48:	f1 f7       	brne	.-4      	; 0x2f46 <main+0xa34>
    2f4a:	9c a7       	std	Y+44, r25	; 0x2c
    2f4c:	8b a7       	std	Y+43, r24	; 0x2b
	disableGIE();
    2f4e:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <disableGIE>
	LCD_enuGoToPosition(currentLine,counter);
    2f52:	80 91 8b 01 	lds	r24, 0x018B
    2f56:	fe 01       	movw	r30, r28
    2f58:	e0 58       	subi	r30, 0x80	; 128
    2f5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f5c:	60 81       	ld	r22, Z
    2f5e:	0e 94 a2 11 	call	0x2344	; 0x2344 <LCD_enuGoToPosition>
	LCD_enuDisplayChar(' ');
    2f62:	80 e2       	ldi	r24, 0x20	; 32
    2f64:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <LCD_enuDisplayChar>
	counter++;
    2f68:	de 01       	movw	r26, r28
    2f6a:	a0 58       	subi	r26, 0x80	; 128
    2f6c:	bf 4f       	sbci	r27, 0xFF	; 255
    2f6e:	fe 01       	movw	r30, r28
    2f70:	e0 58       	subi	r30, 0x80	; 128
    2f72:	ff 4f       	sbci	r31, 0xFF	; 255
    2f74:	80 81       	ld	r24, Z
    2f76:	8f 5f       	subi	r24, 0xFF	; 255
    2f78:	8c 93       	st	X, r24
	currentLine=FIRST_LINE;
    2f7a:	81 e0       	ldi	r24, 0x01	; 1
    2f7c:	80 93 8b 01 	sts	0x018B, r24
	LCD_enuGoToPosition(currentLine,counter);
    2f80:	80 91 8b 01 	lds	r24, 0x018B
    2f84:	fe 01       	movw	r30, r28
    2f86:	e0 58       	subi	r30, 0x80	; 128
    2f88:	ff 4f       	sbci	r31, 0xFF	; 255
    2f8a:	60 81       	ld	r22, Z
    2f8c:	0e 94 a2 11 	call	0x2344	; 0x2344 <LCD_enuGoToPosition>
	LCD_enuDisplayChar('O');
    2f90:	8f e4       	ldi	r24, 0x4F	; 79
    2f92:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <LCD_enuDisplayChar>
	enableGIE();
    2f96:	0e 94 79 06 	call	0xcf2	; 0xcf2 <enableGIE>
	_delay_ms(delay);
    2f9a:	80 91 87 01 	lds	r24, 0x0187
    2f9e:	90 91 88 01 	lds	r25, 0x0188
    2fa2:	cc 01       	movw	r24, r24
    2fa4:	a0 e0       	ldi	r26, 0x00	; 0
    2fa6:	b0 e0       	ldi	r27, 0x00	; 0
    2fa8:	bc 01       	movw	r22, r24
    2faa:	cd 01       	movw	r24, r26
    2fac:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    2fb0:	dc 01       	movw	r26, r24
    2fb2:	cb 01       	movw	r24, r22
    2fb4:	8f a3       	std	Y+39, r24	; 0x27
    2fb6:	98 a7       	std	Y+40, r25	; 0x28
    2fb8:	a9 a7       	std	Y+41, r26	; 0x29
    2fba:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fbc:	6f a1       	ldd	r22, Y+39	; 0x27
    2fbe:	78 a5       	ldd	r23, Y+40	; 0x28
    2fc0:	89 a5       	ldd	r24, Y+41	; 0x29
    2fc2:	9a a5       	ldd	r25, Y+42	; 0x2a
    2fc4:	20 e0       	ldi	r18, 0x00	; 0
    2fc6:	30 e0       	ldi	r19, 0x00	; 0
    2fc8:	4a e7       	ldi	r20, 0x7A	; 122
    2fca:	53 e4       	ldi	r21, 0x43	; 67
    2fcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fd0:	dc 01       	movw	r26, r24
    2fd2:	cb 01       	movw	r24, r22
    2fd4:	8b a3       	std	Y+35, r24	; 0x23
    2fd6:	9c a3       	std	Y+36, r25	; 0x24
    2fd8:	ad a3       	std	Y+37, r26	; 0x25
    2fda:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2fdc:	6b a1       	ldd	r22, Y+35	; 0x23
    2fde:	7c a1       	ldd	r23, Y+36	; 0x24
    2fe0:	8d a1       	ldd	r24, Y+37	; 0x25
    2fe2:	9e a1       	ldd	r25, Y+38	; 0x26
    2fe4:	20 e0       	ldi	r18, 0x00	; 0
    2fe6:	30 e0       	ldi	r19, 0x00	; 0
    2fe8:	40 e8       	ldi	r20, 0x80	; 128
    2fea:	5f e3       	ldi	r21, 0x3F	; 63
    2fec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ff0:	88 23       	and	r24, r24
    2ff2:	2c f4       	brge	.+10     	; 0x2ffe <main+0xaec>
		__ticks = 1;
    2ff4:	81 e0       	ldi	r24, 0x01	; 1
    2ff6:	90 e0       	ldi	r25, 0x00	; 0
    2ff8:	9a a3       	std	Y+34, r25	; 0x22
    2ffa:	89 a3       	std	Y+33, r24	; 0x21
    2ffc:	3f c0       	rjmp	.+126    	; 0x307c <main+0xb6a>
	else if (__tmp > 65535)
    2ffe:	6b a1       	ldd	r22, Y+35	; 0x23
    3000:	7c a1       	ldd	r23, Y+36	; 0x24
    3002:	8d a1       	ldd	r24, Y+37	; 0x25
    3004:	9e a1       	ldd	r25, Y+38	; 0x26
    3006:	20 e0       	ldi	r18, 0x00	; 0
    3008:	3f ef       	ldi	r19, 0xFF	; 255
    300a:	4f e7       	ldi	r20, 0x7F	; 127
    300c:	57 e4       	ldi	r21, 0x47	; 71
    300e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3012:	18 16       	cp	r1, r24
    3014:	4c f5       	brge	.+82     	; 0x3068 <main+0xb56>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3016:	6f a1       	ldd	r22, Y+39	; 0x27
    3018:	78 a5       	ldd	r23, Y+40	; 0x28
    301a:	89 a5       	ldd	r24, Y+41	; 0x29
    301c:	9a a5       	ldd	r25, Y+42	; 0x2a
    301e:	20 e0       	ldi	r18, 0x00	; 0
    3020:	30 e0       	ldi	r19, 0x00	; 0
    3022:	40 e2       	ldi	r20, 0x20	; 32
    3024:	51 e4       	ldi	r21, 0x41	; 65
    3026:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    302a:	dc 01       	movw	r26, r24
    302c:	cb 01       	movw	r24, r22
    302e:	bc 01       	movw	r22, r24
    3030:	cd 01       	movw	r24, r26
    3032:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3036:	dc 01       	movw	r26, r24
    3038:	cb 01       	movw	r24, r22
    303a:	9a a3       	std	Y+34, r25	; 0x22
    303c:	89 a3       	std	Y+33, r24	; 0x21
    303e:	0f c0       	rjmp	.+30     	; 0x305e <main+0xb4c>
    3040:	89 e1       	ldi	r24, 0x19	; 25
    3042:	90 e0       	ldi	r25, 0x00	; 0
    3044:	98 a3       	std	Y+32, r25	; 0x20
    3046:	8f 8f       	std	Y+31, r24	; 0x1f
    3048:	8f 8d       	ldd	r24, Y+31	; 0x1f
    304a:	98 a1       	ldd	r25, Y+32	; 0x20
    304c:	01 97       	sbiw	r24, 0x01	; 1
    304e:	f1 f7       	brne	.-4      	; 0x304c <main+0xb3a>
    3050:	98 a3       	std	Y+32, r25	; 0x20
    3052:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3054:	89 a1       	ldd	r24, Y+33	; 0x21
    3056:	9a a1       	ldd	r25, Y+34	; 0x22
    3058:	01 97       	sbiw	r24, 0x01	; 1
    305a:	9a a3       	std	Y+34, r25	; 0x22
    305c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    305e:	89 a1       	ldd	r24, Y+33	; 0x21
    3060:	9a a1       	ldd	r25, Y+34	; 0x22
    3062:	00 97       	sbiw	r24, 0x00	; 0
    3064:	69 f7       	brne	.-38     	; 0x3040 <main+0xb2e>
    3066:	14 c0       	rjmp	.+40     	; 0x3090 <main+0xb7e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3068:	6b a1       	ldd	r22, Y+35	; 0x23
    306a:	7c a1       	ldd	r23, Y+36	; 0x24
    306c:	8d a1       	ldd	r24, Y+37	; 0x25
    306e:	9e a1       	ldd	r25, Y+38	; 0x26
    3070:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3074:	dc 01       	movw	r26, r24
    3076:	cb 01       	movw	r24, r22
    3078:	9a a3       	std	Y+34, r25	; 0x22
    307a:	89 a3       	std	Y+33, r24	; 0x21
    307c:	89 a1       	ldd	r24, Y+33	; 0x21
    307e:	9a a1       	ldd	r25, Y+34	; 0x22
    3080:	9e 8f       	std	Y+30, r25	; 0x1e
    3082:	8d 8f       	std	Y+29, r24	; 0x1d
    3084:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3086:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3088:	01 97       	sbiw	r24, 0x01	; 1
    308a:	f1 f7       	brne	.-4      	; 0x3088 <main+0xb76>
    308c:	9e 8f       	std	Y+30, r25	; 0x1e
    308e:	8d 8f       	std	Y+29, r24	; 0x1d
	disableGIE();
    3090:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <disableGIE>
	LCD_enuGoToPosition(currentLine,counter);
    3094:	80 91 8b 01 	lds	r24, 0x018B
    3098:	fe 01       	movw	r30, r28
    309a:	e0 58       	subi	r30, 0x80	; 128
    309c:	ff 4f       	sbci	r31, 0xFF	; 255
    309e:	60 81       	ld	r22, Z
    30a0:	0e 94 a2 11 	call	0x2344	; 0x2344 <LCD_enuGoToPosition>
	LCD_enuDisplayChar(' ');
    30a4:	80 e2       	ldi	r24, 0x20	; 32
    30a6:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <LCD_enuDisplayChar>

	if(counter==14)
    30aa:	fe 01       	movw	r30, r28
    30ac:	e0 58       	subi	r30, 0x80	; 128
    30ae:	ff 4f       	sbci	r31, 0xFF	; 255
    30b0:	80 81       	ld	r24, Z
    30b2:	8e 30       	cpi	r24, 0x0E	; 14
    30b4:	89 f4       	brne	.+34     	; 0x30d8 <main+0xbc6>
	{
		if (currentLine!=player2)
    30b6:	90 91 8b 01 	lds	r25, 0x018B
    30ba:	80 91 86 01 	lds	r24, 0x0186
    30be:	98 17       	cp	r25, r24
    30c0:	59 f0       	breq	.+22     	; 0x30d8 <main+0xbc6>
		{
			LCD_vidClearScreen();
    30c2:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <LCD_vidClearScreen>
			LCD_enuGoToPosition(FIRST_LINE,2);
    30c6:	81 e0       	ldi	r24, 0x01	; 1
    30c8:	62 e0       	ldi	r22, 0x02	; 2
    30ca:	0e 94 a2 11 	call	0x2344	; 0x2344 <LCD_enuGoToPosition>
			LCD_enuWriteString("player 1 win");
    30ce:	83 e6       	ldi	r24, 0x63	; 99
    30d0:	90 e0       	ldi	r25, 0x00	; 0
    30d2:	0e 94 05 12 	call	0x240a	; 0x240a <LCD_enuWriteString>
    30d6:	ff cf       	rjmp	.-2      	; 0x30d6 <main+0xbc4>
				while(1);
			}
		}
}

for(u8 counter = 1;counter < 15;counter++)
    30d8:	de 01       	movw	r26, r28
    30da:	a0 58       	subi	r26, 0x80	; 128
    30dc:	bf 4f       	sbci	r27, 0xFF	; 255
    30de:	fe 01       	movw	r30, r28
    30e0:	e0 58       	subi	r30, 0x80	; 128
    30e2:	ff 4f       	sbci	r31, 0xFF	; 255
    30e4:	80 81       	ld	r24, Z
    30e6:	8f 5f       	subi	r24, 0xFF	; 255
    30e8:	8c 93       	st	X, r24
    30ea:	fe 01       	movw	r30, r28
    30ec:	e0 58       	subi	r30, 0x80	; 128
    30ee:	ff 4f       	sbci	r31, 0xFF	; 255
    30f0:	80 81       	ld	r24, Z
    30f2:	8f 30       	cpi	r24, 0x0F	; 15
    30f4:	08 f4       	brcc	.+2      	; 0x30f8 <main+0xbe6>
    30f6:	9e ce       	rjmp	.-708    	; 0x2e34 <main+0x922>
			LCD_enuWriteString("player 1 win");
			while(1);
		}
	}
}
for(u8 counter = 14 ;counter > 1 ;counter--)
    30f8:	fe 01       	movw	r30, r28
    30fa:	e1 58       	subi	r30, 0x81	; 129
    30fc:	ff 4f       	sbci	r31, 0xFF	; 255
    30fe:	8e e0       	ldi	r24, 0x0E	; 14
    3100:	80 83       	st	Z, r24
    3102:	5b c1       	rjmp	.+694    	; 0x33ba <main+0xea8>
{
	disableGIE();
    3104:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <disableGIE>
	currentLine=SECOND_LINE;
    3108:	82 e0       	ldi	r24, 0x02	; 2
    310a:	80 93 8b 01 	sts	0x018B, r24
		LCD_enuGoToPosition(currentLine,counter);
    310e:	80 91 8b 01 	lds	r24, 0x018B
    3112:	fe 01       	movw	r30, r28
    3114:	e1 58       	subi	r30, 0x81	; 129
    3116:	ff 4f       	sbci	r31, 0xFF	; 255
    3118:	60 81       	ld	r22, Z
    311a:	0e 94 a2 11 	call	0x2344	; 0x2344 <LCD_enuGoToPosition>
		LCD_enuDisplayChar('O');
    311e:	8f e4       	ldi	r24, 0x4F	; 79
    3120:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <LCD_enuDisplayChar>
		enableGIE();
    3124:	0e 94 79 06 	call	0xcf2	; 0xcf2 <enableGIE>
		_delay_ms(delay);
    3128:	80 91 87 01 	lds	r24, 0x0187
    312c:	90 91 88 01 	lds	r25, 0x0188
    3130:	cc 01       	movw	r24, r24
    3132:	a0 e0       	ldi	r26, 0x00	; 0
    3134:	b0 e0       	ldi	r27, 0x00	; 0
    3136:	bc 01       	movw	r22, r24
    3138:	cd 01       	movw	r24, r26
    313a:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    313e:	dc 01       	movw	r26, r24
    3140:	cb 01       	movw	r24, r22
    3142:	89 8f       	std	Y+25, r24	; 0x19
    3144:	9a 8f       	std	Y+26, r25	; 0x1a
    3146:	ab 8f       	std	Y+27, r26	; 0x1b
    3148:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    314a:	69 8d       	ldd	r22, Y+25	; 0x19
    314c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    314e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3150:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3152:	20 e0       	ldi	r18, 0x00	; 0
    3154:	30 e0       	ldi	r19, 0x00	; 0
    3156:	4a e7       	ldi	r20, 0x7A	; 122
    3158:	53 e4       	ldi	r21, 0x43	; 67
    315a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    315e:	dc 01       	movw	r26, r24
    3160:	cb 01       	movw	r24, r22
    3162:	8d 8b       	std	Y+21, r24	; 0x15
    3164:	9e 8b       	std	Y+22, r25	; 0x16
    3166:	af 8b       	std	Y+23, r26	; 0x17
    3168:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    316a:	6d 89       	ldd	r22, Y+21	; 0x15
    316c:	7e 89       	ldd	r23, Y+22	; 0x16
    316e:	8f 89       	ldd	r24, Y+23	; 0x17
    3170:	98 8d       	ldd	r25, Y+24	; 0x18
    3172:	20 e0       	ldi	r18, 0x00	; 0
    3174:	30 e0       	ldi	r19, 0x00	; 0
    3176:	40 e8       	ldi	r20, 0x80	; 128
    3178:	5f e3       	ldi	r21, 0x3F	; 63
    317a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    317e:	88 23       	and	r24, r24
    3180:	2c f4       	brge	.+10     	; 0x318c <main+0xc7a>
		__ticks = 1;
    3182:	81 e0       	ldi	r24, 0x01	; 1
    3184:	90 e0       	ldi	r25, 0x00	; 0
    3186:	9c 8b       	std	Y+20, r25	; 0x14
    3188:	8b 8b       	std	Y+19, r24	; 0x13
    318a:	3f c0       	rjmp	.+126    	; 0x320a <main+0xcf8>
	else if (__tmp > 65535)
    318c:	6d 89       	ldd	r22, Y+21	; 0x15
    318e:	7e 89       	ldd	r23, Y+22	; 0x16
    3190:	8f 89       	ldd	r24, Y+23	; 0x17
    3192:	98 8d       	ldd	r25, Y+24	; 0x18
    3194:	20 e0       	ldi	r18, 0x00	; 0
    3196:	3f ef       	ldi	r19, 0xFF	; 255
    3198:	4f e7       	ldi	r20, 0x7F	; 127
    319a:	57 e4       	ldi	r21, 0x47	; 71
    319c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    31a0:	18 16       	cp	r1, r24
    31a2:	4c f5       	brge	.+82     	; 0x31f6 <main+0xce4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31a4:	69 8d       	ldd	r22, Y+25	; 0x19
    31a6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    31a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    31ac:	20 e0       	ldi	r18, 0x00	; 0
    31ae:	30 e0       	ldi	r19, 0x00	; 0
    31b0:	40 e2       	ldi	r20, 0x20	; 32
    31b2:	51 e4       	ldi	r21, 0x41	; 65
    31b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31b8:	dc 01       	movw	r26, r24
    31ba:	cb 01       	movw	r24, r22
    31bc:	bc 01       	movw	r22, r24
    31be:	cd 01       	movw	r24, r26
    31c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31c4:	dc 01       	movw	r26, r24
    31c6:	cb 01       	movw	r24, r22
    31c8:	9c 8b       	std	Y+20, r25	; 0x14
    31ca:	8b 8b       	std	Y+19, r24	; 0x13
    31cc:	0f c0       	rjmp	.+30     	; 0x31ec <main+0xcda>
    31ce:	89 e1       	ldi	r24, 0x19	; 25
    31d0:	90 e0       	ldi	r25, 0x00	; 0
    31d2:	9a 8b       	std	Y+18, r25	; 0x12
    31d4:	89 8b       	std	Y+17, r24	; 0x11
    31d6:	89 89       	ldd	r24, Y+17	; 0x11
    31d8:	9a 89       	ldd	r25, Y+18	; 0x12
    31da:	01 97       	sbiw	r24, 0x01	; 1
    31dc:	f1 f7       	brne	.-4      	; 0x31da <main+0xcc8>
    31de:	9a 8b       	std	Y+18, r25	; 0x12
    31e0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31e2:	8b 89       	ldd	r24, Y+19	; 0x13
    31e4:	9c 89       	ldd	r25, Y+20	; 0x14
    31e6:	01 97       	sbiw	r24, 0x01	; 1
    31e8:	9c 8b       	std	Y+20, r25	; 0x14
    31ea:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31ec:	8b 89       	ldd	r24, Y+19	; 0x13
    31ee:	9c 89       	ldd	r25, Y+20	; 0x14
    31f0:	00 97       	sbiw	r24, 0x00	; 0
    31f2:	69 f7       	brne	.-38     	; 0x31ce <main+0xcbc>
    31f4:	14 c0       	rjmp	.+40     	; 0x321e <main+0xd0c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31f6:	6d 89       	ldd	r22, Y+21	; 0x15
    31f8:	7e 89       	ldd	r23, Y+22	; 0x16
    31fa:	8f 89       	ldd	r24, Y+23	; 0x17
    31fc:	98 8d       	ldd	r25, Y+24	; 0x18
    31fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3202:	dc 01       	movw	r26, r24
    3204:	cb 01       	movw	r24, r22
    3206:	9c 8b       	std	Y+20, r25	; 0x14
    3208:	8b 8b       	std	Y+19, r24	; 0x13
    320a:	8b 89       	ldd	r24, Y+19	; 0x13
    320c:	9c 89       	ldd	r25, Y+20	; 0x14
    320e:	98 8b       	std	Y+16, r25	; 0x10
    3210:	8f 87       	std	Y+15, r24	; 0x0f
    3212:	8f 85       	ldd	r24, Y+15	; 0x0f
    3214:	98 89       	ldd	r25, Y+16	; 0x10
    3216:	01 97       	sbiw	r24, 0x01	; 1
    3218:	f1 f7       	brne	.-4      	; 0x3216 <main+0xd04>
    321a:	98 8b       	std	Y+16, r25	; 0x10
    321c:	8f 87       	std	Y+15, r24	; 0x0f
		disableGIE();
    321e:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <disableGIE>
		LCD_enuGoToPosition(currentLine,counter);
    3222:	80 91 8b 01 	lds	r24, 0x018B
    3226:	fe 01       	movw	r30, r28
    3228:	e1 58       	subi	r30, 0x81	; 129
    322a:	ff 4f       	sbci	r31, 0xFF	; 255
    322c:	60 81       	ld	r22, Z
    322e:	0e 94 a2 11 	call	0x2344	; 0x2344 <LCD_enuGoToPosition>
		LCD_enuDisplayChar(' ');
    3232:	80 e2       	ldi	r24, 0x20	; 32
    3234:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <LCD_enuDisplayChar>
		counter--;
    3238:	de 01       	movw	r26, r28
    323a:	a1 58       	subi	r26, 0x81	; 129
    323c:	bf 4f       	sbci	r27, 0xFF	; 255
    323e:	fe 01       	movw	r30, r28
    3240:	e1 58       	subi	r30, 0x81	; 129
    3242:	ff 4f       	sbci	r31, 0xFF	; 255
    3244:	80 81       	ld	r24, Z
    3246:	81 50       	subi	r24, 0x01	; 1
    3248:	8c 93       	st	X, r24
		currentLine=FIRST_LINE;
    324a:	81 e0       	ldi	r24, 0x01	; 1
    324c:	80 93 8b 01 	sts	0x018B, r24
		LCD_enuGoToPosition(currentLine,counter);
    3250:	80 91 8b 01 	lds	r24, 0x018B
    3254:	fe 01       	movw	r30, r28
    3256:	e1 58       	subi	r30, 0x81	; 129
    3258:	ff 4f       	sbci	r31, 0xFF	; 255
    325a:	60 81       	ld	r22, Z
    325c:	0e 94 a2 11 	call	0x2344	; 0x2344 <LCD_enuGoToPosition>
		LCD_enuDisplayChar('O');
    3260:	8f e4       	ldi	r24, 0x4F	; 79
    3262:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <LCD_enuDisplayChar>
		enableGIE();
    3266:	0e 94 79 06 	call	0xcf2	; 0xcf2 <enableGIE>
		_delay_ms(delay);
    326a:	80 91 87 01 	lds	r24, 0x0187
    326e:	90 91 88 01 	lds	r25, 0x0188
    3272:	cc 01       	movw	r24, r24
    3274:	a0 e0       	ldi	r26, 0x00	; 0
    3276:	b0 e0       	ldi	r27, 0x00	; 0
    3278:	bc 01       	movw	r22, r24
    327a:	cd 01       	movw	r24, r26
    327c:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    3280:	dc 01       	movw	r26, r24
    3282:	cb 01       	movw	r24, r22
    3284:	8b 87       	std	Y+11, r24	; 0x0b
    3286:	9c 87       	std	Y+12, r25	; 0x0c
    3288:	ad 87       	std	Y+13, r26	; 0x0d
    328a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    328c:	6b 85       	ldd	r22, Y+11	; 0x0b
    328e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3290:	8d 85       	ldd	r24, Y+13	; 0x0d
    3292:	9e 85       	ldd	r25, Y+14	; 0x0e
    3294:	20 e0       	ldi	r18, 0x00	; 0
    3296:	30 e0       	ldi	r19, 0x00	; 0
    3298:	4a e7       	ldi	r20, 0x7A	; 122
    329a:	53 e4       	ldi	r21, 0x43	; 67
    329c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32a0:	dc 01       	movw	r26, r24
    32a2:	cb 01       	movw	r24, r22
    32a4:	8f 83       	std	Y+7, r24	; 0x07
    32a6:	98 87       	std	Y+8, r25	; 0x08
    32a8:	a9 87       	std	Y+9, r26	; 0x09
    32aa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    32ac:	6f 81       	ldd	r22, Y+7	; 0x07
    32ae:	78 85       	ldd	r23, Y+8	; 0x08
    32b0:	89 85       	ldd	r24, Y+9	; 0x09
    32b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    32b4:	20 e0       	ldi	r18, 0x00	; 0
    32b6:	30 e0       	ldi	r19, 0x00	; 0
    32b8:	40 e8       	ldi	r20, 0x80	; 128
    32ba:	5f e3       	ldi	r21, 0x3F	; 63
    32bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    32c0:	88 23       	and	r24, r24
    32c2:	2c f4       	brge	.+10     	; 0x32ce <main+0xdbc>
		__ticks = 1;
    32c4:	81 e0       	ldi	r24, 0x01	; 1
    32c6:	90 e0       	ldi	r25, 0x00	; 0
    32c8:	9e 83       	std	Y+6, r25	; 0x06
    32ca:	8d 83       	std	Y+5, r24	; 0x05
    32cc:	3f c0       	rjmp	.+126    	; 0x334c <main+0xe3a>
	else if (__tmp > 65535)
    32ce:	6f 81       	ldd	r22, Y+7	; 0x07
    32d0:	78 85       	ldd	r23, Y+8	; 0x08
    32d2:	89 85       	ldd	r24, Y+9	; 0x09
    32d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    32d6:	20 e0       	ldi	r18, 0x00	; 0
    32d8:	3f ef       	ldi	r19, 0xFF	; 255
    32da:	4f e7       	ldi	r20, 0x7F	; 127
    32dc:	57 e4       	ldi	r21, 0x47	; 71
    32de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    32e2:	18 16       	cp	r1, r24
    32e4:	4c f5       	brge	.+82     	; 0x3338 <main+0xe26>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    32e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    32ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    32ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    32ee:	20 e0       	ldi	r18, 0x00	; 0
    32f0:	30 e0       	ldi	r19, 0x00	; 0
    32f2:	40 e2       	ldi	r20, 0x20	; 32
    32f4:	51 e4       	ldi	r21, 0x41	; 65
    32f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32fa:	dc 01       	movw	r26, r24
    32fc:	cb 01       	movw	r24, r22
    32fe:	bc 01       	movw	r22, r24
    3300:	cd 01       	movw	r24, r26
    3302:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3306:	dc 01       	movw	r26, r24
    3308:	cb 01       	movw	r24, r22
    330a:	9e 83       	std	Y+6, r25	; 0x06
    330c:	8d 83       	std	Y+5, r24	; 0x05
    330e:	0f c0       	rjmp	.+30     	; 0x332e <main+0xe1c>
    3310:	89 e1       	ldi	r24, 0x19	; 25
    3312:	90 e0       	ldi	r25, 0x00	; 0
    3314:	9c 83       	std	Y+4, r25	; 0x04
    3316:	8b 83       	std	Y+3, r24	; 0x03
    3318:	8b 81       	ldd	r24, Y+3	; 0x03
    331a:	9c 81       	ldd	r25, Y+4	; 0x04
    331c:	01 97       	sbiw	r24, 0x01	; 1
    331e:	f1 f7       	brne	.-4      	; 0x331c <main+0xe0a>
    3320:	9c 83       	std	Y+4, r25	; 0x04
    3322:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3324:	8d 81       	ldd	r24, Y+5	; 0x05
    3326:	9e 81       	ldd	r25, Y+6	; 0x06
    3328:	01 97       	sbiw	r24, 0x01	; 1
    332a:	9e 83       	std	Y+6, r25	; 0x06
    332c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    332e:	8d 81       	ldd	r24, Y+5	; 0x05
    3330:	9e 81       	ldd	r25, Y+6	; 0x06
    3332:	00 97       	sbiw	r24, 0x00	; 0
    3334:	69 f7       	brne	.-38     	; 0x3310 <main+0xdfe>
    3336:	14 c0       	rjmp	.+40     	; 0x3360 <main+0xe4e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3338:	6f 81       	ldd	r22, Y+7	; 0x07
    333a:	78 85       	ldd	r23, Y+8	; 0x08
    333c:	89 85       	ldd	r24, Y+9	; 0x09
    333e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3340:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3344:	dc 01       	movw	r26, r24
    3346:	cb 01       	movw	r24, r22
    3348:	9e 83       	std	Y+6, r25	; 0x06
    334a:	8d 83       	std	Y+5, r24	; 0x05
    334c:	8d 81       	ldd	r24, Y+5	; 0x05
    334e:	9e 81       	ldd	r25, Y+6	; 0x06
    3350:	9a 83       	std	Y+2, r25	; 0x02
    3352:	89 83       	std	Y+1, r24	; 0x01
    3354:	89 81       	ldd	r24, Y+1	; 0x01
    3356:	9a 81       	ldd	r25, Y+2	; 0x02
    3358:	01 97       	sbiw	r24, 0x01	; 1
    335a:	f1 f7       	brne	.-4      	; 0x3358 <main+0xe46>
    335c:	9a 83       	std	Y+2, r25	; 0x02
    335e:	89 83       	std	Y+1, r24	; 0x01
		disableGIE();
    3360:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <disableGIE>
		LCD_enuGoToPosition(currentLine,counter);
    3364:	80 91 8b 01 	lds	r24, 0x018B
    3368:	fe 01       	movw	r30, r28
    336a:	e1 58       	subi	r30, 0x81	; 129
    336c:	ff 4f       	sbci	r31, 0xFF	; 255
    336e:	60 81       	ld	r22, Z
    3370:	0e 94 a2 11 	call	0x2344	; 0x2344 <LCD_enuGoToPosition>
		LCD_enuDisplayChar(' ');
    3374:	80 e2       	ldi	r24, 0x20	; 32
    3376:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <LCD_enuDisplayChar>
		if(counter==1)
    337a:	fe 01       	movw	r30, r28
    337c:	e1 58       	subi	r30, 0x81	; 129
    337e:	ff 4f       	sbci	r31, 0xFF	; 255
    3380:	80 81       	ld	r24, Z
    3382:	81 30       	cpi	r24, 0x01	; 1
    3384:	89 f4       	brne	.+34     	; 0x33a8 <main+0xe96>
		{
			if (currentLine!=player1)
    3386:	90 91 8b 01 	lds	r25, 0x018B
    338a:	80 91 85 01 	lds	r24, 0x0185
    338e:	98 17       	cp	r25, r24
    3390:	59 f0       	breq	.+22     	; 0x33a8 <main+0xe96>
			{
				LCD_vidClearScreen();
    3392:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <LCD_vidClearScreen>
				LCD_enuGoToPosition(FIRST_LINE,2);
    3396:	81 e0       	ldi	r24, 0x01	; 1
    3398:	62 e0       	ldi	r22, 0x02	; 2
    339a:	0e 94 a2 11 	call	0x2344	; 0x2344 <LCD_enuGoToPosition>
				LCD_enuWriteString("player 2 win");
    339e:	80 e7       	ldi	r24, 0x70	; 112
    33a0:	90 e0       	ldi	r25, 0x00	; 0
    33a2:	0e 94 05 12 	call	0x240a	; 0x240a <LCD_enuWriteString>
    33a6:	ff cf       	rjmp	.-2      	; 0x33a6 <main+0xe94>
			LCD_enuWriteString("player 1 win");
			while(1);
		}
	}
}
for(u8 counter = 14 ;counter > 1 ;counter--)
    33a8:	de 01       	movw	r26, r28
    33aa:	a1 58       	subi	r26, 0x81	; 129
    33ac:	bf 4f       	sbci	r27, 0xFF	; 255
    33ae:	fe 01       	movw	r30, r28
    33b0:	e1 58       	subi	r30, 0x81	; 129
    33b2:	ff 4f       	sbci	r31, 0xFF	; 255
    33b4:	80 81       	ld	r24, Z
    33b6:	81 50       	subi	r24, 0x01	; 1
    33b8:	8c 93       	st	X, r24
    33ba:	fe 01       	movw	r30, r28
    33bc:	e1 58       	subi	r30, 0x81	; 129
    33be:	ff 4f       	sbci	r31, 0xFF	; 255
    33c0:	80 81       	ld	r24, Z
    33c2:	82 30       	cpi	r24, 0x02	; 2
    33c4:	08 f0       	brcs	.+2      	; 0x33c8 <main+0xeb6>
    33c6:	9e ce       	rjmp	.-708    	; 0x3104 <main+0xbf2>
    33c8:	ca c8       	rjmp	.-3692   	; 0x255e <main+0x4c>

000033ca <__vector_1>:

	return 0;
}

ISR(VECT_INT0)
{
    33ca:	1f 92       	push	r1
    33cc:	0f 92       	push	r0
    33ce:	0f b6       	in	r0, 0x3f	; 63
    33d0:	0f 92       	push	r0
    33d2:	11 24       	eor	r1, r1
    33d4:	2f 93       	push	r18
    33d6:	3f 93       	push	r19
    33d8:	4f 93       	push	r20
    33da:	5f 93       	push	r21
    33dc:	6f 93       	push	r22
    33de:	7f 93       	push	r23
    33e0:	8f 93       	push	r24
    33e2:	9f 93       	push	r25
    33e4:	af 93       	push	r26
    33e6:	bf 93       	push	r27
    33e8:	ef 93       	push	r30
    33ea:	ff 93       	push	r31
    33ec:	df 93       	push	r29
    33ee:	cf 93       	push	r28
    33f0:	cd b7       	in	r28, 0x3d	; 61
    33f2:	de b7       	in	r29, 0x3e	; 62
	//player 1 = 1 in the second line and = 0 in the first line
	if(player1==FIRST_LINE)
    33f4:	80 91 85 01 	lds	r24, 0x0185
    33f8:	81 30       	cpi	r24, 0x01	; 1
    33fa:	91 f4       	brne	.+36     	; 0x3420 <__vector_1+0x56>
	{
		LCD_enuGoToPosition(FIRST_LINE,0);
    33fc:	81 e0       	ldi	r24, 0x01	; 1
    33fe:	60 e0       	ldi	r22, 0x00	; 0
    3400:	0e 94 a2 11 	call	0x2344	; 0x2344 <LCD_enuGoToPosition>
			LCD_enuDisplayChar(' ');
    3404:	80 e2       	ldi	r24, 0x20	; 32
    3406:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <LCD_enuDisplayChar>
			LCD_enuGoToPosition(SECOND_LINE,0);
    340a:	82 e0       	ldi	r24, 0x02	; 2
    340c:	60 e0       	ldi	r22, 0x00	; 0
    340e:	0e 94 a2 11 	call	0x2344	; 0x2344 <LCD_enuGoToPosition>
			LCD_enuDisplayChar('|');
    3412:	8c e7       	ldi	r24, 0x7C	; 124
    3414:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <LCD_enuDisplayChar>
			player1 = SECOND_LINE;
    3418:	82 e0       	ldi	r24, 0x02	; 2
    341a:	80 93 85 01 	sts	0x0185, r24
    341e:	15 c0       	rjmp	.+42     	; 0x344a <__vector_1+0x80>
	}
	else if(player1==SECOND_LINE)
    3420:	80 91 85 01 	lds	r24, 0x0185
    3424:	82 30       	cpi	r24, 0x02	; 2
    3426:	89 f4       	brne	.+34     	; 0x344a <__vector_1+0x80>
	{
		LCD_enuGoToPosition(FIRST_LINE,0);
    3428:	81 e0       	ldi	r24, 0x01	; 1
    342a:	60 e0       	ldi	r22, 0x00	; 0
    342c:	0e 94 a2 11 	call	0x2344	; 0x2344 <LCD_enuGoToPosition>
			LCD_enuDisplayChar('|');
    3430:	8c e7       	ldi	r24, 0x7C	; 124
    3432:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <LCD_enuDisplayChar>
			LCD_enuGoToPosition(SECOND_LINE,0);
    3436:	82 e0       	ldi	r24, 0x02	; 2
    3438:	60 e0       	ldi	r22, 0x00	; 0
    343a:	0e 94 a2 11 	call	0x2344	; 0x2344 <LCD_enuGoToPosition>
			LCD_enuDisplayChar(' ');
    343e:	80 e2       	ldi	r24, 0x20	; 32
    3440:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <LCD_enuDisplayChar>
			player1=FIRST_LINE;
    3444:	81 e0       	ldi	r24, 0x01	; 1
    3446:	80 93 85 01 	sts	0x0185, r24
	}
}
    344a:	cf 91       	pop	r28
    344c:	df 91       	pop	r29
    344e:	ff 91       	pop	r31
    3450:	ef 91       	pop	r30
    3452:	bf 91       	pop	r27
    3454:	af 91       	pop	r26
    3456:	9f 91       	pop	r25
    3458:	8f 91       	pop	r24
    345a:	7f 91       	pop	r23
    345c:	6f 91       	pop	r22
    345e:	5f 91       	pop	r21
    3460:	4f 91       	pop	r20
    3462:	3f 91       	pop	r19
    3464:	2f 91       	pop	r18
    3466:	0f 90       	pop	r0
    3468:	0f be       	out	0x3f, r0	; 63
    346a:	0f 90       	pop	r0
    346c:	1f 90       	pop	r1
    346e:	18 95       	reti

00003470 <__vector_2>:

ISR(VECT_INT1)
{
    3470:	1f 92       	push	r1
    3472:	0f 92       	push	r0
    3474:	0f b6       	in	r0, 0x3f	; 63
    3476:	0f 92       	push	r0
    3478:	11 24       	eor	r1, r1
    347a:	2f 93       	push	r18
    347c:	3f 93       	push	r19
    347e:	4f 93       	push	r20
    3480:	5f 93       	push	r21
    3482:	6f 93       	push	r22
    3484:	7f 93       	push	r23
    3486:	8f 93       	push	r24
    3488:	9f 93       	push	r25
    348a:	af 93       	push	r26
    348c:	bf 93       	push	r27
    348e:	ef 93       	push	r30
    3490:	ff 93       	push	r31
    3492:	df 93       	push	r29
    3494:	cf 93       	push	r28
    3496:	cd b7       	in	r28, 0x3d	; 61
    3498:	de b7       	in	r29, 0x3e	; 62

	if(player2==FIRST_LINE)
    349a:	80 91 86 01 	lds	r24, 0x0186
    349e:	81 30       	cpi	r24, 0x01	; 1
    34a0:	91 f4       	brne	.+36     	; 0x34c6 <__vector_2+0x56>
	{
			LCD_enuGoToPosition(FIRST_LINE,15);
    34a2:	81 e0       	ldi	r24, 0x01	; 1
    34a4:	6f e0       	ldi	r22, 0x0F	; 15
    34a6:	0e 94 a2 11 	call	0x2344	; 0x2344 <LCD_enuGoToPosition>
			LCD_enuDisplayChar(' ');
    34aa:	80 e2       	ldi	r24, 0x20	; 32
    34ac:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <LCD_enuDisplayChar>
			LCD_enuGoToPosition(SECOND_LINE,15);
    34b0:	82 e0       	ldi	r24, 0x02	; 2
    34b2:	6f e0       	ldi	r22, 0x0F	; 15
    34b4:	0e 94 a2 11 	call	0x2344	; 0x2344 <LCD_enuGoToPosition>
			LCD_enuDisplayChar('|');
    34b8:	8c e7       	ldi	r24, 0x7C	; 124
    34ba:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <LCD_enuDisplayChar>
			player2=SECOND_LINE;
    34be:	82 e0       	ldi	r24, 0x02	; 2
    34c0:	80 93 86 01 	sts	0x0186, r24
    34c4:	15 c0       	rjmp	.+42     	; 0x34f0 <__vector_2+0x80>
	}
	else if(player2==SECOND_LINE)
    34c6:	80 91 86 01 	lds	r24, 0x0186
    34ca:	82 30       	cpi	r24, 0x02	; 2
    34cc:	89 f4       	brne	.+34     	; 0x34f0 <__vector_2+0x80>
	{
			LCD_enuGoToPosition(FIRST_LINE,15);
    34ce:	81 e0       	ldi	r24, 0x01	; 1
    34d0:	6f e0       	ldi	r22, 0x0F	; 15
    34d2:	0e 94 a2 11 	call	0x2344	; 0x2344 <LCD_enuGoToPosition>
			LCD_enuDisplayChar('|');
    34d6:	8c e7       	ldi	r24, 0x7C	; 124
    34d8:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <LCD_enuDisplayChar>
			LCD_enuGoToPosition(SECOND_LINE,15);
    34dc:	82 e0       	ldi	r24, 0x02	; 2
    34de:	6f e0       	ldi	r22, 0x0F	; 15
    34e0:	0e 94 a2 11 	call	0x2344	; 0x2344 <LCD_enuGoToPosition>
			LCD_enuDisplayChar(' ');
    34e4:	80 e2       	ldi	r24, 0x20	; 32
    34e6:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <LCD_enuDisplayChar>
			player2=FIRST_LINE;
    34ea:	81 e0       	ldi	r24, 0x01	; 1
    34ec:	80 93 86 01 	sts	0x0186, r24
	}
}
    34f0:	cf 91       	pop	r28
    34f2:	df 91       	pop	r29
    34f4:	ff 91       	pop	r31
    34f6:	ef 91       	pop	r30
    34f8:	bf 91       	pop	r27
    34fa:	af 91       	pop	r26
    34fc:	9f 91       	pop	r25
    34fe:	8f 91       	pop	r24
    3500:	7f 91       	pop	r23
    3502:	6f 91       	pop	r22
    3504:	5f 91       	pop	r21
    3506:	4f 91       	pop	r20
    3508:	3f 91       	pop	r19
    350a:	2f 91       	pop	r18
    350c:	0f 90       	pop	r0
    350e:	0f be       	out	0x3f, r0	; 63
    3510:	0f 90       	pop	r0
    3512:	1f 90       	pop	r1
    3514:	18 95       	reti

00003516 <__prologue_saves__>:
    3516:	2f 92       	push	r2
    3518:	3f 92       	push	r3
    351a:	4f 92       	push	r4
    351c:	5f 92       	push	r5
    351e:	6f 92       	push	r6
    3520:	7f 92       	push	r7
    3522:	8f 92       	push	r8
    3524:	9f 92       	push	r9
    3526:	af 92       	push	r10
    3528:	bf 92       	push	r11
    352a:	cf 92       	push	r12
    352c:	df 92       	push	r13
    352e:	ef 92       	push	r14
    3530:	ff 92       	push	r15
    3532:	0f 93       	push	r16
    3534:	1f 93       	push	r17
    3536:	cf 93       	push	r28
    3538:	df 93       	push	r29
    353a:	cd b7       	in	r28, 0x3d	; 61
    353c:	de b7       	in	r29, 0x3e	; 62
    353e:	ca 1b       	sub	r28, r26
    3540:	db 0b       	sbc	r29, r27
    3542:	0f b6       	in	r0, 0x3f	; 63
    3544:	f8 94       	cli
    3546:	de bf       	out	0x3e, r29	; 62
    3548:	0f be       	out	0x3f, r0	; 63
    354a:	cd bf       	out	0x3d, r28	; 61
    354c:	09 94       	ijmp

0000354e <__epilogue_restores__>:
    354e:	2a 88       	ldd	r2, Y+18	; 0x12
    3550:	39 88       	ldd	r3, Y+17	; 0x11
    3552:	48 88       	ldd	r4, Y+16	; 0x10
    3554:	5f 84       	ldd	r5, Y+15	; 0x0f
    3556:	6e 84       	ldd	r6, Y+14	; 0x0e
    3558:	7d 84       	ldd	r7, Y+13	; 0x0d
    355a:	8c 84       	ldd	r8, Y+12	; 0x0c
    355c:	9b 84       	ldd	r9, Y+11	; 0x0b
    355e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3560:	b9 84       	ldd	r11, Y+9	; 0x09
    3562:	c8 84       	ldd	r12, Y+8	; 0x08
    3564:	df 80       	ldd	r13, Y+7	; 0x07
    3566:	ee 80       	ldd	r14, Y+6	; 0x06
    3568:	fd 80       	ldd	r15, Y+5	; 0x05
    356a:	0c 81       	ldd	r16, Y+4	; 0x04
    356c:	1b 81       	ldd	r17, Y+3	; 0x03
    356e:	aa 81       	ldd	r26, Y+2	; 0x02
    3570:	b9 81       	ldd	r27, Y+1	; 0x01
    3572:	ce 0f       	add	r28, r30
    3574:	d1 1d       	adc	r29, r1
    3576:	0f b6       	in	r0, 0x3f	; 63
    3578:	f8 94       	cli
    357a:	de bf       	out	0x3e, r29	; 62
    357c:	0f be       	out	0x3f, r0	; 63
    357e:	cd bf       	out	0x3d, r28	; 61
    3580:	ed 01       	movw	r28, r26
    3582:	08 95       	ret

00003584 <sprintf>:
    3584:	ae e0       	ldi	r26, 0x0E	; 14
    3586:	b0 e0       	ldi	r27, 0x00	; 0
    3588:	e8 ec       	ldi	r30, 0xC8	; 200
    358a:	fa e1       	ldi	r31, 0x1A	; 26
    358c:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__prologue_saves__+0x1c>
    3590:	0d 89       	ldd	r16, Y+21	; 0x15
    3592:	1e 89       	ldd	r17, Y+22	; 0x16
    3594:	86 e0       	ldi	r24, 0x06	; 6
    3596:	8c 83       	std	Y+4, r24	; 0x04
    3598:	1a 83       	std	Y+2, r17	; 0x02
    359a:	09 83       	std	Y+1, r16	; 0x01
    359c:	8f ef       	ldi	r24, 0xFF	; 255
    359e:	9f e7       	ldi	r25, 0x7F	; 127
    35a0:	9e 83       	std	Y+6, r25	; 0x06
    35a2:	8d 83       	std	Y+5, r24	; 0x05
    35a4:	9e 01       	movw	r18, r28
    35a6:	27 5e       	subi	r18, 0xE7	; 231
    35a8:	3f 4f       	sbci	r19, 0xFF	; 255
    35aa:	ce 01       	movw	r24, r28
    35ac:	01 96       	adiw	r24, 0x01	; 1
    35ae:	6f 89       	ldd	r22, Y+23	; 0x17
    35b0:	78 8d       	ldd	r23, Y+24	; 0x18
    35b2:	a9 01       	movw	r20, r18
    35b4:	0e 94 e6 1a 	call	0x35cc	; 0x35cc <vfprintf>
    35b8:	2f 81       	ldd	r18, Y+7	; 0x07
    35ba:	38 85       	ldd	r19, Y+8	; 0x08
    35bc:	02 0f       	add	r16, r18
    35be:	13 1f       	adc	r17, r19
    35c0:	f8 01       	movw	r30, r16
    35c2:	10 82       	st	Z, r1
    35c4:	2e 96       	adiw	r28, 0x0e	; 14
    35c6:	e4 e0       	ldi	r30, 0x04	; 4
    35c8:	0c 94 b5 1a 	jmp	0x356a	; 0x356a <__epilogue_restores__+0x1c>

000035cc <vfprintf>:
    35cc:	ab e0       	ldi	r26, 0x0B	; 11
    35ce:	b0 e0       	ldi	r27, 0x00	; 0
    35d0:	ec ee       	ldi	r30, 0xEC	; 236
    35d2:	fa e1       	ldi	r31, 0x1A	; 26
    35d4:	0c 94 8b 1a 	jmp	0x3516	; 0x3516 <__prologue_saves__>
    35d8:	3c 01       	movw	r6, r24
    35da:	2b 01       	movw	r4, r22
    35dc:	5a 01       	movw	r10, r20
    35de:	fc 01       	movw	r30, r24
    35e0:	17 82       	std	Z+7, r1	; 0x07
    35e2:	16 82       	std	Z+6, r1	; 0x06
    35e4:	83 81       	ldd	r24, Z+3	; 0x03
    35e6:	81 fd       	sbrc	r24, 1
    35e8:	03 c0       	rjmp	.+6      	; 0x35f0 <vfprintf+0x24>
    35ea:	6f ef       	ldi	r22, 0xFF	; 255
    35ec:	7f ef       	ldi	r23, 0xFF	; 255
    35ee:	c6 c1       	rjmp	.+908    	; 0x397c <vfprintf+0x3b0>
    35f0:	9a e0       	ldi	r25, 0x0A	; 10
    35f2:	89 2e       	mov	r8, r25
    35f4:	1e 01       	movw	r2, r28
    35f6:	08 94       	sec
    35f8:	21 1c       	adc	r2, r1
    35fa:	31 1c       	adc	r3, r1
    35fc:	f3 01       	movw	r30, r6
    35fe:	23 81       	ldd	r18, Z+3	; 0x03
    3600:	f2 01       	movw	r30, r4
    3602:	23 fd       	sbrc	r18, 3
    3604:	85 91       	lpm	r24, Z+
    3606:	23 ff       	sbrs	r18, 3
    3608:	81 91       	ld	r24, Z+
    360a:	2f 01       	movw	r4, r30
    360c:	88 23       	and	r24, r24
    360e:	09 f4       	brne	.+2      	; 0x3612 <vfprintf+0x46>
    3610:	b2 c1       	rjmp	.+868    	; 0x3976 <vfprintf+0x3aa>
    3612:	85 32       	cpi	r24, 0x25	; 37
    3614:	39 f4       	brne	.+14     	; 0x3624 <vfprintf+0x58>
    3616:	23 fd       	sbrc	r18, 3
    3618:	85 91       	lpm	r24, Z+
    361a:	23 ff       	sbrs	r18, 3
    361c:	81 91       	ld	r24, Z+
    361e:	2f 01       	movw	r4, r30
    3620:	85 32       	cpi	r24, 0x25	; 37
    3622:	29 f4       	brne	.+10     	; 0x362e <vfprintf+0x62>
    3624:	90 e0       	ldi	r25, 0x00	; 0
    3626:	b3 01       	movw	r22, r6
    3628:	0e 94 d9 1c 	call	0x39b2	; 0x39b2 <fputc>
    362c:	e7 cf       	rjmp	.-50     	; 0x35fc <vfprintf+0x30>
    362e:	98 2f       	mov	r25, r24
    3630:	ff 24       	eor	r15, r15
    3632:	ee 24       	eor	r14, r14
    3634:	99 24       	eor	r9, r9
    3636:	ff e1       	ldi	r31, 0x1F	; 31
    3638:	ff 15       	cp	r31, r15
    363a:	d0 f0       	brcs	.+52     	; 0x3670 <vfprintf+0xa4>
    363c:	9b 32       	cpi	r25, 0x2B	; 43
    363e:	69 f0       	breq	.+26     	; 0x365a <vfprintf+0x8e>
    3640:	9c 32       	cpi	r25, 0x2C	; 44
    3642:	28 f4       	brcc	.+10     	; 0x364e <vfprintf+0x82>
    3644:	90 32       	cpi	r25, 0x20	; 32
    3646:	59 f0       	breq	.+22     	; 0x365e <vfprintf+0x92>
    3648:	93 32       	cpi	r25, 0x23	; 35
    364a:	91 f4       	brne	.+36     	; 0x3670 <vfprintf+0xa4>
    364c:	0e c0       	rjmp	.+28     	; 0x366a <vfprintf+0x9e>
    364e:	9d 32       	cpi	r25, 0x2D	; 45
    3650:	49 f0       	breq	.+18     	; 0x3664 <vfprintf+0x98>
    3652:	90 33       	cpi	r25, 0x30	; 48
    3654:	69 f4       	brne	.+26     	; 0x3670 <vfprintf+0xa4>
    3656:	41 e0       	ldi	r20, 0x01	; 1
    3658:	24 c0       	rjmp	.+72     	; 0x36a2 <vfprintf+0xd6>
    365a:	52 e0       	ldi	r21, 0x02	; 2
    365c:	f5 2a       	or	r15, r21
    365e:	84 e0       	ldi	r24, 0x04	; 4
    3660:	f8 2a       	or	r15, r24
    3662:	28 c0       	rjmp	.+80     	; 0x36b4 <vfprintf+0xe8>
    3664:	98 e0       	ldi	r25, 0x08	; 8
    3666:	f9 2a       	or	r15, r25
    3668:	25 c0       	rjmp	.+74     	; 0x36b4 <vfprintf+0xe8>
    366a:	e0 e1       	ldi	r30, 0x10	; 16
    366c:	fe 2a       	or	r15, r30
    366e:	22 c0       	rjmp	.+68     	; 0x36b4 <vfprintf+0xe8>
    3670:	f7 fc       	sbrc	r15, 7
    3672:	29 c0       	rjmp	.+82     	; 0x36c6 <vfprintf+0xfa>
    3674:	89 2f       	mov	r24, r25
    3676:	80 53       	subi	r24, 0x30	; 48
    3678:	8a 30       	cpi	r24, 0x0A	; 10
    367a:	70 f4       	brcc	.+28     	; 0x3698 <vfprintf+0xcc>
    367c:	f6 fe       	sbrs	r15, 6
    367e:	05 c0       	rjmp	.+10     	; 0x368a <vfprintf+0xbe>
    3680:	98 9c       	mul	r9, r8
    3682:	90 2c       	mov	r9, r0
    3684:	11 24       	eor	r1, r1
    3686:	98 0e       	add	r9, r24
    3688:	15 c0       	rjmp	.+42     	; 0x36b4 <vfprintf+0xe8>
    368a:	e8 9c       	mul	r14, r8
    368c:	e0 2c       	mov	r14, r0
    368e:	11 24       	eor	r1, r1
    3690:	e8 0e       	add	r14, r24
    3692:	f0 e2       	ldi	r31, 0x20	; 32
    3694:	ff 2a       	or	r15, r31
    3696:	0e c0       	rjmp	.+28     	; 0x36b4 <vfprintf+0xe8>
    3698:	9e 32       	cpi	r25, 0x2E	; 46
    369a:	29 f4       	brne	.+10     	; 0x36a6 <vfprintf+0xda>
    369c:	f6 fc       	sbrc	r15, 6
    369e:	6b c1       	rjmp	.+726    	; 0x3976 <vfprintf+0x3aa>
    36a0:	40 e4       	ldi	r20, 0x40	; 64
    36a2:	f4 2a       	or	r15, r20
    36a4:	07 c0       	rjmp	.+14     	; 0x36b4 <vfprintf+0xe8>
    36a6:	9c 36       	cpi	r25, 0x6C	; 108
    36a8:	19 f4       	brne	.+6      	; 0x36b0 <vfprintf+0xe4>
    36aa:	50 e8       	ldi	r21, 0x80	; 128
    36ac:	f5 2a       	or	r15, r21
    36ae:	02 c0       	rjmp	.+4      	; 0x36b4 <vfprintf+0xe8>
    36b0:	98 36       	cpi	r25, 0x68	; 104
    36b2:	49 f4       	brne	.+18     	; 0x36c6 <vfprintf+0xfa>
    36b4:	f2 01       	movw	r30, r4
    36b6:	23 fd       	sbrc	r18, 3
    36b8:	95 91       	lpm	r25, Z+
    36ba:	23 ff       	sbrs	r18, 3
    36bc:	91 91       	ld	r25, Z+
    36be:	2f 01       	movw	r4, r30
    36c0:	99 23       	and	r25, r25
    36c2:	09 f0       	breq	.+2      	; 0x36c6 <vfprintf+0xfa>
    36c4:	b8 cf       	rjmp	.-144    	; 0x3636 <vfprintf+0x6a>
    36c6:	89 2f       	mov	r24, r25
    36c8:	85 54       	subi	r24, 0x45	; 69
    36ca:	83 30       	cpi	r24, 0x03	; 3
    36cc:	18 f0       	brcs	.+6      	; 0x36d4 <vfprintf+0x108>
    36ce:	80 52       	subi	r24, 0x20	; 32
    36d0:	83 30       	cpi	r24, 0x03	; 3
    36d2:	38 f4       	brcc	.+14     	; 0x36e2 <vfprintf+0x116>
    36d4:	44 e0       	ldi	r20, 0x04	; 4
    36d6:	50 e0       	ldi	r21, 0x00	; 0
    36d8:	a4 0e       	add	r10, r20
    36da:	b5 1e       	adc	r11, r21
    36dc:	5f e3       	ldi	r21, 0x3F	; 63
    36de:	59 83       	std	Y+1, r21	; 0x01
    36e0:	0f c0       	rjmp	.+30     	; 0x3700 <vfprintf+0x134>
    36e2:	93 36       	cpi	r25, 0x63	; 99
    36e4:	31 f0       	breq	.+12     	; 0x36f2 <vfprintf+0x126>
    36e6:	93 37       	cpi	r25, 0x73	; 115
    36e8:	79 f0       	breq	.+30     	; 0x3708 <vfprintf+0x13c>
    36ea:	93 35       	cpi	r25, 0x53	; 83
    36ec:	09 f0       	breq	.+2      	; 0x36f0 <vfprintf+0x124>
    36ee:	56 c0       	rjmp	.+172    	; 0x379c <vfprintf+0x1d0>
    36f0:	20 c0       	rjmp	.+64     	; 0x3732 <vfprintf+0x166>
    36f2:	f5 01       	movw	r30, r10
    36f4:	80 81       	ld	r24, Z
    36f6:	89 83       	std	Y+1, r24	; 0x01
    36f8:	42 e0       	ldi	r20, 0x02	; 2
    36fa:	50 e0       	ldi	r21, 0x00	; 0
    36fc:	a4 0e       	add	r10, r20
    36fe:	b5 1e       	adc	r11, r21
    3700:	61 01       	movw	r12, r2
    3702:	01 e0       	ldi	r16, 0x01	; 1
    3704:	10 e0       	ldi	r17, 0x00	; 0
    3706:	12 c0       	rjmp	.+36     	; 0x372c <vfprintf+0x160>
    3708:	f5 01       	movw	r30, r10
    370a:	c0 80       	ld	r12, Z
    370c:	d1 80       	ldd	r13, Z+1	; 0x01
    370e:	f6 fc       	sbrc	r15, 6
    3710:	03 c0       	rjmp	.+6      	; 0x3718 <vfprintf+0x14c>
    3712:	6f ef       	ldi	r22, 0xFF	; 255
    3714:	7f ef       	ldi	r23, 0xFF	; 255
    3716:	02 c0       	rjmp	.+4      	; 0x371c <vfprintf+0x150>
    3718:	69 2d       	mov	r22, r9
    371a:	70 e0       	ldi	r23, 0x00	; 0
    371c:	42 e0       	ldi	r20, 0x02	; 2
    371e:	50 e0       	ldi	r21, 0x00	; 0
    3720:	a4 0e       	add	r10, r20
    3722:	b5 1e       	adc	r11, r21
    3724:	c6 01       	movw	r24, r12
    3726:	0e 94 ce 1c 	call	0x399c	; 0x399c <strnlen>
    372a:	8c 01       	movw	r16, r24
    372c:	5f e7       	ldi	r21, 0x7F	; 127
    372e:	f5 22       	and	r15, r21
    3730:	14 c0       	rjmp	.+40     	; 0x375a <vfprintf+0x18e>
    3732:	f5 01       	movw	r30, r10
    3734:	c0 80       	ld	r12, Z
    3736:	d1 80       	ldd	r13, Z+1	; 0x01
    3738:	f6 fc       	sbrc	r15, 6
    373a:	03 c0       	rjmp	.+6      	; 0x3742 <vfprintf+0x176>
    373c:	6f ef       	ldi	r22, 0xFF	; 255
    373e:	7f ef       	ldi	r23, 0xFF	; 255
    3740:	02 c0       	rjmp	.+4      	; 0x3746 <vfprintf+0x17a>
    3742:	69 2d       	mov	r22, r9
    3744:	70 e0       	ldi	r23, 0x00	; 0
    3746:	42 e0       	ldi	r20, 0x02	; 2
    3748:	50 e0       	ldi	r21, 0x00	; 0
    374a:	a4 0e       	add	r10, r20
    374c:	b5 1e       	adc	r11, r21
    374e:	c6 01       	movw	r24, r12
    3750:	0e 94 c3 1c 	call	0x3986	; 0x3986 <strnlen_P>
    3754:	8c 01       	movw	r16, r24
    3756:	50 e8       	ldi	r21, 0x80	; 128
    3758:	f5 2a       	or	r15, r21
    375a:	f3 fe       	sbrs	r15, 3
    375c:	07 c0       	rjmp	.+14     	; 0x376c <vfprintf+0x1a0>
    375e:	1a c0       	rjmp	.+52     	; 0x3794 <vfprintf+0x1c8>
    3760:	80 e2       	ldi	r24, 0x20	; 32
    3762:	90 e0       	ldi	r25, 0x00	; 0
    3764:	b3 01       	movw	r22, r6
    3766:	0e 94 d9 1c 	call	0x39b2	; 0x39b2 <fputc>
    376a:	ea 94       	dec	r14
    376c:	8e 2d       	mov	r24, r14
    376e:	90 e0       	ldi	r25, 0x00	; 0
    3770:	08 17       	cp	r16, r24
    3772:	19 07       	cpc	r17, r25
    3774:	a8 f3       	brcs	.-22     	; 0x3760 <vfprintf+0x194>
    3776:	0e c0       	rjmp	.+28     	; 0x3794 <vfprintf+0x1c8>
    3778:	f6 01       	movw	r30, r12
    377a:	f7 fc       	sbrc	r15, 7
    377c:	85 91       	lpm	r24, Z+
    377e:	f7 fe       	sbrs	r15, 7
    3780:	81 91       	ld	r24, Z+
    3782:	6f 01       	movw	r12, r30
    3784:	90 e0       	ldi	r25, 0x00	; 0
    3786:	b3 01       	movw	r22, r6
    3788:	0e 94 d9 1c 	call	0x39b2	; 0x39b2 <fputc>
    378c:	e1 10       	cpse	r14, r1
    378e:	ea 94       	dec	r14
    3790:	01 50       	subi	r16, 0x01	; 1
    3792:	10 40       	sbci	r17, 0x00	; 0
    3794:	01 15       	cp	r16, r1
    3796:	11 05       	cpc	r17, r1
    3798:	79 f7       	brne	.-34     	; 0x3778 <vfprintf+0x1ac>
    379a:	ea c0       	rjmp	.+468    	; 0x3970 <vfprintf+0x3a4>
    379c:	94 36       	cpi	r25, 0x64	; 100
    379e:	11 f0       	breq	.+4      	; 0x37a4 <vfprintf+0x1d8>
    37a0:	99 36       	cpi	r25, 0x69	; 105
    37a2:	69 f5       	brne	.+90     	; 0x37fe <vfprintf+0x232>
    37a4:	f7 fe       	sbrs	r15, 7
    37a6:	08 c0       	rjmp	.+16     	; 0x37b8 <vfprintf+0x1ec>
    37a8:	f5 01       	movw	r30, r10
    37aa:	20 81       	ld	r18, Z
    37ac:	31 81       	ldd	r19, Z+1	; 0x01
    37ae:	42 81       	ldd	r20, Z+2	; 0x02
    37b0:	53 81       	ldd	r21, Z+3	; 0x03
    37b2:	84 e0       	ldi	r24, 0x04	; 4
    37b4:	90 e0       	ldi	r25, 0x00	; 0
    37b6:	0a c0       	rjmp	.+20     	; 0x37cc <vfprintf+0x200>
    37b8:	f5 01       	movw	r30, r10
    37ba:	80 81       	ld	r24, Z
    37bc:	91 81       	ldd	r25, Z+1	; 0x01
    37be:	9c 01       	movw	r18, r24
    37c0:	44 27       	eor	r20, r20
    37c2:	37 fd       	sbrc	r19, 7
    37c4:	40 95       	com	r20
    37c6:	54 2f       	mov	r21, r20
    37c8:	82 e0       	ldi	r24, 0x02	; 2
    37ca:	90 e0       	ldi	r25, 0x00	; 0
    37cc:	a8 0e       	add	r10, r24
    37ce:	b9 1e       	adc	r11, r25
    37d0:	9f e6       	ldi	r25, 0x6F	; 111
    37d2:	f9 22       	and	r15, r25
    37d4:	57 ff       	sbrs	r21, 7
    37d6:	09 c0       	rjmp	.+18     	; 0x37ea <vfprintf+0x21e>
    37d8:	50 95       	com	r21
    37da:	40 95       	com	r20
    37dc:	30 95       	com	r19
    37de:	21 95       	neg	r18
    37e0:	3f 4f       	sbci	r19, 0xFF	; 255
    37e2:	4f 4f       	sbci	r20, 0xFF	; 255
    37e4:	5f 4f       	sbci	r21, 0xFF	; 255
    37e6:	e0 e8       	ldi	r30, 0x80	; 128
    37e8:	fe 2a       	or	r15, r30
    37ea:	ca 01       	movw	r24, r20
    37ec:	b9 01       	movw	r22, r18
    37ee:	a1 01       	movw	r20, r2
    37f0:	2a e0       	ldi	r18, 0x0A	; 10
    37f2:	30 e0       	ldi	r19, 0x00	; 0
    37f4:	0e 94 05 1d 	call	0x3a0a	; 0x3a0a <__ultoa_invert>
    37f8:	d8 2e       	mov	r13, r24
    37fa:	d2 18       	sub	r13, r2
    37fc:	40 c0       	rjmp	.+128    	; 0x387e <vfprintf+0x2b2>
    37fe:	95 37       	cpi	r25, 0x75	; 117
    3800:	29 f4       	brne	.+10     	; 0x380c <vfprintf+0x240>
    3802:	1f 2d       	mov	r17, r15
    3804:	1f 7e       	andi	r17, 0xEF	; 239
    3806:	2a e0       	ldi	r18, 0x0A	; 10
    3808:	30 e0       	ldi	r19, 0x00	; 0
    380a:	1d c0       	rjmp	.+58     	; 0x3846 <vfprintf+0x27a>
    380c:	1f 2d       	mov	r17, r15
    380e:	19 7f       	andi	r17, 0xF9	; 249
    3810:	9f 36       	cpi	r25, 0x6F	; 111
    3812:	61 f0       	breq	.+24     	; 0x382c <vfprintf+0x260>
    3814:	90 37       	cpi	r25, 0x70	; 112
    3816:	20 f4       	brcc	.+8      	; 0x3820 <vfprintf+0x254>
    3818:	98 35       	cpi	r25, 0x58	; 88
    381a:	09 f0       	breq	.+2      	; 0x381e <vfprintf+0x252>
    381c:	ac c0       	rjmp	.+344    	; 0x3976 <vfprintf+0x3aa>
    381e:	0f c0       	rjmp	.+30     	; 0x383e <vfprintf+0x272>
    3820:	90 37       	cpi	r25, 0x70	; 112
    3822:	39 f0       	breq	.+14     	; 0x3832 <vfprintf+0x266>
    3824:	98 37       	cpi	r25, 0x78	; 120
    3826:	09 f0       	breq	.+2      	; 0x382a <vfprintf+0x25e>
    3828:	a6 c0       	rjmp	.+332    	; 0x3976 <vfprintf+0x3aa>
    382a:	04 c0       	rjmp	.+8      	; 0x3834 <vfprintf+0x268>
    382c:	28 e0       	ldi	r18, 0x08	; 8
    382e:	30 e0       	ldi	r19, 0x00	; 0
    3830:	0a c0       	rjmp	.+20     	; 0x3846 <vfprintf+0x27a>
    3832:	10 61       	ori	r17, 0x10	; 16
    3834:	14 fd       	sbrc	r17, 4
    3836:	14 60       	ori	r17, 0x04	; 4
    3838:	20 e1       	ldi	r18, 0x10	; 16
    383a:	30 e0       	ldi	r19, 0x00	; 0
    383c:	04 c0       	rjmp	.+8      	; 0x3846 <vfprintf+0x27a>
    383e:	14 fd       	sbrc	r17, 4
    3840:	16 60       	ori	r17, 0x06	; 6
    3842:	20 e1       	ldi	r18, 0x10	; 16
    3844:	32 e0       	ldi	r19, 0x02	; 2
    3846:	17 ff       	sbrs	r17, 7
    3848:	08 c0       	rjmp	.+16     	; 0x385a <vfprintf+0x28e>
    384a:	f5 01       	movw	r30, r10
    384c:	60 81       	ld	r22, Z
    384e:	71 81       	ldd	r23, Z+1	; 0x01
    3850:	82 81       	ldd	r24, Z+2	; 0x02
    3852:	93 81       	ldd	r25, Z+3	; 0x03
    3854:	44 e0       	ldi	r20, 0x04	; 4
    3856:	50 e0       	ldi	r21, 0x00	; 0
    3858:	08 c0       	rjmp	.+16     	; 0x386a <vfprintf+0x29e>
    385a:	f5 01       	movw	r30, r10
    385c:	80 81       	ld	r24, Z
    385e:	91 81       	ldd	r25, Z+1	; 0x01
    3860:	bc 01       	movw	r22, r24
    3862:	80 e0       	ldi	r24, 0x00	; 0
    3864:	90 e0       	ldi	r25, 0x00	; 0
    3866:	42 e0       	ldi	r20, 0x02	; 2
    3868:	50 e0       	ldi	r21, 0x00	; 0
    386a:	a4 0e       	add	r10, r20
    386c:	b5 1e       	adc	r11, r21
    386e:	a1 01       	movw	r20, r2
    3870:	0e 94 05 1d 	call	0x3a0a	; 0x3a0a <__ultoa_invert>
    3874:	d8 2e       	mov	r13, r24
    3876:	d2 18       	sub	r13, r2
    3878:	8f e7       	ldi	r24, 0x7F	; 127
    387a:	f8 2e       	mov	r15, r24
    387c:	f1 22       	and	r15, r17
    387e:	f6 fe       	sbrs	r15, 6
    3880:	0b c0       	rjmp	.+22     	; 0x3898 <vfprintf+0x2cc>
    3882:	5e ef       	ldi	r21, 0xFE	; 254
    3884:	f5 22       	and	r15, r21
    3886:	d9 14       	cp	r13, r9
    3888:	38 f4       	brcc	.+14     	; 0x3898 <vfprintf+0x2cc>
    388a:	f4 fe       	sbrs	r15, 4
    388c:	07 c0       	rjmp	.+14     	; 0x389c <vfprintf+0x2d0>
    388e:	f2 fc       	sbrc	r15, 2
    3890:	05 c0       	rjmp	.+10     	; 0x389c <vfprintf+0x2d0>
    3892:	8f ee       	ldi	r24, 0xEF	; 239
    3894:	f8 22       	and	r15, r24
    3896:	02 c0       	rjmp	.+4      	; 0x389c <vfprintf+0x2d0>
    3898:	1d 2d       	mov	r17, r13
    389a:	01 c0       	rjmp	.+2      	; 0x389e <vfprintf+0x2d2>
    389c:	19 2d       	mov	r17, r9
    389e:	f4 fe       	sbrs	r15, 4
    38a0:	0d c0       	rjmp	.+26     	; 0x38bc <vfprintf+0x2f0>
    38a2:	fe 01       	movw	r30, r28
    38a4:	ed 0d       	add	r30, r13
    38a6:	f1 1d       	adc	r31, r1
    38a8:	80 81       	ld	r24, Z
    38aa:	80 33       	cpi	r24, 0x30	; 48
    38ac:	19 f4       	brne	.+6      	; 0x38b4 <vfprintf+0x2e8>
    38ae:	99 ee       	ldi	r25, 0xE9	; 233
    38b0:	f9 22       	and	r15, r25
    38b2:	08 c0       	rjmp	.+16     	; 0x38c4 <vfprintf+0x2f8>
    38b4:	1f 5f       	subi	r17, 0xFF	; 255
    38b6:	f2 fe       	sbrs	r15, 2
    38b8:	05 c0       	rjmp	.+10     	; 0x38c4 <vfprintf+0x2f8>
    38ba:	03 c0       	rjmp	.+6      	; 0x38c2 <vfprintf+0x2f6>
    38bc:	8f 2d       	mov	r24, r15
    38be:	86 78       	andi	r24, 0x86	; 134
    38c0:	09 f0       	breq	.+2      	; 0x38c4 <vfprintf+0x2f8>
    38c2:	1f 5f       	subi	r17, 0xFF	; 255
    38c4:	0f 2d       	mov	r16, r15
    38c6:	f3 fc       	sbrc	r15, 3
    38c8:	14 c0       	rjmp	.+40     	; 0x38f2 <vfprintf+0x326>
    38ca:	f0 fe       	sbrs	r15, 0
    38cc:	0f c0       	rjmp	.+30     	; 0x38ec <vfprintf+0x320>
    38ce:	1e 15       	cp	r17, r14
    38d0:	10 f0       	brcs	.+4      	; 0x38d6 <vfprintf+0x30a>
    38d2:	9d 2c       	mov	r9, r13
    38d4:	0b c0       	rjmp	.+22     	; 0x38ec <vfprintf+0x320>
    38d6:	9d 2c       	mov	r9, r13
    38d8:	9e 0c       	add	r9, r14
    38da:	91 1a       	sub	r9, r17
    38dc:	1e 2d       	mov	r17, r14
    38de:	06 c0       	rjmp	.+12     	; 0x38ec <vfprintf+0x320>
    38e0:	80 e2       	ldi	r24, 0x20	; 32
    38e2:	90 e0       	ldi	r25, 0x00	; 0
    38e4:	b3 01       	movw	r22, r6
    38e6:	0e 94 d9 1c 	call	0x39b2	; 0x39b2 <fputc>
    38ea:	1f 5f       	subi	r17, 0xFF	; 255
    38ec:	1e 15       	cp	r17, r14
    38ee:	c0 f3       	brcs	.-16     	; 0x38e0 <vfprintf+0x314>
    38f0:	04 c0       	rjmp	.+8      	; 0x38fa <vfprintf+0x32e>
    38f2:	1e 15       	cp	r17, r14
    38f4:	10 f4       	brcc	.+4      	; 0x38fa <vfprintf+0x32e>
    38f6:	e1 1a       	sub	r14, r17
    38f8:	01 c0       	rjmp	.+2      	; 0x38fc <vfprintf+0x330>
    38fa:	ee 24       	eor	r14, r14
    38fc:	04 ff       	sbrs	r16, 4
    38fe:	0f c0       	rjmp	.+30     	; 0x391e <vfprintf+0x352>
    3900:	80 e3       	ldi	r24, 0x30	; 48
    3902:	90 e0       	ldi	r25, 0x00	; 0
    3904:	b3 01       	movw	r22, r6
    3906:	0e 94 d9 1c 	call	0x39b2	; 0x39b2 <fputc>
    390a:	02 ff       	sbrs	r16, 2
    390c:	1d c0       	rjmp	.+58     	; 0x3948 <vfprintf+0x37c>
    390e:	01 fd       	sbrc	r16, 1
    3910:	03 c0       	rjmp	.+6      	; 0x3918 <vfprintf+0x34c>
    3912:	88 e7       	ldi	r24, 0x78	; 120
    3914:	90 e0       	ldi	r25, 0x00	; 0
    3916:	0e c0       	rjmp	.+28     	; 0x3934 <vfprintf+0x368>
    3918:	88 e5       	ldi	r24, 0x58	; 88
    391a:	90 e0       	ldi	r25, 0x00	; 0
    391c:	0b c0       	rjmp	.+22     	; 0x3934 <vfprintf+0x368>
    391e:	80 2f       	mov	r24, r16
    3920:	86 78       	andi	r24, 0x86	; 134
    3922:	91 f0       	breq	.+36     	; 0x3948 <vfprintf+0x37c>
    3924:	01 ff       	sbrs	r16, 1
    3926:	02 c0       	rjmp	.+4      	; 0x392c <vfprintf+0x360>
    3928:	8b e2       	ldi	r24, 0x2B	; 43
    392a:	01 c0       	rjmp	.+2      	; 0x392e <vfprintf+0x362>
    392c:	80 e2       	ldi	r24, 0x20	; 32
    392e:	f7 fc       	sbrc	r15, 7
    3930:	8d e2       	ldi	r24, 0x2D	; 45
    3932:	90 e0       	ldi	r25, 0x00	; 0
    3934:	b3 01       	movw	r22, r6
    3936:	0e 94 d9 1c 	call	0x39b2	; 0x39b2 <fputc>
    393a:	06 c0       	rjmp	.+12     	; 0x3948 <vfprintf+0x37c>
    393c:	80 e3       	ldi	r24, 0x30	; 48
    393e:	90 e0       	ldi	r25, 0x00	; 0
    3940:	b3 01       	movw	r22, r6
    3942:	0e 94 d9 1c 	call	0x39b2	; 0x39b2 <fputc>
    3946:	9a 94       	dec	r9
    3948:	d9 14       	cp	r13, r9
    394a:	c0 f3       	brcs	.-16     	; 0x393c <vfprintf+0x370>
    394c:	da 94       	dec	r13
    394e:	f1 01       	movw	r30, r2
    3950:	ed 0d       	add	r30, r13
    3952:	f1 1d       	adc	r31, r1
    3954:	80 81       	ld	r24, Z
    3956:	90 e0       	ldi	r25, 0x00	; 0
    3958:	b3 01       	movw	r22, r6
    395a:	0e 94 d9 1c 	call	0x39b2	; 0x39b2 <fputc>
    395e:	dd 20       	and	r13, r13
    3960:	a9 f7       	brne	.-22     	; 0x394c <vfprintf+0x380>
    3962:	06 c0       	rjmp	.+12     	; 0x3970 <vfprintf+0x3a4>
    3964:	80 e2       	ldi	r24, 0x20	; 32
    3966:	90 e0       	ldi	r25, 0x00	; 0
    3968:	b3 01       	movw	r22, r6
    396a:	0e 94 d9 1c 	call	0x39b2	; 0x39b2 <fputc>
    396e:	ea 94       	dec	r14
    3970:	ee 20       	and	r14, r14
    3972:	c1 f7       	brne	.-16     	; 0x3964 <vfprintf+0x398>
    3974:	43 ce       	rjmp	.-890    	; 0x35fc <vfprintf+0x30>
    3976:	f3 01       	movw	r30, r6
    3978:	66 81       	ldd	r22, Z+6	; 0x06
    397a:	77 81       	ldd	r23, Z+7	; 0x07
    397c:	cb 01       	movw	r24, r22
    397e:	2b 96       	adiw	r28, 0x0b	; 11
    3980:	e2 e1       	ldi	r30, 0x12	; 18
    3982:	0c 94 a7 1a 	jmp	0x354e	; 0x354e <__epilogue_restores__>

00003986 <strnlen_P>:
    3986:	fc 01       	movw	r30, r24
    3988:	05 90       	lpm	r0, Z+
    398a:	61 50       	subi	r22, 0x01	; 1
    398c:	70 40       	sbci	r23, 0x00	; 0
    398e:	01 10       	cpse	r0, r1
    3990:	d8 f7       	brcc	.-10     	; 0x3988 <strnlen_P+0x2>
    3992:	80 95       	com	r24
    3994:	90 95       	com	r25
    3996:	8e 0f       	add	r24, r30
    3998:	9f 1f       	adc	r25, r31
    399a:	08 95       	ret

0000399c <strnlen>:
    399c:	fc 01       	movw	r30, r24
    399e:	61 50       	subi	r22, 0x01	; 1
    39a0:	70 40       	sbci	r23, 0x00	; 0
    39a2:	01 90       	ld	r0, Z+
    39a4:	01 10       	cpse	r0, r1
    39a6:	d8 f7       	brcc	.-10     	; 0x399e <strnlen+0x2>
    39a8:	80 95       	com	r24
    39aa:	90 95       	com	r25
    39ac:	8e 0f       	add	r24, r30
    39ae:	9f 1f       	adc	r25, r31
    39b0:	08 95       	ret

000039b2 <fputc>:
    39b2:	0f 93       	push	r16
    39b4:	1f 93       	push	r17
    39b6:	cf 93       	push	r28
    39b8:	df 93       	push	r29
    39ba:	8c 01       	movw	r16, r24
    39bc:	eb 01       	movw	r28, r22
    39be:	8b 81       	ldd	r24, Y+3	; 0x03
    39c0:	81 ff       	sbrs	r24, 1
    39c2:	1b c0       	rjmp	.+54     	; 0x39fa <fputc+0x48>
    39c4:	82 ff       	sbrs	r24, 2
    39c6:	0d c0       	rjmp	.+26     	; 0x39e2 <fputc+0x30>
    39c8:	2e 81       	ldd	r18, Y+6	; 0x06
    39ca:	3f 81       	ldd	r19, Y+7	; 0x07
    39cc:	8c 81       	ldd	r24, Y+4	; 0x04
    39ce:	9d 81       	ldd	r25, Y+5	; 0x05
    39d0:	28 17       	cp	r18, r24
    39d2:	39 07       	cpc	r19, r25
    39d4:	64 f4       	brge	.+24     	; 0x39ee <fputc+0x3c>
    39d6:	e8 81       	ld	r30, Y
    39d8:	f9 81       	ldd	r31, Y+1	; 0x01
    39da:	01 93       	st	Z+, r16
    39dc:	f9 83       	std	Y+1, r31	; 0x01
    39de:	e8 83       	st	Y, r30
    39e0:	06 c0       	rjmp	.+12     	; 0x39ee <fputc+0x3c>
    39e2:	e8 85       	ldd	r30, Y+8	; 0x08
    39e4:	f9 85       	ldd	r31, Y+9	; 0x09
    39e6:	80 2f       	mov	r24, r16
    39e8:	09 95       	icall
    39ea:	89 2b       	or	r24, r25
    39ec:	31 f4       	brne	.+12     	; 0x39fa <fputc+0x48>
    39ee:	8e 81       	ldd	r24, Y+6	; 0x06
    39f0:	9f 81       	ldd	r25, Y+7	; 0x07
    39f2:	01 96       	adiw	r24, 0x01	; 1
    39f4:	9f 83       	std	Y+7, r25	; 0x07
    39f6:	8e 83       	std	Y+6, r24	; 0x06
    39f8:	02 c0       	rjmp	.+4      	; 0x39fe <fputc+0x4c>
    39fa:	0f ef       	ldi	r16, 0xFF	; 255
    39fc:	1f ef       	ldi	r17, 0xFF	; 255
    39fe:	c8 01       	movw	r24, r16
    3a00:	df 91       	pop	r29
    3a02:	cf 91       	pop	r28
    3a04:	1f 91       	pop	r17
    3a06:	0f 91       	pop	r16
    3a08:	08 95       	ret

00003a0a <__ultoa_invert>:
    3a0a:	fa 01       	movw	r30, r20
    3a0c:	aa 27       	eor	r26, r26
    3a0e:	28 30       	cpi	r18, 0x08	; 8
    3a10:	51 f1       	breq	.+84     	; 0x3a66 <__ultoa_invert+0x5c>
    3a12:	20 31       	cpi	r18, 0x10	; 16
    3a14:	81 f1       	breq	.+96     	; 0x3a76 <__ultoa_invert+0x6c>
    3a16:	e8 94       	clt
    3a18:	6f 93       	push	r22
    3a1a:	6e 7f       	andi	r22, 0xFE	; 254
    3a1c:	6e 5f       	subi	r22, 0xFE	; 254
    3a1e:	7f 4f       	sbci	r23, 0xFF	; 255
    3a20:	8f 4f       	sbci	r24, 0xFF	; 255
    3a22:	9f 4f       	sbci	r25, 0xFF	; 255
    3a24:	af 4f       	sbci	r26, 0xFF	; 255
    3a26:	b1 e0       	ldi	r27, 0x01	; 1
    3a28:	3e d0       	rcall	.+124    	; 0x3aa6 <__ultoa_invert+0x9c>
    3a2a:	b4 e0       	ldi	r27, 0x04	; 4
    3a2c:	3c d0       	rcall	.+120    	; 0x3aa6 <__ultoa_invert+0x9c>
    3a2e:	67 0f       	add	r22, r23
    3a30:	78 1f       	adc	r23, r24
    3a32:	89 1f       	adc	r24, r25
    3a34:	9a 1f       	adc	r25, r26
    3a36:	a1 1d       	adc	r26, r1
    3a38:	68 0f       	add	r22, r24
    3a3a:	79 1f       	adc	r23, r25
    3a3c:	8a 1f       	adc	r24, r26
    3a3e:	91 1d       	adc	r25, r1
    3a40:	a1 1d       	adc	r26, r1
    3a42:	6a 0f       	add	r22, r26
    3a44:	71 1d       	adc	r23, r1
    3a46:	81 1d       	adc	r24, r1
    3a48:	91 1d       	adc	r25, r1
    3a4a:	a1 1d       	adc	r26, r1
    3a4c:	20 d0       	rcall	.+64     	; 0x3a8e <__ultoa_invert+0x84>
    3a4e:	09 f4       	brne	.+2      	; 0x3a52 <__ultoa_invert+0x48>
    3a50:	68 94       	set
    3a52:	3f 91       	pop	r19
    3a54:	2a e0       	ldi	r18, 0x0A	; 10
    3a56:	26 9f       	mul	r18, r22
    3a58:	11 24       	eor	r1, r1
    3a5a:	30 19       	sub	r19, r0
    3a5c:	30 5d       	subi	r19, 0xD0	; 208
    3a5e:	31 93       	st	Z+, r19
    3a60:	de f6       	brtc	.-74     	; 0x3a18 <__ultoa_invert+0xe>
    3a62:	cf 01       	movw	r24, r30
    3a64:	08 95       	ret
    3a66:	46 2f       	mov	r20, r22
    3a68:	47 70       	andi	r20, 0x07	; 7
    3a6a:	40 5d       	subi	r20, 0xD0	; 208
    3a6c:	41 93       	st	Z+, r20
    3a6e:	b3 e0       	ldi	r27, 0x03	; 3
    3a70:	0f d0       	rcall	.+30     	; 0x3a90 <__ultoa_invert+0x86>
    3a72:	c9 f7       	brne	.-14     	; 0x3a66 <__ultoa_invert+0x5c>
    3a74:	f6 cf       	rjmp	.-20     	; 0x3a62 <__ultoa_invert+0x58>
    3a76:	46 2f       	mov	r20, r22
    3a78:	4f 70       	andi	r20, 0x0F	; 15
    3a7a:	40 5d       	subi	r20, 0xD0	; 208
    3a7c:	4a 33       	cpi	r20, 0x3A	; 58
    3a7e:	18 f0       	brcs	.+6      	; 0x3a86 <__ultoa_invert+0x7c>
    3a80:	49 5d       	subi	r20, 0xD9	; 217
    3a82:	31 fd       	sbrc	r19, 1
    3a84:	40 52       	subi	r20, 0x20	; 32
    3a86:	41 93       	st	Z+, r20
    3a88:	02 d0       	rcall	.+4      	; 0x3a8e <__ultoa_invert+0x84>
    3a8a:	a9 f7       	brne	.-22     	; 0x3a76 <__ultoa_invert+0x6c>
    3a8c:	ea cf       	rjmp	.-44     	; 0x3a62 <__ultoa_invert+0x58>
    3a8e:	b4 e0       	ldi	r27, 0x04	; 4
    3a90:	a6 95       	lsr	r26
    3a92:	97 95       	ror	r25
    3a94:	87 95       	ror	r24
    3a96:	77 95       	ror	r23
    3a98:	67 95       	ror	r22
    3a9a:	ba 95       	dec	r27
    3a9c:	c9 f7       	brne	.-14     	; 0x3a90 <__ultoa_invert+0x86>
    3a9e:	00 97       	sbiw	r24, 0x00	; 0
    3aa0:	61 05       	cpc	r22, r1
    3aa2:	71 05       	cpc	r23, r1
    3aa4:	08 95       	ret
    3aa6:	9b 01       	movw	r18, r22
    3aa8:	ac 01       	movw	r20, r24
    3aaa:	0a 2e       	mov	r0, r26
    3aac:	06 94       	lsr	r0
    3aae:	57 95       	ror	r21
    3ab0:	47 95       	ror	r20
    3ab2:	37 95       	ror	r19
    3ab4:	27 95       	ror	r18
    3ab6:	ba 95       	dec	r27
    3ab8:	c9 f7       	brne	.-14     	; 0x3aac <__ultoa_invert+0xa2>
    3aba:	62 0f       	add	r22, r18
    3abc:	73 1f       	adc	r23, r19
    3abe:	84 1f       	adc	r24, r20
    3ac0:	95 1f       	adc	r25, r21
    3ac2:	a0 1d       	adc	r26, r0
    3ac4:	08 95       	ret

00003ac6 <_exit>:
    3ac6:	f8 94       	cli

00003ac8 <__stop_program>:
    3ac8:	ff cf       	rjmp	.-2      	; 0x3ac8 <__stop_program>
